%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 12 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-BoldItalic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
108 81 540 81 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 747 2 L
7 X
V
3 H
0 Z
0 X
N
108 46.88 342 63 R
7 X
V
0 10 Q
0 X
(6/29/93 04:55 pm andyj@osf.org) 108 56.33 T
360 46.88 540 63 R
7 X
V
0 X
(1 of 6) 516.68 56.33 T
108 90 540 711 R
7 X
V
1 24 Q
0 X
-1.2 (The ANDF T) 177.72 695 S
-1.2 (echnology Program) 295.45 695 S
-1.2 (at the OSF RI) 262.15 665 S
0 12 Q
(Andr) 280.63 631 T
(ew Johnson) 307.73 631 T
(James Loveluck) 282.86 615 T
(Ira Goldstein) 289.85 599 T
(Open Softwar) 251.98 583 T
(e Foundation) 323.38 583 T
0 10 Q
(1) 391.03 587.8 T
0 12 Q
(December 8, 1992) 278.54 547 T
108 449.98 540 453 C
90 451.49 558 451.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(1. Introduction) 108 458.33 T
2 14 Q
(There are two branches of the RI ANDF program: an Advanced T) 108 426.64 T
(echnology) 476.54 426.64 T
(branch whose goal is to evaluate the existing technology as a base for) 108 410.64 T
(productization by vendors; and a Research branch whose goal is to extend) 108 394.64 T
(the technology in a number of directions.) 108 378.64 T
(Our Advanced T) 108 350.64 T
(echnology objectives are as follows:) 201.05 350.64 T
2 13 Q
(\245) 122.4 327.31 T
3 F
(r) 136.8 327.31 T
(obustness) 141.37 327.31 T
2 F
(: to establish that the ANDF technology is capable of handling) 191.87 327.31 T
(lar) 136.8 312.31 T
(ge scale applications without requiring an extensive maintenance ef) 150.27 312.31 T
(fort.) 501.28 312.31 T
(\245) 122.4 289.31 T
3 F
(accessibility) 136.8 289.31 T
2 F
(: to provide training and documentation to make the ANDF) 201 289.31 T
(technology more accessible to system vendors \050who must provide ANDF) 136.8 274.31 T
(installer support\051 and to software vendors \050who must port their applications) 136.8 259.31 T
(to the ANDF portability framework\051.) 136.8 244.31 T
2 14 Q
(The ANDF Research objectives are:) 108 216.64 T
2 13 Q
(\245) 122.4 193.31 T
3 F
(technology transfer) 136.8 193.31 T
2 F
(: to improve access to the ANDF technology for the) 238.15 193.31 T
(research community at lar) 136.8 178.31 T
(ge by developing components based on freely) 271.79 178.31 T
(available software.) 136.8 163.31 T
108 117 540 137.09 C
108 124.99 239.98 124.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 11 Q
0 X
0 K
-0.24 (1.  This memo was written with the assistance of staf) 108 109.67 P
-0.24 (f from the Grenoble and Cambridge Research) 338.2 109.67 P
(Institutes.) 118.8 97.67 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The ANDF Technology Program at the OSF RI) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Advanced T) 108 736.84 T
(echnology Pr) 148.8 736.84 T
(ojects) 193.3 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(2 of 6) 516.68 54.45 T
108 90 540 720 R
7 X
V
2 13 Q
0 X
(\245) 122.4 711.33 T
3 F
(scalability) 136.8 711.33 T
2 F
(: to assure that the ANDF technology can handle massively) 190.91 711.33 T
(parallel architectures by investigating both language and intermediate) 136.8 696.33 T
(representation issues.) 136.8 681.33 T
(\245) 122.4 658.33 T
3 F
(formal methods) 136.8 658.33 T
2 F
(: to provide technologies which can demonstrate the) 217.96 658.33 T
(correctness of ANDF implementations with respect to a robustly de\336ned) 136.8 643.33 T
(ANDF speci\336cation.) 136.8 628.33 T
2 14 Q
(W) 108 600.67 T
(e are conducting this program through in-house research and) 120.09 600.67 T
(collaboration with university and industrial partners. The program is) 108 584.67 T
(supported by OSF funding, direct funding from industrial partners, and) 108 568.67 T
(government contracts with DARP) 108 552.67 T
(A and Esprit. The program is open\321our) 296.76 552.67 T
(results are reported to the technical community and our prototypes are) 108 536.67 T
(available to OSF members under the ANDF snapshot license as) 108 520.67 T
(unsupported experimental code.) 108 504.67 T
(The next two sections discusses current Advanced T) 108 476.67 T
(echnology and) 400.41 476.67 T
(Research projects being pursued to accomplish these objectives.) 108 460.67 T
4 9 Q
(SECTION 4) 470.57 460.67 T
2 14 Q
(lists future projects.) 108 444.67 T
4 9 Q
(SECTION 5) 222.26 444.67 T
2 14 Q
( summarizes our interactions with the research) 269.71 444.67 T
(members of OSF and) 108 428.67 T
4 9 Q
(SECTION 6) 230.81 428.67 T
2 14 Q
( concludes with re\337ections on the technology) 278.26 428.67 T
(transfer process to OSF Engineering or directly to vendor companies.) 108 412.67 T
108 368.98 540 372 C
90 370.49 558 370.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(2. Advanced T) 108 377.33 T
(echnology Projects) 201.13 377.33 T
2 14 Q
(The goal of these projects is to ensure that the existing technology is) 108 345.64 T
(adequate for real-world applications. T) 108 329.64 T
(o achieve this goal, the RI will work) 325.01 329.64 T
(closely with DRA, the ANDF technology provider) 108 313.64 T
(, as well as with ISVs,) 390.76 313.64 T
(vendors and OSF membership, to ascertain their needs.) 108 297.64 T
0 F
(The Portability Pr) 108 263.64 T
(oject) 217.35 263.64 T
2 F
(This project is analyzing the applicability of the ANDF technology to a) 108 234.64 T
(wide variety of application and system software. The intent is to produce) 108 218.64 T
(guidelines for making applications portable and then utilize these guidelines) 108 202.64 T
(to port a number of application codes, both freely available and) 108 186.64 T
(commercially licensed. The principal result of this ef) 108 170.64 T
(fort will be an ANDF) 403.87 170.64 T
(Porting Guide, which will provide a step-by-step approach to doing an) 108 154.64 T
(ANDF \322Portability\323 port of application codes. OSF will also formulate) 108 138.64 T
(training materials suitable for use in conjunction with \322hands-on\323 use of the) 108 122.64 T
(ANDF technology) 108 106.64 T
(.) 210.86 106.64 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The ANDF Technology Program at the OSF RI) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Resear) 108 736.84 T
(ch Pr) 131.39 736.84 T
(ojects) 149.67 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(3 of 6) 516.68 54.45 T
108 90 540 720 R
7 X
V
0 14 Q
0 X
(The Robustness Pr) 108 710.67 T
(oject) 220.47 710.67 T
2 F
(This project is focussed on assuring that the ANDF technology is applicable) 108 681.67 T
(for real world applications, as well as being able to pass industry standard) 108 665.67 T
(validation and performance suites. OSF has licensed the necessary suites to) 108 649.67 T
(provide both standard language coverage and benchmark data. OSF has also) 108 633.67 T
(determined that the available suites do not provide full coverage for all) 108 617.67 T
(points within the ANDF technology) 108 601.67 T
(, and thus is developing an additional set) 308.43 601.67 T
(of tests, based on regression reports, as well as employing a representative) 108 585.67 T
(set of the application codes. This project will also verify that the initial) 108 569.67 T
(ANDF size and performance guidelines are still maintained throughout the) 108 553.67 T
(technology development cycle.) 108 537.67 T
0 F
(The T) 108 503.67 T
(echnology T) 142.87 503.67 T
(ransfer Pr) 214.52 503.67 T
(oject) 276.05 503.67 T
2 F
(This project is designed to make the ANDF technology itself more) 108 474.67 T
(accessible to those who are interested in building and delivering ANDF) 108 458.67 T
(technology components. The initial focus is on making the Installer portion) 108 442.67 T
(of the technology accessible by providing a bridge between ANDF and the) 108 426.67 T
(freely available GNU C code generator technology) 108 410.67 T
(. This will accomplish) 392.3 410.67 T
(three goals:) 108 394.67 T
2 13 Q
(\245) 122.4 371.33 T
(provide a vehicle for providing additional platforms with ANDF installers,) 136.8 371.33 T
(since gcc has many existing ports, with many others under development for) 136.8 356.33 T
(new architectures;) 136.8 341.33 T
(\245) 122.4 318.33 T
(demonstrate the feasibility of interfacing the ANDF technology to existing) 136.8 318.33 T
(code generator technologies, including proprietary technologies from system) 136.8 303.33 T
(vendors; and) 136.8 288.33 T
(\245) 122.4 265.33 T
(provide a basis for training materials on utilizing and integrating with the) 136.8 265.33 T
(ANDF technology) 136.8 250.33 T
(.) 232.25 250.33 T
108 206.98 540 210 C
90 208.49 558 208.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(3. Research Projects) 108 215.33 T
2 14 Q
(The aim of these projects is to extend the ANDF technology to areas which) 108 183.64 T
(are not presently covered. This will include, not only extending the existing) 108 167.64 T
(base, by providing producers for C++ and F77 and installers for additional) 108 151.64 T
(machine architectures, but also more fundamental investigations such as the) 108 135.64 T
(development of validation technology based on formal models and) 108 119.64 T
(extensions of ANDF to parallel architecture machines.) 108 103.64 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The ANDF Technology Program at the OSF RI) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Futur) 108 736.84 T
(e Pr) 127.85 736.84 T
(ojects) 141.68 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(4 of 6) 516.68 54.45 T
108 90 540 720 R
7 X
V
0 14 Q
0 X
(The High Performance Computing ANDF Pr) 108 710.67 T
(oject) 377.07 710.67 T
2 F
(This project, funded by DARP) 108 681.67 T
(A, is to investigate the applicability of ANDF) 278.11 681.67 T
(and the ANDF technologies to the High Performance Computing) 108 665.67 T
(community) 108 649.67 T
(. The project will focus on issues related to detecting and) 170.84 649.67 T
(expressing parallelism in ANDF) 108 633.67 T
(, as well as supporting explicit parallelism,) 288.38 633.67 T
(such as that generated by Fortran-90 or C*. It will produce tools which) 108 617.67 T
(demonstrate the ef) 108 601.67 T
(fective use of parallelism in both ANDF and the) 211.11 601.67 T
(companion installer\050s\051.) 108 585.67 T
0 F
(The OMI/GLUE Pr) 108 551.67 T
(oject) 225.91 551.67 T
2 F
(The GLUE \050Global Language support and Uniform Environment\051 project is) 108 522.67 T
(part of the Open Microprocessor Initiative \050OMI\051, which is funded under) 108 506.67 T
(the European Esprit program.) 108 490.67 T
(There are four major themes to the GLUE project: formal speci\336cation and) 108 462.67 T
(validation; enlar) 108 446.67 T
(ging the core technology) 199.08 446.67 T
(, by developing additional) 336.9 446.67 T
(producers \050C++, F77\051 and installers \050Sparc, T) 108 430.67 T
(ransputer) 362.67 430.67 T
(, Alpha, and O1, a) 414.18 430.67 T
(processor to be developed by the OMI\051 and enhancing the ANDF run-time) 108 414.67 T
(and development environment \050by developing a debugger) 108 398.67 T
(, optimizer) 430.76 398.67 T
(,) 490.83 398.67 T
(installation manager) 108 382.67 T
(, etc.\051; developing ANDF extensions and prototype) 221.31 382.67 T
(producers for \322advanced languages\323 \050Ada and Lisp\051; and \336nally ANDF) 108 366.67 T
(extensions for parallelism \050Occam producer) 108 350.67 T
(, MIMD installer\051.) 353.02 350.67 T
(The OSF RI ef) 108 316.67 T
(fort will be concentrated on validation of the ANDF) 190.53 316.67 T
(technology) 108 300.67 T
(. However) 169.27 300.67 T
(, smaller amounts of manpower are also allocated to) 226.99 300.67 T
(tasks within the other areas, including: the support for DCE/RPC;) 108 284.67 T
-0.01 (performance evaluation results; and, in collaboration with the other partners,) 108 268.67 P
(extensions of the ANDF speci\336cations for Ada and Lisp, and for parallelism.) 108 252.67 T
108 208.98 540 212 C
90 210.49 558 210.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(4. Future Projects) 108 217.33 T
2 14 Q
(These projects are considered valuable for the overall program in ANDF) 108 185.64 T
(technology) 108 169.64 T
(, but are not currently funded. As other projects complete or as) 169.27 169.64 T
(outside funding is obtained, they may be pursued.) 108 153.64 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The ANDF Technology Program at the OSF RI) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Communication with the OSF Membership) 108 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(5 of 6) 516.68 54.45 T
108 90 540 720 R
7 X
V
0 14 Q
0 X
(Pr) 108 710.67 T
(oducer T) 122.51 710.67 T
(echnology) 175.25 710.67 T
2 F
(This project could be a companion to the T) 108 681.67 T
(echnology T) 347.97 681.67 T
(ransfer Project \050P3\051) 417.82 681.67 T
(except that it would concentrate on issues related to producer technology) 108 665.67 T
(generating ANDF) 108 649.67 T
(, rather than installer technology consuming ANDF) 207.53 649.67 T
(. The) 494.38 649.67 T
(issues here are identifying the portability issues in the language\050s\051 to be) 108 633.67 T
(considered and then designing a standard interface which properly defers) 108 617.67 T
(the implementation-de\336ned behaviors to the installer via the ANDF T) 108 601.67 T
(oken) 497.6 601.67 T
(mechanism.) 108 585.67 T
108 541.98 540 545 C
90 543.49 558 543.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(5. Communication with the OSF Membership) 108 550.33 T
2 14 Q
(The OSF RI will continue to promote involvement of the technical) 108 518.64 T
(communicy and OSF membership in the review and experimentation of) 108 502.64 T
(ANDF technology through electronic mailing lists, and the ANDF Snapshot) 108 486.64 T
(Program respectively) 108 470.64 T
(.) 226.39 470.64 T
(The RI will provide research distributions to OSF members who are ANDF) 108 442.64 T
(Snapshot licensees and several Snapshots are planned for 1993. The) 108 426.64 T
(technology is provided as unsupported code.) 108 410.64 T
108 366.95 540 369.98 C
90 368.46 558 368.46 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(6. T) 108 375.31 T
(echnology T) 132.29 375.31 T
(ransfer Plans) 212.98 375.31 T
2 14 Q
(There are several technology transfer strategies possible for ANDF in 1993:) 108 343.62 T
2 13 Q
(\245) 122.4 320.29 T
(OSF initiates an engineering program to produce a general of) 136.8 320.29 T
(fering) 455 320.29 T
(consisting of a speci\336cation, reference implementation and validation suites.) 136.8 305.29 T
(\245) 122.4 282.29 T
(OSF provides a speci\336cation and validation suite only) 136.8 282.29 T
(. Installers and) 416.93 282.29 T
(producers are provided by others.) 136.8 267.29 T
(\245) 122.4 244.29 T
(ANDF transfers directly to the industry and OSF has no further role. The) 136.8 244.29 T
(speci\336cation is maintained by a standards or) 136.8 229.29 T
(ganization and the technology is) 366.67 229.29 T
(produced by third parties.) 136.8 214.29 T
(\245) 122.4 191.29 T
(The technolody does not transfer in 93.) 136.8 191.29 T
2 14 Q
(Which of these options is selected by OSF will depend on acceptance by) 108 163.62 T
(vendors. W) 108 147.62 T
(e will assess their willingness to support the technology) 171.38 147.62 T
(periodically) 108 131.62 T
(. Of course, should the technology prove impracticalat this time,) 173.93 131.62 T
-0.01 (then the research program would continue, but no technology transfer would) 108 115.62 P
(take place in 93.) 108 99.62 T
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
108 753.98 540 756 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 72 540 74.02 2 L
7 X
V
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The ANDF Technology Program at the OSF RI) 108 56.33 T
351 46.88 540 63 R
7 X
V
0 X
(6 of 6) 516.68 56.33 T
108 90 540 720 R
7 X
V
0 14 Q
0 X
(For further information please contact:) 216 626.67 T
(Andr) 216 594.67 T
(ew Johnson) 247.62 594.67 T
(andyj@osf.org) 216 578.67 T
(\050617\051 621-7378) 216 562.67 T
108 90 540 720 C
108 90 540 216 C
108 90 540 207 R
7 X
0 K
V
2 10 Q
0 X
(Copyright 1993 by Open Software Foundation, Inc.) 108 200.33 T
(All Rights Reserved) 108 178.33 T
-0.19 (Permission to reproduce this document without fee is hereby granted, provided that the copyright notice and) 108 156.33 P
-0.08 (this permission notice appear in all copies or derivative works. OSF MAKES NO W) 108 144.33 P
-0.08 (ARRRANTY OF ANY) 443.36 144.33 P
(KIND WITH REGARD T) 108 132.33 T
(O THIS MA) 213.57 132.33 T
(TERIAL, INCLUDING, BUT NOT LIMITED T) 262.98 132.33 T
(O, THE IMPLIED) 459.05 132.33 T
-0.04 (W) 108 120.33 P
-0.04 (ARRANTIES OF MERCHANT) 116.32 120.33 P
-0.04 (ABILITY AND FITNESS FOR A P) 245.37 120.33 P
-0.04 (AR) 390 120.33 P
-0.04 (TICULAR PURPOSE. OSF shall) 403.28 120.33 P
(not be liable for errors contained herein or for any direct or indirect, incidental, special or consequential) 108 108.33 T
(damages in connection with the furnishing, performance, or use of this material.) 108 96.33 T
108 90 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "6" 7
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 6 1
%%DocumentFonts: Times-Bold
%%+ Times-BoldItalic
%%+ Times-Roman
%%+ Times-Italic
%%+ Helvetica
