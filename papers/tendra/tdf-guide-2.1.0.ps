%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 595.3 841.9 0 1 19 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Helvetica FMFONTDEFINE
5 0 /Helvetica-Bold FMFONTDEFINE
6 0 /Times-BoldItalic FMFONTDEFINE
7 0 /Helvetica-Oblique FMFONTDEFINE
8 0 /Helvetica-BoldOblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
0 24 Q
0 X
0 K
(A Guide to the TDF Speci\336cation) 181.51 600.28 T
0 14 Q
(Issue 2.1.0 \050June 1993\051) 387.13 508.94 T
1 12 Q
(Defence Research Agency) 394.8 144.28 T
(St Andrews Rd) 448.71 129.28 T
(Malvern) 481.37 114.28 T
(W) 450.36 99.28 T
(orcestershire) 460.73 99.28 T
(WR14 3PS) 468.35 84.28 T
(United Kingdom) 441.04 69.28 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "1" 2
595.3 841.9 0 FMBEGINPAGE
99 776.9 540 786.9 C
99 785.9 567 785.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(TDF Speci\336cation, Issue 2.1 \050June 1993\051) 99 790.23 T
0 12 Q
(Notice to Readers) 99 743.9 T
1 10 Q
0.21 (TDF is a portability technology and an architecture neutral format for expressing software applications which) 99 721.23 P
0.7 (was developed by the United Kingdom's Defence Research Agency \050DRA\051. DRA has demonstrated that the) 99 709.23 P
(TDF technology can support ANSI C on MIPS) 99 697.23 T
2 14 Q
(\322) 286.95 697.23 T
1 10 Q
(, Intel 386) 298 697.23 T
2 14 Q
(\324) 338.81 697.23 T
1 10 Q
(, V) 351.26 697.23 T
(AX) 362.18 697.23 T
2 14 Q
(\324) 376.62 697.23 T
1 10 Q
(, SP) 389.07 697.23 T
(ARC) 404.26 697.23 T
2 14 Q
(\324) 424.81 697.23 T
1 10 Q
( and Motorola) 437.26 697.23 T
2 14 Q
(\322) 493.89 697.23 T
1 10 Q
( 680x0.) 504.95 697.23 T
(Requests for information about TDF should be directed to:) 99 675.23 T
(    Dr) 99 653.23 T
(. N E Peeling) 118.99 653.23 T
(    Defence Research Agency) 99 641.23 T
(    St. Andrews Road) 99 629.23 T
(    Malvern) 99 617.23 T
(    W) 99 605.23 T
(orcestershire) 117.63 605.23 T
(    United Kingdom WR14 3PS) 99 593.23 T
(    T) 99 569.23 T
(el. +44 684 895314) 114.4 569.23 T
(    Fax +44 684 894303) 99 557.23 T
(    Internet peeling%hermes.mod.uk) 99 533.23 T
3 F
(@) 241.95 533.23 T
1 F
(relay) 251.15 533.23 T
(.mod.uk) 270.48 533.23 T
-0.05 (While every attempt has been made to ensure the accuracy of all the information in this document the Defence) 99 509.23 P
0.4 (Research Agency assumes no liability to any party for loss or damage, whether direct, indirect, incidental, or) 99 497.23 P
0.43 (consequential, caused by errors or omissions or by statements of any kind in this document, or for the use of) 99 485.23 P
-0.25 (any product or system described herein. The reader shall bear the sole responsibility for his/her actions taken in) 99 473.23 P
(reliance on the information in this document.) 99 461.23 T
0.31 (This document is for advanced information. It is not necessarily to be regarded as a \336nal or of) 99 439.23 P
0.31 (\336cial statement) 478.89 439.23 P
(by the Defence Research Agency) 99 427.23 T
(.) 231.56 427.23 T
(June 1993) 99 405.23 T
(Intel 386 is a registered trademark of Intel Corporation) 99 361.23 T
(MIPS is a registered trade mark of Mips Computer Systems Inc.) 99 339.23 T
(V) 99 317.23 T
(AX is a registered trademark of Digital Equipment Corporation) 104.93 317.23 T
(SP) 99 295.23 T
(ARC is a registered trademark of SP) 109.19 295.23 T
(ARC International, Inc.) 254.29 295.23 T
(Motorola is a registered trade mark of Motorola Inc.) 99 273.23 T
2 14 Q
(\323) 99 207.23 T
1 10 Q
( Crown Copyright 1993) 110.05 207.23 T
FMENDPAGE
%%EndPage: "1" 3
%%Page: "1" 3
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(Contents 1) 460.96 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(CONTENTS) 231.67 741.88 T
1 10 Q
(1) 72 665.19 T
(Introduction) 90 665.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 142.42 665.19 T
(1) 499 665.19 T
(2) 72 647.19 T
(SORTs and TOKENs) 90 647.19 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 179.9 647.19 T
(2) 499 647.19 T
(2.1) 79.2 630.19 T
(Token applications and first-class SORTs) 108 630.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 274.85 630.19 T
( 2) 496.5 630.19 T
(2.2) 79.2 613.19 T
(Token definitions) 108 613.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 182.4 613.19 T
(4) 499 613.19 T
(2.3) 79.2 596.19 T
(A simple use of a TOKEN) 108 596.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 214.88 596.19 T
( 4) 496.5 596.19 T
(2.4) 79.2 579.19 T
(Second class SORTs) 108 579.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 194.89 579.19 T
(5) 499 579.19 T
(3) 72 561.19 T
(CAPSULEs and UNITs) 90 561.19 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 189.9 561.19 T
(7) 499 561.19 T
(3.1) 79.2 544.19 T
(make_capsule and name-spaces) 108 544.19 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 239.87 544.19 T
(7) 499 544.19 T
(3.1.1) 86.4 531.19 T
(External linkages) 126 531.19 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.39 531.19 T
( 8) 496.5 531.19 T
(3.1.2) 86.4 518.19 T
(UNITs) 126 518.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 154.91 518.19 T
(8) 499 518.19 T
(3.1.3) 86.4 505.19 T
(make_unit) 126 505.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 172.4 505.19 T
(9) 499 505.19 T
(3.1.4) 86.4 492.19 T
(LINK) 126 492.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 152.42 492.19 T
(10) 494.01 492.19 T
(3.2) 79.2 475.19 T
(Definitions and declarations) 108 475.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 222.38 475.19 T
( 10) 491.51 475.19 T
(3.2.1) 86.4 462.19 T
(Scopes and linking) 126 462.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 204.89 462.19 T
(10) 494.01 462.19 T
(4) 72 444.19 T
(SHAPEs, ALIGNMENTs and OFFSETs.) 90 444.19 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 259.86 444.19 T
(12) 494.01 444.19 T
(4.1) 79.2 427.19 T
(Shapes) 108 427.19 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 139.92 427.19 T
(12) 494.01 427.19 T
(4.1.1) 86.4 414.19 T
(TOP, BOTTOM, LUB) 126 414.19 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 219.88 414.19 T
(13) 494.01 414.19 T
(4.1.2) 86.4 401.19 T
(INTEGER, FLOATING, BITFIELD, PROC) 126 401.19 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 307.33 401.19 T
(13) 494.01 401.19 T
(4.1.3) 86.4 388.19 T
(Non-primitive SHAPEs) 126 388.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 222.38 388.19 T
( 13) 491.51 388.19 T
(4.2) 79.2 371.19 T
(Alignments) 108 371.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 154.91 371.19 T
(13) 494.01 371.19 T
(4.2.1) 86.4 358.19 T
(ALIGNMENT constructors) 126 358.19 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 239.87 358.19 T
(14) 494.01 358.19 T
(4.2.2) 86.4 345.19 T
(Special alignments) 126 345.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 202.39 345.19 T
( 14) 491.51 345.19 T
(4.2.3) 86.4 332.19 T
(AL_TAG, make_al_tagdef) 126 332.19 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 237.37 332.19 T
(14) 494.01 332.19 T
(4.3) 79.2 315.19 T
(Pointer and offset SHAPEs) 108 315.19 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 219.88 315.19 T
(14) 494.01 315.19 T
(4.3.1) 86.4 302.19 T
(OFFSET) 126 302.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 164.91 302.19 T
(15) 494.01 302.19 T
(4.4) 79.2 285.19 T
(Compound SHAPEs) 108 285.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 194.89 285.19 T
(15) 494.01 285.19 T
(4.4.1) 86.4 272.19 T
(Offset arithmetic with compound shapes 15) 126 272.19 T
(4.4.2) 86.4 259.19 T
(offset_mult 16) 126 259.19 T
(4.4.3) 86.4 246.19 T
(OFFSET ordering and representation) 126 246.19 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 277.35 246.19 T
(16) 494.01 246.19 T
(4.5) 79.2 229.19 T
(BITFIELD alignments) 108 229.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 202.39 229.19 T
(17) 494.01 229.19 T
(5) 72 211.19 T
(Procedures and Locals) 90 211.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 182.4 211.19 T
(18) 494.01 211.19 T
(5.1) 79.2 194.19 T
(Defining and calling procedures) 108 194.19 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 237.37 194.19 T
( 18) 491.51 194.19 T
(5.1.1) 86.4 181.19 T
(make_proc) 126 181.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 174.9 181.19 T
(18) 494.01 181.19 T
(5.1.2) 86.4 168.19 T
(apply_proc, return) 126 168.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 202.39 168.19 T
(19) 494.01 168.19 T
(5.1.3) 86.4 155.19 T
3 F
(vartag) 126 155.19 T
1 F
(,) 152.1 155.19 T
3 F
(varparam) 157.09 155.19 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.39 155.19 T
( 19) 491.51 155.19 T
1 F
(5.2) 79.2 138.19 T
(Defining and using locals) 108 138.19 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 214.88 138.19 T
(19) 494.01 138.19 T
(5.2.1) 86.4 125.19 T
(identify, variable) 126 125.19 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.39 125.19 T
(19) 494.01 125.19 T
(5.2.2) 86.4 112.19 T
(Locals model and ACCESS) 126 112.19 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 237.37 112.19 T
( 20) 491.51 112.19 T
(5.2.3) 86.4 99.19 T
(local_alloc, local_free_all, last_local) 126 99.19 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 277.35 99.19 T
(21) 494.01 99.19 T
(5.3) 79.2 82.19 T
(Heap storage) 108 82.19 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 162.41 82.19 T
( 21) 491.51 82.19 T
FMENDPAGE
%%EndPage: "1" 4
%%Page: "2" 4
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(Contents 2) 460.96 36 T
72 72 523.3 769.9 R
7 X
V
0 X
(6) 72 763.23 T
(Control Flow within procedures) 90 763.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 222.38 763.23 T
(22) 494.01 763.23 T
(6.1) 79.2 746.23 T
(Unconditional flow) 108 746.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 189.9 746.23 T
(22) 494.01 746.23 T
(6.1.1) 86.4 733.23 T
(sequence) 126 733.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 164.91 733.23 T
(22) 494.01 733.23 T
(6.2) 79.2 716.23 T
(Conditional flow) 108 716.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 179.9 716.23 T
(22) 494.01 716.23 T
(6.2.1) 86.4 703.23 T
(labelled, make_label) 126 703.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 212.38 703.23 T
(22) 494.01 703.23 T
(6.2.2) 86.4 690.23 T
(goto, make_local_lv, goto_local_lv, long_jump) 126 690.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 319.82 690.23 T
(23) 494.01 690.23 T
(6.2.3) 86.4 677.23 T
(integer_test, NTEST) 126 677.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 212.38 677.23 T
(23) 494.01 677.23 T
(6.2.4) 86.4 664.23 T
(case) 126 664.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 147.42 664.23 T
(23) 494.01 664.23 T
(6.2.5) 86.4 651.23 T
(conditional, repeat) 126 651.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 204.89 651.23 T
(24) 494.01 651.23 T
(7) 72 633.23 T
(Values, variables and assignments.) 90 633.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 229.87 633.23 T
( 25) 491.51 633.23 T
(7.1) 79.2 616.23 T
(contents) 108 616.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 144.92 616.23 T
(25) 494.01 616.23 T
(7.2) 79.2 599.23 T
(assign) 108 599.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 137.42 599.23 T
(25) 494.01 599.23 T
(7.2.1) 86.4 586.23 T
(move_some, TRANSFER_MODE) 126 586.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 264.85 586.23 T
(26) 494.01 586.23 T
(7.3) 79.2 569.23 T
(contents_with_mode, assign_with_mode) 108 569.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 274.85 569.23 T
(26) 494.01 569.23 T
(8) 72 551.23 T
(Operations) 90 551.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 137.42 551.23 T
(27) 494.01 551.23 T
(8.1) 79.2 534.23 T
(VARIETY and overflow) 108 534.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 209.88 534.23 T
(27) 494.01 534.23 T
(8.1.1) 86.4 521.23 T
(ERROR_TREATMENT) 126 521.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.37 521.23 T
(28) 494.01 521.23 T
(8.1.2) 86.4 508.23 T
(impossible, ignore) 126 508.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 199.89 508.23 T
( 28) 491.51 508.23 T
(8.2) 79.2 491.23 T
(Division and remainder) 108 491.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 204.89 491.23 T
(28) 494.01 491.23 T
(8.3) 79.2 474.23 T
(change_variety) 108 474.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 172.4 474.23 T
(29) 494.01 474.23 T
(8.4) 79.2 457.23 T
(and, or, not, xor) 108 457.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 174.9 457.23 T
(29) 494.01 457.23 T
(8.5) 79.2 440.23 T
(Floating-point operations, ROUNDING_MODE) 108 440.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 304.83 440.23 T
(29) 494.01 440.23 T
(8.6) 79.2 423.23 T
(change_bitfield_to_int, change_int_to_bitfield) 108 423.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 294.84 423.23 T
( 29) 491.51 423.23 T
(8.7) 79.2 406.23 T
(make_compound, make_nof, n_copies) 108 406.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 264.85 406.23 T
(30) 494.01 406.23 T
(9) 72 388.23 T
(Constants) 90 388.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 132.43 388.23 T
(31) 494.01 388.23 T
(9.1) 79.2 371.23 T
(exp_cond) 108 371.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 149.92 371.23 T
(31) 494.01 371.23 T
(9.2) 79.2 354.23 T
(make_int) 108 354.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 149.92 354.23 T
(32) 494.01 354.23 T
(9.3) 79.2 337.23 T
(TDFSTRING, make_nof_int) 108 337.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.37 337.23 T
(32) 494.01 337.23 T
(9.4) 79.2 320.23 T
(make_floating) 108 320.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 169.91 320.23 T
(32) 494.01 320.23 T
(9.5) 79.2 303.23 T
(make_null_ptr, make_null_local_lv, make_null_proc) 108 303.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 324.82 303.23 T
(33) 494.01 303.23 T
(10) 72 285.23 T
(Tokens and APIs) 90 285.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 162.41 285.23 T
(34) 494.01 285.23 T
(10.1) 79.2 268.23 T
(Application programming interfaces) 108 268.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 257.36 268.23 T
(34) 494.01 268.23 T
(10.2) 79.2 251.23 T
(Linking to APIs) 108 251.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 174.9 251.23 T
( 35) 491.51 251.23 T
(10.2.1) 86.4 238.23 T
(Target independent headers, unique_extern) 126 238.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 302.33 238.23 T
(35) 494.01 238.23 T
(10.3) 79.2 221.23 T
(Language programming interfaces) 108 221.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 247.36 221.23 T
(36) 494.01 221.23 T
(11) 72 203.23 T
(TDF transformations) 90 203.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 174.9 203.23 T
( 37) 491.51 203.23 T
(11.1) 79.2 186.23 T
(Transformations as definitions) 108 186.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 232.37 186.23 T
(37) 494.01 186.23 T
(11.1.1) 86.4 173.23 T
(Examples of transformations) 126 173.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 244.87 173.23 T
(40) 494.01 173.23 T
(11.1.2) 86.4 160.23 T
(Programs with undefined values) 126 160.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 259.86 160.23 T
(40) 494.01 160.23 T
(12) 72 142.23 T
(TDF expansions of offsets) 90 142.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 199.89 142.23 T
(42) 494.01 142.23 T
(13) 72 124.23 T
(Models of the TDF algebra) 90 124.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 202.39 124.23 T
(44) 494.01 124.23 T
(13.1) 79.2 107.23 T
(Model for a 32-bit standard architecture) 108 107.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 272.35 107.23 T
(44) 494.01 107.23 T
(13.1.1) 86.4 94.23 T
(Alignment model) 126 94.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.39 94.23 T
( 44) 491.51 94.23 T
(13.1.2) 86.4 81.23 T
(Offset and pointer model) 126 81.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.37 81.23 T
( 45) 491.51 81.23 T
FMENDPAGE
%%EndPage: "2" 5
%%Page: "3" 5
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(Contents 3) 460.96 36 T
72 72 523.3 769.9 R
7 X
V
0 X
(13.1.3) 86.4 763.23 T
(Size model) 126 763.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 174.9 763.23 T
(45) 494.01 763.23 T
(13.1.4) 86.4 750.23 T
(Offset arithmetic) 126 750.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 194.89 750.23 T
( 45) 491.51 750.23 T
(13.2) 79.2 733.23 T
(Model for machines like the iAPX-432) 108 733.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 267.35 733.23 T
(46) 494.01 733.23 T
(13.2.1) 86.4 720.23 T
(Alignment model) 126 720.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.39 720.23 T
( 46) 491.51 720.23 T
(13.2.2) 86.4 707.23 T
(Offset and pointer model) 126 707.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.37 707.23 T
( 47) 491.51 707.23 T
(13.2.3) 86.4 694.23 T
(Size model) 126 694.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 172.4 694.23 T
( 47) 491.51 694.23 T
(13.2.4) 86.4 681.23 T
(Offset arithmetic) 126 681.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.39 681.23 T
(48) 494.01 681.23 T
(14) 72 663.23 T
(Conclusion) 90 663.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 137.42 663.23 T
( 50) 491.51 663.23 T
FMENDPAGE
%%EndPage: "3" 6
%%Page: "1" 6
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 1) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(1) 72 741.88 T
(Intr) 99 741.88 T
(oduction) 139.87 741.88 T
1 10 Q
0.5 (This memo is intended to be a fairly detailed commentary on the speci\336cation of TDF) 72 665.19 P
0.5 (, a kind of T) 421.88 665.19 P
0.5 (almud to the) 472.32 665.19 P
0.36 (T) 72 653.19 P
0.36 (orah. If it con\337icts with the speci\336cation document, it is wrong. The aim is elucidate the various constructions) 77.41 653.19 P
0.25 (of TDF) 72 641.19 P
0.25 (, giving examples of usages both from the point of view of a producer of TDF and how it is used to con-) 101.15 641.19 P
0.31 (struct programs on particular platforms using various installers or translators. In addition, some attempt is made) 72 629.19 P
-0.17 (to give the reasons why the particular constructions have been chosen. Most of the commentary is a distillation of) 72 617.19 P
(questions and answers raised by people trying to learn TDF from the speci\336cation document.) 72 605.19 T
0.05 (Throughout this document, references like \050S5.14\051 are headings in the TDF speci\336cation, Issue 2.1 \050March 93\051. I) 72 583.19 P
0.08 (use the term \322compiling\323 or \322producing\323 to mean the production of TDF from some source language and \322trans-) 72 571.19 P
(lating\323 to mean making a program for some speci\336c platform from TDF) 72 559.19 T
(.) 359.61 559.19 T
FMENDPAGE
%%EndPage: "1" 7
%%Page: "2" 7
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 2) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(2) 72 741.88 T
(SOR) 99 741.88 T
(T) 147.48 741.88 T
(s and T) 161.27 741.88 T
(OKENs) 236.83 741.88 T
1 10 Q
0.18 (In the syntax of language like C or Pascal, we \336nd various syntactic units like <Expression>, <Identi\336er> etc. A) 72 665.19 P
0.01 (SOR) 72 653.19 P
0.01 (T bears the same relation to TDF as these syntactic units bear to the language; roughly speaking, the syntac-) 90.84 653.19 P
0.11 (tic unit <Expression> corresponds to the SOR) 72 641.19 P
0.11 (T EXP \050S5.14\051 and <Identi\336er> to T) 256.01 641.19 P
0.11 (AG \050S5.30\051. However) 401.79 641.19 P
0.11 (, instead) 489.87 641.19 P
-0.13 (of using BNF to compose syntactic units from others, TDF uses explicit constructors to compose its SOR) 72 629.19 P
-0.13 (T) 490.54 629.19 P
-0.13 (s; each) 495.95 629.19 P
0.68 (constructor uses other pieces of TDF of speci\336ed SOR) 72 617.19 P
0.68 (T) 294.99 617.19 P
0.68 (s to make a piece of its result SOR) 300.4 617.19 P
0.68 (T) 443.45 617.19 P
0.68 (. For example, the) 448.82 617.19 P
(constructor) 72 605.19 T
0 F
(plus) 119.46 605.19 T
1 F
( \050S5.14.71\051 uses an ERROR_TREA) 137.24 605.19 T
(TMENT and two EXPs to make another EXP) 279.39 605.19 T
(.) 460.66 605.19 T
0.26 (At the moment, there are 53 dif) 72 583.19 P
0.26 (ferent SOR) 199.15 583.19 P
0.26 (TS, from ACCESS \050S5.1\051 to V) 244.06 583.19 P
0.26 (ARIETY \050S5.53\051 given in tables 1 and) 367.64 583.19 P
0 (2. Some of these have familiar analogues in standard language construction as with EXP and T) 72 571.19 P
0 (AG above. Others) 450.86 571.19 P
0.67 (will be less familiar since TDF must concern itself with issues not normally addressed in language de\336nitions.) 72 559.19 P
-0.24 (For example, the process of linking together TDF programs is at the root of the architecture neutrality of TDF and) 72 547.19 P
1.04 (so must form an integral part of its de\336nition. On the other hand, TDF is not meant to be a language readily) 72 535.19 P
0.08 (accessible to the human reader or writer; computers handle it much more easily) 72 523.19 P
0.08 (. Thus a great many choices have) 389.86 523.19 P
-0.02 (been made in the de\336nition which would be intolerable in a standard language de\336nition for the human program-) 72 511.19 P
(mer but which, paradoxically enough, make it much simpler for a computer to produce and analyse TDF) 72 499.19 T
-0.1 (The SOR) 72 477.19 P
-0.1 (T) 108.78 477.19 P
-0.1 (s and constructors in ef) 114.19 477.19 P
-0.1 (fect form a multi-sorted algebra. There were two principal reasons for choosing) 206.32 477.19 P
1.66 (this algebraic form of de\336nition. First, it is easy to extend - a new operation on existing constructs simply) 72 465.19 P
-0.03 (requires a new constructor) 72 453.19 P
-0.03 (. Secondly) 177.1 453.19 P
-0.03 (, the algebraic form is highly amenable to the automatic construction of pro-) 218.61 453.19 P
-0.04 (grams. Lar) 72 441.19 P
-0.04 (ge parts of both TDF producers and TDF translators have been created by automatic transformation of) 115.07 441.19 P
0.92 (the text of the speci\336cation document itself, by extracting the algebraic signature and constructing C program) 72 429.19 P
-0.1 (which can read or produce TDF) 72 417.19 P
-0.1 (. T) 198.07 417.19 P
-0.1 (o this extent, one can regard the speci\336cation document as a formal description) 208.38 417.19 P
0.49 (of the free algebra of TDF SOR) 72 405.19 P
0.49 (T) 201.46 405.19 P
0.49 (s and constructors. Of course, most of the interesting parts of the de\336nition of) 206.86 405.19 P
(TDF lies in the equivalences of parts of TDF) 72 393.19 T
(, so this formality only covers the easy bit.) 250.52 393.19 T
0.17 (Another distinction between the TDF de\336nition and language syntactic description is that TDF is to some extent) 72 371.19 P
0.56 (conscious of its own SOR) 72 359.19 P
0.56 (T) 177.47 359.19 P
0.56 (s so that it can specify a new construction of a given SOR) 182.87 359.19 P
0.56 (T) 419.93 359.19 P
0.56 (. The analogy in normal) 425.3 359.19 P
0.5 (languages would be that one could de\336ne a new construction with new syntax and say this is an example of an) 72 347.19 P
0.93 (<Expression>, for example; I don\325) 72 335.19 P
0.93 (t know of any standard language which permits this, although those of you) 213.68 335.19 P
1.42 (with a historical bent might remember Algol-N which made a valiant attempt at it. Of course, the algebraic) 72 323.19 P
-0.06 (method of description makes it much easier to specify) 72 311.19 P
-0.06 (, rather than having to give syntax to provide the syntax for) 286.86 311.19 P
(the new construction in a language.) 72 299.19 T
72 263.84 523.3 273.85 C
72 263.84 523.3 273.85 R
7 X
0 K
V
72 272.84 541.01 272.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 239.84 523.3 249.84 C
72 239.84 523.3 249.84 R
7 X
0 K
V
72 248.84 541.01 248.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.1) 72 254.51 T
(T) 108 254.51 T
(oken applications and \336rst-class SOR) 116.05 254.51 T
(T) 338.69 254.51 T
(s) 346.74 254.51 T
1 10 Q
0.4 (A new construction is introduced by the SOR) 72 223.17 P
0.4 (T T) 256.04 223.17 P
0.4 (OKEN; the constructors involving T) 270.98 223.17 P
0.4 (OKENs allow one to give) 418.42 223.17 P
-0.14 (an expansion for the T) 72 211.17 P
-0.14 (OKEN in terms of other pieces of TDF) 161.18 211.17 P
-0.14 (, possibly including parameters. W) 315.66 211.17 P
-0.14 (e can encapsulate) 453.65 211.17 P
0.33 (a \050possibly parameterised\051 fragment of TDF of a suitable SOR) 72 199.17 P
0.33 (T by giving it a T) 323.93 199.17 P
0.33 (OKEN as identi\336cation. Not all) 395.66 199.17 P
0.91 (of the SOR) 72 187.17 P
0.91 (T) 118.19 187.17 P
0.91 (s are available for this kind of encapsulation - only those which have a SOR) 123.6 187.17 P
0.91 (TNAME constructor) 439.39 187.17 P
0.19 (\050from) 72 175.17 P
0 F
0.19 (access) 97.45 175.17 P
1 F
0.19 (\050S5.29.1\051 to) 126.23 175.17 P
0 F
0.19 (variety) 176.59 175.17 P
1 F
0.19 ( \050S5.29.19\051. These are the \322\336rst-class\323 SOR) 206.56 175.17 P
0.19 (T) 381.71 175.17 P
0.19 (s given in table 1 on page 3. Each) 387.12 175.17 P
(of these have an appropriate) 72 163.17 T
0 F
(_apply_token) 187.18 163.17 T
1 F
( constructor \050e.g.) 244.93 163.17 T
0 F
(exp_apply_token) 315.16 163.17 T
1 F
( \050S5.14.1\051\051 give the expansion.) 387.91 163.17 T
FMENDPAGE
%%EndPage: "2" 8
%%Page: "3" 8
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 3) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.68 (Every T) 72 399.23 P
0.68 (OKEN has a result SOR) 104.97 399.23 P
0.68 (T) 204.24 399.23 P
0.68 (, i.e. the SOR) 209.61 399.23 P
0.68 (T of its resulting expansion and before it can be expanded, one) 264.91 399.23 P
-0.15 (must have its parameter SOR) 72 387.23 P
-0.15 (T) 187.95 387.23 P
-0.15 (s. Thus, you can regard a T) 193.35 387.23 P
-0.15 (OKEN as having a type de\336ned by its result and param-) 301.07 387.23 P
0.43 (eter SOR) 72 375.23 P
0.43 (T) 108.75 375.23 P
0.43 (s and the) 114.16 375.23 P
0 F
0.43 (_apply_token) 153.49 375.23 P
1 F
0.43 ( as the operator which expands the encapsulation and substitutes the parame-) 211.25 375.23 P
(ters.) 72 363.23 T
(However) 72 341.23 T
(, if we look at the signature of) 108.23 341.23 T
0 F
(exp_apply_token) 230.64 341.23 T
1 F
(:) 303.39 341.23 T
3 F
(token_value) 92.93 319.23 T
1 F
(:) 141.22 319.23 T
4 F
(T) 153 319.23 T
(OKEN) 158.93 319.23 T
3 F
(token_ar) 97.18 307.23 T
(gs) 132.34 307.23 T
1 F
(:) 141.22 307.23 T
4 F
(BITSTREAM) 153 307.23 T
3 F
(param_sorts\050token_value\051) 212.98 307.23 T
2 F
(\256) 144 291.23 T
4 F
(EXP) 162 291.23 T
3 F
(x) 184.78 291.23 T
1 F
0.41 (we are confronted by the mysterious BITSTREAM where one might expect to \336nd the actual parameters of the) 72 258.23 P
(T) 72 246.23 T
(OKEN.) 77.93 246.23 T
0.14 (T) 72 224.23 P
0.14 (o explain BITSTREAMs requires a diversion into the bit-encoding of TDF) 77.41 224.23 P
0.14 (. Constructors for a particular SOR) 377.21 224.23 P
0.14 (T) 517.19 224.23 P
1.11 (are represented in a number of bits depending on the number of constructors for that SOR) 72 212.23 P
1.11 (T) 446.95 212.23 P
1.11 (; the context will) 452.5 212.23 P
0.33 (determine the SOR) 72 200.23 P
0.33 (T required, so no more bits are required. Thus since there is only one constructor for UNIT) 148.68 200.23 P
0.33 (s,) 516.91 200.23 P
0 (no bits are required to represent) 72 188.23 P
0 F
0 (make_unit) 201.3 188.23 P
1 F
0 (; there are 85 dif) 246.83 188.23 P
0 (ferent constructors for EXPs so 7 bits are required to) 312.68 188.23 P
0.3 (cover all the EXPs. The parameters of each constructor have known SOR) 72 176.23 P
0.3 (T) 368.4 176.23 P
0.3 (s and so their representations are just) 373.8 176.23 P
0.62 (concatenated after the representation of the constructor) 72 164.23 P
1 8 Q
0.49 (1) 295.5 168.23 P
1 10 Q
0.62 (. While this is a very compact representation, it suf) 299.49 164.23 P
0.62 (fers) 508.31 164.23 P
0.14 (from the defect that one must decode it even just to skip over it. This is very irksome is some applications, nota-) 72 152.23 P
-0.24 (bly the TDF linker which is not interested detailed expansions. Similarly) 72 140.23 P
-0.24 (, in translators there are places where one) 359.58 140.23 P
0 (wishes to skip over a token application without knowledge of the SOR) 72 128.23 P
0 (T) 353.79 128.23 P
0 (s of its parameters. Thus a BITSTREAM) 359.2 128.23 P
0.81 (is just an encoding of some TDF) 72 116.23 P
0.81 (, preceded by the number of bits it occupies. Applications can then skip over) 206.56 116.23 P
72 82 523.3 96.98 C
72 82 523.3 96.98 R
7 X
0 K
V
81 94.96 225 94.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. There are facilities to allow extensions to the number of constructors, so it is not quite as simple as this) 90 76.67 T
0 10 Q
(T) 249.16 741.23 T
(able 1. First class SOR) 254.91 741.23 T
(T) 350.9 741.23 T
(s) 356.64 741.23 T
4 F
(SOR) 100.26 717.23 T
(T) 121.73 717.23 T
(USAGE) 204.55 717.23 T
(SOR) 323.46 717.23 T
(T) 344.93 717.23 T
(USAGE) 427.75 717.23 T
(ACCESS) 84.05 695.23 T
(Properties of T) 156.05 695.23 T
(AGs) 220.85 695.23 T
(AL_T) 307.25 695.23 T
(AG) 330.39 695.23 T
(Name for alignment) 379.25 695.23 T
(ALIGN) 84.05 675.23 T
(MENT) 84.05 663.23 T
(Abstraction of data alignment) 156.05 675.23 T
(BITFIELD_) 307.25 675.23 T
(V) 307.25 663.23 T
1 F
(ARIETY) 312.62 663.23 T
4 F
(Gives no of bits in bit-\336eld) 379.25 675.23 T
(with sign) 379.25 663.23 T
(BOOL) 84.05 643.23 T
5 F
(true) 156.05 643.23 T
4 F
(or) 177.71 643.23 T
5 F
(false) 189.37 643.23 T
4 F
(ERROR_) 307.25 643.23 T
(TREA) 307.25 631.23 T
(TMEN) 333.16 631.23 T
(T) 307.25 619.23 T
(How to handle errors in oper-) 379.25 643.23 T
(ations) 379.25 631.23 T
(EXP) 84.05 599.23 T
(Piece of TDF program,) 156.05 599.23 T
(manipulating values) 156.05 587.23 T
(FLOA) 307.25 599.23 T
(TING_) 332.61 599.23 T
(V) 307.25 587.23 T
(ARIETY) 313.17 587.23 T
(Kind of \337oating point number) 379.25 599.23 T
(LABEL) 84.05 567.23 T
(Mark on EXP to jump to) 156.05 567.23 T
(NA) 307.25 567.23 T
(T) 320.39 567.23 T
(Non-negative static number) 379.25 567.23 T
(of unbounded size) 379.25 555.23 T
(NTEST) 84.05 535.23 T
(T) 156.05 535.23 T
(est in comparisons) 161.04 535.23 T
(ROUNDING_) 307.25 535.23 T
(MODE) 307.25 523.23 T
(How to round \337oating point) 379.25 535.23 T
(operations) 379.25 523.23 T
(SHAPE) 84.05 503.23 T
(Abstraction of size and repre-) 156.05 503.23 T
(sentation of values) 156.05 491.23 T
(SIGNED_) 307.25 503.23 T
(NA) 307.25 491.23 T
(T) 320.39 491.23 T
(Static number of unbounded) 379.25 503.23 T
(size.) 379.25 491.23 T
(T) 84.05 471.23 T
(AG) 89.42 471.23 T
(Name for value in run-time) 156.05 471.23 T
(program) 156.05 459.23 T
(TRANSFER-) 307.25 471.23 T
(MODE) 307.25 459.23 T
(Controls special contents &) 379.25 471.23 T
(assignment operations) 379.25 459.23 T
(T) 84.05 439.23 T
(OKEN) 89.97 439.23 T
(Installation-time function) 156.05 439.23 T
(V) 307.25 439.23 T
(ARIETY) 313.17 439.23 T
(Kind of integer used in run-) 379.25 439.23 T
(time program) 379.25 427.23 T
150.05 732.9 150.05 419.65 2 L
V
0.5 H
0 Z
N
294.05 732.9 294.05 419.65 2 L
V
N
301.25 732.9 301.25 419.65 2 L
V
N
373.25 732.9 373.25 419.65 2 L
V
N
78.05 731.9 517.25 731.9 2 L
V
2 H
N
78.05 707.9 517.25 707.9 2 L
V
N
78.05 687.9 517.25 687.9 2 L
V
0.5 H
N
78.05 655.9 517.25 655.9 2 L
V
N
78.05 611.9 517.25 611.9 2 L
V
N
78.05 579.9 517.25 579.9 2 L
V
N
78.05 547.9 517.25 547.9 2 L
V
N
78.05 515.9 517.25 515.9 2 L
V
N
78.05 483.9 517.25 483.9 2 L
V
N
78.05 451.9 517.25 451.9 2 L
V
N
78.05 419.9 517.25 419.9 2 L
V
N
FMENDPAGE
%%EndPage: "3" 9
%%Page: "4" 9
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 4) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.49 (BITSTREAMs trivially) 72 763.23 P
0.49 (. Similar considerations apply to BYTESTREAMs used elsewhere; here the encoding is) 166.51 763.23 P
(preceded by the number of bytes in the encoding and is aligned to a byte boundary to allow fast copying.) 72 751.23 T
72 715.89 523.3 725.9 C
72 715.89 523.3 725.9 R
7 X
0 K
V
72 724.89 541.01 724.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 691.88 523.3 701.89 C
72 691.88 523.3 701.89 R
7 X
0 K
V
72 700.88 541.01 700.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.2) 72 706.56 T
(T) 108 706.56 T
(oken de\336nitions) 116.05 706.56 T
1 10 Q
0.06 (Thus the) 72 675.22 P
3 F
0.06 (token_ar) 109.32 675.22 P
0.06 (gs) 144.48 675.22 P
1 F
0.06 ( parameter of) 153.37 675.22 P
0 F
0.06 (exp_apply_token) 209.33 675.22 P
1 F
0.06 ( is just the BITSTREAM formed from the actual parameters) 282.08 675.22 P
0.04 (in the sequence described by the de\336nition of the) 72 663.22 P
3 F
0.04 (token_valu) 270.83 663.22 P
6 F
0.04 (e) 314.69 663.22 P
1 F
0.04 ( parameter) 319.13 663.22 P
0.04 (. This will be given in a T) 361.07 663.22 P
0.04 (OKEN_DEFN) 464.45 663.22 P
(somewhere with constructor) 72 651.22 T
0 F
(token_de\336nition) 187.75 651.22 T
1 F
(\050S5.46.1\051:) 259.67 651.22 T
3 F
(r) 98.28 629.22 T
(esult_sort) 101.79 629.22 T
1 F
(:) 141.22 629.22 T
4 F
(SOR) 153 629.22 T
(TNAME) 174.48 629.22 T
3 F
(tok_params) 94.03 617.22 T
1 F
(:) 141.22 617.22 T
4 F
(LIST\050T) 153 617.22 T
(OKFORMALS\051) 183.36 617.22 T
3 F
(body) 121.79 605.22 T
1 F
(:) 141.22 605.22 T
3 F
(r) 153 605.22 T
(esult_sort) 156.52 605.22 T
2 F
(\256) 144 589.22 T
4 F
(T) 162 589.22 T
(OKEN_DEFN) 167.93 589.22 T
1 F
0.87 (The) 72 571.22 P
3 F
0.87 (r) 90.91 571.22 P
0.87 (esult_sort) 94.43 571.22 P
1 F
0.87 ( is the SOR) 133.86 571.22 P
0.87 (T of the construction of) 181.68 571.22 P
3 F
0.87 (body) 282.92 571.22 P
1 F
0.87 (; e.g. if) 302.35 571.22 P
3 F
0.87 (r) 335.77 571.22 P
0.87 (esult_sort) 339.29 571.22 P
1 F
0.87 ( is formed from) 378.72 571.22 P
0 F
0.87 (exp) 447.15 571.22 P
1 F
0.87 (\050S5.29.7\051 then) 465.52 571.22 P
3 F
0.34 (body) 72 559.22 P
1 F
0.34 ( would be constructed using the EXP constructors and one would use) 91.43 559.22 P
0 F
0.34 (exp_apply_token) 374.79 559.22 P
1 F
0.34 ( to give the expan-) 447.54 559.22 P
0.34 (sion. The list) 72 547.22 P
3 F
0.34 (tok_params) 127.44 547.22 P
1 F
0.34 ( gives the formal parameters of the de\336nition in terms of T) 174.63 547.22 P
0.34 (OKFORMALS constructed) 412.75 547.22 P
(using) 72 535.22 T
0 F
(make_tok_formals) 96.16 535.22 T
1 F
(\050S5.47.1\051:) 176.1 535.22 T
3 F
(sn) 132.34 513.22 T
1 F
(:) 141.22 513.22 T
4 F
(SOR) 153 513.22 T
(TNAME) 174.48 513.22 T
3 F
(tk) 134.01 501.22 T
1 F
(:) 141.22 501.22 T
4 F
(TDFINT) 153 501.22 T
2 F
(\256) 144 485.22 T
4 F
(T) 162 485.22 T
(OKFORMALS) 167.93 485.22 T
1 F
0.48 (The TDFINT) 72 467.22 P
3 F
0.48 (tk) 129.04 467.22 P
1 F
0.48 ( will be the integer representation of the formal parameter expressed as a T) 136.25 467.22 P
0.48 (OKEN whose result) 441.83 467.22 P
0.18 (sort is) 72 455.22 P
3 F
0.18 (sn) 99.02 455.22 P
1 F
0.18 ( \050see more about name representation in section 2.1 on page 7\051. T) 107.9 455.22 P
0.18 (o use the parameter in the body of the) 370.85 455.22 P
1.09 (T) 72 443.22 P
1.09 (OKEN_DEFN, one simply uses the) 77.93 443.22 P
0 F
1.09 (_apply_token) 228.3 443.22 P
1 F
1.09 ( appropriate to) 286.06 443.22 P
3 F
1.09 (sn) 350.12 443.22 P
1 F
1.09 (.Note that sn may be a T) 359.01 443.22 P
1.09 (OKEN but the) 463.37 443.22 P
3 F
(r) 72 431.22 T
(esult_sort) 75.52 431.22 T
1 F
( may not.) 114.95 431.22 T
-0.1 (Hence the BITSTREAM) 72 409.22 P
3 F
-0.1 (param_sorts) 173.58 409.22 P
1 F
-0.1 (\050) 224.11 409.22 P
3 F
-0.1 (token_value) 227.44 409.22 P
1 F
-0.1 (\051 in the actual parameter of) 275.73 409.22 P
0 F
-0.1 (exp_apply_token) 385.6 409.22 P
1 F
-0.1 ( above is simply) 458.35 409.22 P
0.94 (formed by the catenation of constructions of the SOR) 72 397.22 P
0.94 (T) 292.66 397.22 P
0.94 (s given by the SOR) 298.07 397.22 P
0.94 (TNAMEs in the) 378.96 397.22 P
3 F
0.94 (tok_params) 448.69 397.22 P
1 F
0.94 ( of the) 495.88 397.22 P
(T) 72 385.22 T
(OKEN being expanded.) 77.93 385.22 T
(Usually one gives a name to a T) 72 363.22 T
(OKEN_DEFN using to form a T) 200.34 363.22 T
(OKDEF using) 330.91 363.22 T
0 F
(make_tokdef) 390.87 363.22 T
1 F
( \050S5.43.1\051:) 446.39 363.22 T
3 F
(tok) 129.01 341.22 T
1 F
(:) 141.22 341.22 T
4 F
(TDFINT) 153 341.22 T
3 F
(def) 129.01 329.22 T
1 F
(:) 141.22 329.22 T
4 F
(BITSTREAM T) 153 329.22 T
(OKEN_DEFN) 218.9 329.22 T
2 F
(\256) 144 313.22 T
4 F
(T) 162 313.22 T
(OKDEF) 167.93 313.22 T
1 F
0.39 (Here,) 72 295.22 P
3 F
0.39 (tok) 96.81 295.22 P
1 F
0.39 ( gives the name that will be used to identify the T) 109.02 295.22 P
0.39 (OKEN whose expansion is given by) 311.05 295.22 P
3 F
0.39 (def) 461.06 295.22 P
1 F
0.39 (. Any use of) 473.27 295.22 P
2.11 (this T) 72 283.22 P
2.11 (OKEN \050e.g. in) 96.98 283.22 P
0 F
2.11 (exp_apply_token) 164.09 283.22 P
1 F
2.11 (\051 will be given by) 236.84 283.22 P
0 F
2.11 (make_token) 320.4 283.22 P
1 F
2.11 (\050) 372.59 283.22 P
3 F
2.11 (tok) 375.92 283.22 P
1 F
2.11 (\051 \050S5.45.2\051. Once again, a BIT-) 388.13 283.22 P
(STREAM is used to encapsulate the T) 72 271.22 T
(OKEN_DEFN.) 225.06 271.22 T
0.68 (One can also use a T) 72 249.22 P
0.68 (OKEN_DEFN in an anonymous fashion by giving it as an actual parameter of a T) 158.18 249.22 P
0.68 (OKEN) 495.54 249.22 P
(which itself demands a T) 72 237.22 T
(OKEN parameter) 172.3 237.22 T
(. T) 241.97 237.22 T
(o do this one simply uses) 252.37 237.22 T
0 F
(use_tokdef) 355.65 237.22 T
1 F
( \050S5.45.3\051:) 401.74 237.22 T
3 F
(tdef) 126.23 215.22 T
1 F
(:) 141.22 215.22 T
4 F
(BITSTREAM T) 153 215.22 T
(OKEN_DEFN) 218.9 215.22 T
2 F
(\256) 144 199.22 T
4 F
(T) 162 199.22 T
(OKEN) 167.93 199.22 T
72 163.88 523.3 173.89 C
72 163.88 523.3 173.89 R
7 X
0 K
V
72 172.88 541.01 172.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 139.87 523.3 149.88 C
72 139.87 523.3 149.88 R
7 X
0 K
V
72 148.87 541.01 148.87 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.3) 72 154.54 T
(A simple use of a T) 108 154.54 T
(OKEN) 221.63 154.54 T
1 10 Q
-0.14 (The crucial use of T) 72 101.2 P
-0.14 (OKENs in TDF is to provide abstractions of APIs \050see section 9 on page 34\051 but they are also) 151.73 101.2 P
0.89 (used as shorthand for commonly occurring constructions. For example, given the TDF constructor) 72 89.2 P
0 F
0.89 (plus) 479.09 89.2 P
1 F
0.89 (, men-) 496.87 89.2 P
FMENDPAGE
%%EndPage: "4" 10
%%Page: "5" 10
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 5) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
0 X
1.46 (tioned above, we could de\336ne a plus with only two EXP parameters more suitable to C by using the) 72 763.23 P
0 F
1.46 (wrap) 501.09 763.23 P
1 F
(\050S5.13.4\051 constructor as the ERROR_TREA) 72 751.23 T
(TMENT) 248 751.23 T
(:) 281.92 751.23 T
0 F
(make_tokdef) 108 729.23 T
4 F
( \050C_plus,) 163.52 729.23 T
0 F
(token_de\336nition) 126 714.23 T
4 F
(\050) 195.42 714.23 T
0 F
(exp) 144 699.23 T
4 F
(\050\051,) 158.99 699.23 T
(\050) 144 684.23 T
0 F
(make_tokformals) 147.33 684.23 T
4 F
(\050) 222.28 684.23 T
0 F
(exp) 225.6 684.23 T
4 F
(\050\051, l\051,) 240.6 684.23 T
0 F
(make_tokformals) 263.91 684.23 T
4 F
(\050) 338.86 684.23 T
0 F
(exp) 342.19 684.23 T
4 F
(\050\051, r\051\051,) 357.18 684.23 T
0 F
(plus) 144 669.23 T
4 F
(\050) 161.78 669.23 T
0 F
(wrap) 165.11 669.23 T
4 F
(\050\051,) 187.32 669.23 T
0 F
(exp_apply_token) 199.53 669.23 T
4 F
(\050l, \050\051\051,) 272.28 669.23 T
0 F
(exp_apply_token) 298.92 669.23 T
4 F
(\050r) 371.67 669.23 T
(,\050\051\051) 377.78 669.23 T
(\051) 126 654.23 T
(\051) 108 639.23 T
72 603.89 523.3 613.9 C
72 603.89 523.3 613.9 R
7 X
0 K
V
72 612.89 541.01 612.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 579.88 523.3 589.89 C
72 579.88 523.3 589.89 R
7 X
0 K
V
72 588.88 541.01 588.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.4) 72 594.56 T
(Second class SOR) 108 594.56 T
(T) 214.02 594.56 T
(s) 222.07 594.56 T
1 10 Q
0.22 (Second class SOR) 72 563.22 P
0.22 (T) 145.13 563.22 P
0.22 (s \050given in table 2 on page 6\051 cannot be T) 150.54 563.22 P
0.22 (OKENised. These are the \322syntactic units\323 of TDF) 318.57 563.22 P
(which the user cannot extend; he can only produce them using the constructors de\336ned in core-TDF) 72 551.22 T
(.) 470.63 551.22 T
-0.05 (Some of these constructors are implicit. For example, there are no explicit constructors for LIST or SLIST which) 72 529.22 P
-0.06 (are both used to form lists of SOR) 72 517.22 P
-0.06 (T) 207.87 517.22 P
-0.06 (s; their construction is simply part of the encoding of TDF) 213.27 517.22 P
-0.06 (. However) 445.1 517.22 P
-0.06 (, it is for-) 486.27 517.22 P
0.79 (seen that LIST constructors would be highly desireable and there will probably extensions to TDF to promote) 72 505.22 P
0.47 (LIST from a second-class SOR) 72 493.22 P
0.47 (T to a \336rst-class one. This will not apply to SLIST or to the other SOR) 198.17 493.22 P
0.47 (T) 486.61 493.22 P
0.47 (s which) 492.02 493.22 P
1.62 (have implicit constructions. These include BITSTREAM, BYTESTREAM, TDFINT) 72 481.22 P
1.62 (, TDFIDENT and TDF-) 422.95 481.22 P
(STRING.) 72 469.22 T
0 F
(T) 220.17 413.22 T
(able 2. Sorts without SOR) 225.91 413.22 T
(TNAMEs) 336.34 413.22 T
4 F
(SOR) 94.21 389.22 T
(T) 115.69 389.22 T
(USAGE) 198.51 389.22 T
(SOR) 317.41 389.22 T
(T) 338.89 389.22 T
(USAGE) 421.7 389.22 T
(AL_T) 78 367.22 T
(AGDEF) 101.15 367.22 T
(Alignment name de\336nition) 150 367.22 T
(AL_T) 301.2 367.22 T
(AG-) 324.35 367.22 T
(DEF_) 301.2 355.22 T
(PROPS) 301.2 343.22 T
(Body of UNIT containing AL_) 373.2 367.22 T
(T) 373.2 355.22 T
(AGDEFs) 378.57 355.22 T
(BITSTREAM) 78 323.22 T
(Encapsulation of a bit encod-) 150 323.22 T
(ing) 150 311.22 T
(BYTE) 301.2 323.22 T
(STREAM) 301.2 311.22 T
(Encapsulation of a byte) 373.2 323.22 T
(encoding) 373.2 311.22 T
(CAPSULE) 78 291.22 T
(Independent piece of TDF) 150 291.22 T
(program) 150 279.22 T
(CAPSULE_) 301.2 291.22 T
(LINK) 301.2 279.22 T
(No and kind of linkable enti-) 373.2 291.22 T
(ties in CAPSULE) 373.2 279.22 T
(CASELIM) 78 259.22 T
(Bounds in) 150 259.22 T
0 F
(case) 197.22 259.22 T
4 F
( constructor) 214.98 259.22 T
(EXTERNAL) 301.2 259.22 T
(External name used to con-) 373.2 259.22 T
(nect CASULE name.) 373.2 247.22 T
(EXTERN_) 78 227.22 T
(LINK) 78 215.22 T
(List of LINKEXTERNs in) 150 227.22 T
(CAPSULE) 150 215.22 T
(GROUP) 301.2 227.22 T
(List of UNIT) 373.2 227.22 T
(s with same iden-) 424.85 227.22 T
(ti\336cation.) 373.2 215.22 T
(LINK) 78 195.22 T
(Connects names in CAP-) 150 195.22 T
(SULE) 150 183.22 T
(LINK) 301.2 195.22 T
(EXTERN) 301.2 183.22 T
(Used to connect CAPSULE) 373.2 195.22 T
(names to outside world) 373.2 183.22 T
(LINKS) 78 163.22 T
(List of LINKs) 150 163.22 T
(LIST\050AUX\051) 301.2 163.22 T
(List of AUX SOR) 373.2 163.22 T
(T) 447.45 163.22 T
(s; will have) 452.45 163.22 T
(SOR) 373.2 151.22 T
(TNAME later) 394.68 151.22 T
(PROPS) 78 131.22 T
(Program info in a UNIT) 150 131.22 T
(SLIST\050AUX\051) 301.2 131.22 T
(List of AUX SOR) 373.2 131.22 T
(T) 447.45 131.22 T
(s; will not) 452.45 131.22 T
(have SOR) 373.2 119.22 T
(TNAME later) 419.12 119.22 T
(SOR) 78 99.22 T
(TNAME) 99.48 99.22 T
(SOR) 150 99.22 T
(T which can be parame-) 171.48 99.22 T
(ter of T) 150 87.22 T
(OKEN) 181.48 87.22 T
(T) 301.2 99.22 T
(AGDEC) 306.57 99.22 T
(Declaration of T) 373.2 99.22 T
(AG at UNIT) 443 99.22 T
(level) 373.2 87.22 T
72 403.63 72 80.14 2 L
V
0.5 H
0 Z
N
144 404.13 144 79.64 2 L
V
N
288 404.13 288 79.64 2 L
V
N
295.2 404.13 295.2 79.64 2 L
V
N
367.2 404.13 367.2 79.64 2 L
V
N
511.2 403.63 511.2 80.14 2 L
V
N
71.75 403.88 511.45 403.88 2 L
V
N
72.25 381.13 510.95 381.13 2 L
V
N
72.25 378.63 510.95 378.63 2 L
V
N
71.75 335.88 511.45 335.88 2 L
V
N
71.75 303.88 511.45 303.88 2 L
V
N
71.75 271.88 511.45 271.88 2 L
V
N
71.75 239.88 511.45 239.88 2 L
V
N
71.75 207.89 511.45 207.89 2 L
V
N
71.75 175.89 511.45 175.89 2 L
V
N
71.75 143.89 511.45 143.89 2 L
V
N
71.75 111.89 511.45 111.89 2 L
V
N
71.75 79.89 511.45 79.89 2 L
V
N
FMENDPAGE
%%EndPage: "5" 11
%%Page: "6" 11
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 6) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
4 F
0 X
(T) 78 717.23 T
(AGDEC_) 83.37 717.23 T
(PROPS) 78 705.23 T
(Body of UNIT containing) 150 717.23 T
(T) 150 705.23 T
(AGDECs) 155.37 705.23 T
(T) 301.2 717.23 T
(AGDEF) 306.57 717.23 T
(De\336nition of T) 373.2 717.23 T
(AG at UNIT) 434.12 717.23 T
(level) 373.2 705.23 T
(T) 78 685.23 T
(AGDEF_) 83.37 685.23 T
(PROPS) 78 673.23 T
(Body of UNIT containing) 150 685.23 T
(T) 150 673.23 T
(AGDEFs) 155.37 673.23 T
(T) 301.2 685.23 T
(AGSHACC) 306.57 685.23 T
(A formal parameter) 373.2 685.23 T
(TDFBOOL) 78 653.23 T
(TDF encoding for a boolean) 150 653.23 T
(TDFIDENT) 301.2 653.23 T
(TDF encoding of a byte string) 373.2 653.23 T
(TDFINT) 78 633.23 T
(TDF encoding of an integer) 150 633.23 T
(TDFSTRING) 301.2 633.23 T
(TDF encoding of n-bit byte) 373.2 633.23 T
(string) 373.2 621.23 T
(T) 78 601.23 T
(OKDEC) 83.93 601.23 T
(Declaration of a T) 150 601.23 T
(OKEN) 228.7 601.23 T
(T) 301.2 601.23 T
(OKDEC_) 307.13 601.23 T
(PROPS) 301.2 589.23 T
(Body of UNIT containing) 373.2 601.23 T
(T) 373.2 589.23 T
(OKDECs) 379.13 589.23 T
(T) 78 569.23 T
(OKDEF) 83.93 569.23 T
(De\336nition of a T) 150 569.23 T
(OKEN) 219.81 569.23 T
(T) 301.2 569.23 T
(OKDEF_) 307.13 569.23 T
(PROPS) 301.2 557.23 T
(Body of UNIT containing) 373.2 569.23 T
(T) 373.2 557.23 T
(OKDEFs) 379.13 557.23 T
(T) 78 537.23 T
(OKEN_) 83.93 537.23 T
(DEFN) 78 525.23 T
(De\336nes T) 150 537.23 T
(OKEN expansion) 192.59 537.23 T
(T) 301.2 537.23 T
(OKFORMA) 307.13 537.23 T
(LS) 301.2 525.23 T
(Sort and name for parame-) 373.2 537.23 T
(ters in T) 373.2 525.23 T
(OKEN_DEFN) 409.12 525.23 T
(UNIQUE) 78 505.23 T
(W) 150 505.23 T
(orld-wide name) 159.26 505.23 T
(UNIT) 301.2 505.23 T
-0.88 (Component of CAPSULE with) 373.2 505.23 P
(LINKs to other UNIT) 373.2 493.23 T
(s) 462.07 493.23 T
(VERSION) 78 473.23 T
(V) 150 473.23 T
(ersion no of TDF) 156.12 473.23 T
(VERSION_) 301.2 473.23 T
(PROPS) 301.2 461.23 T
(Body of UNIT containing ver-) 373.2 473.23 T
(sion information) 373.2 461.23 T
0 F
(T) 220.17 763.23 T
(able 2. Sorts without SOR) 225.91 763.23 T
(TNAMEs) 336.34 763.23 T
4 F
(SOR) 94.21 739.23 T
(T) 115.69 739.23 T
(USAGE) 198.51 739.23 T
(SOR) 317.41 739.23 T
(T) 338.89 739.23 T
(USAGE) 421.7 739.23 T
72 753.65 72 454.15 2 L
V
0.5 H
0 Z
N
144 754.15 144 453.65 2 L
V
N
288 754.15 288 453.65 2 L
V
N
295.2 754.15 295.2 453.65 2 L
V
N
367.2 754.15 367.2 453.65 2 L
V
N
511.2 753.65 511.2 454.15 2 L
V
N
71.75 753.9 511.45 753.9 2 L
V
N
72.25 731.15 510.95 731.15 2 L
V
N
72.25 728.65 510.95 728.65 2 L
V
N
71.75 697.9 511.45 697.9 2 L
V
N
71.75 665.9 511.45 665.9 2 L
V
N
71.75 645.9 511.45 645.9 2 L
V
N
71.75 613.9 511.45 613.9 2 L
V
N
71.75 581.9 511.45 581.9 2 L
V
N
71.75 549.9 511.45 549.9 2 L
V
N
71.75 517.9 511.45 517.9 2 L
V
N
71.75 485.9 511.45 485.9 2 L
V
N
71.75 453.9 511.45 453.9 2 L
V
N
FMENDPAGE
%%EndPage: "6" 12
%%Page: "7" 12
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 7) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(3) 72 741.88 T
(CAPSULEs and UNIT) 99 741.88 T
(s) 328.7 741.88 T
1 10 Q
0.64 (A CAPSULE\050S5.10\051 is typically the result of a single compilation - one could regard it as being the TDF ana-) 72 665.19 P
-0.05 (logue of a Unix .o \336le. Just as with .o \336les, a set of CAPSULEs can be linked together to form another) 72 653.19 P
-0.05 (. Similarly) 479.29 653.19 P
-0.05 (,) 520.8 653.19 P
0.14 (a CAPSULE may be translated to make program for some platform, provided certain conditions are met. One of) 72 641.19 P
-0.22 (these conditions is obviously that a translator exists for the platform, but there are others. They basically state that) 72 629.19 P
0.09 (any names that are unde\336ned in the CAPSULE can be supplied by the system in which it is to be run. For exam-) 72 617.19 P
0.26 (ple, the translator could produce assembly code with external identi\336ers which will be supplied by some system) 72 605.19 P
(library) 72 593.19 T
(.) 98 593.19 T
72 557.84 523.3 567.85 C
72 557.84 523.3 567.85 R
7 X
0 K
V
72 566.84 541.01 566.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 533.84 523.3 543.84 C
72 533.84 523.3 543.84 R
7 X
0 K
V
72 542.84 541.01 542.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.1) 72 548.51 T
(make_capsule and name-spaces) 108 548.51 T
1 10 Q
0.33 (The only constructor for a CAPSULE is) 72 517.17 P
0 F
0.33 (make_capsule) 237.29 517.17 P
1 F
0.33 (. Its basic function is to compose together UNIT) 297.25 517.17 P
0.33 (s which) 492.15 517.17 P
0.73 (contain the declarations and de\336nitions of the program. The signature of) 72 505.17 P
0 F
0.73 (make_capsule) 371.48 505.17 P
1 F
0.73 ( \050S5.10.1\051 looks rather) 431.45 505.17 P
(daunting and is probable best represented graphically) 72 493.17 T
(.) 284.52 493.17 T
(The diagram gives an example of a CAPSULE using the same components as in the following text.) 72 103.17 T
72 72 523.3 769.9 C
83.21 121.84 512.08 489.84 C
83.21 121.84 512.08 489.84 R
7 X
0 K
V
95.14 124.41 508 485.12 R
V
0.5 H
2 Z
0 X
N
220.85 426.55 405.14 477.98 C
220.85 426.55 405.14 477.98 R
7 X
0 K
V
1 10 Q
0 X
(\322tagdecs\323) 223.71 457.98 T
(\322tagdefs\323) 223.71 447.98 T
224.42 438.69 266.57 470.12 R
0.5 H
2 Z
N
({Kinds of UNIT) 278.71 451.55 T
(s in) 343.87 451.55 T
3 F
(gr) 360.54 451.55 T
(oups) 369.05 451.55 T
1 F
(}) 387.93 451.55 T
83.21 121.84 512.08 489.84 C
211.73 448.97 221.56 455.84 216.86 444.8 214.29 446.88 4 Y
0 X
0 K
V
152.99 370.84 214.3 446.88 2 L
0.5 H
2 Z
N
3 10 Q
(pr) 144.42 419.41 T
(op_names) 152.94 419.41 T
255.14 359.41 460.85 413.69 C
255.14 359.41 460.85 413.69 R
7 X
0 K
V
257.28 366.55 318 407.26 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(\050\322tag\323, 5\051) 260.14 396.55 T
(\050\322) 260.14 386.55 T
(token\323, 6\051) 270.14 385.12 T
(\050\322al_tag\323, 7\051) 262.28 372.98 T
({No of each kind of name in) 323 386.55 T
(CAPSULE namespace}) 355.14 372.98 T
83.21 121.84 512.08 489.84 C
240.28 388.62 252.28 388.69 242.14 382.27 241.21 385.44 4 Y
0 X
0 K
V
152.28 360.12 241.21 385.44 2 L
0.5 H
2 Z
N
3 10 Q
(capsule_linking) 169.42 367.26 T
258 280.83 503.71 340.12 C
258 280.83 503.71 340.12 R
7 X
0 K
V
262.28 287.26 357.28 335.12 R
V
0.5 H
2 Z
0 X
N
3 10 Q
(tag LINKEXTERNs) 264.42 325.83 T
(token LINKEXTERNs) 264.42 309.41 T
(al_tag LINKEXTERNs) 265.14 292.26 T
1 F
({Links of each kind of name) 364.42 321.55 T
(in CAPSULE namespace to) 375.14 309.41 T
(externals}) 381.57 297.26 T
83.21 121.84 512.08 489.84 C
243.88 324.86 253.71 317.98 241.72 318.61 242.8 321.74 4 Y
0 X
0 K
V
151.57 352.98 242.8 321.73 2 L
0.5 H
2 Z
N
3 10 Q
(external_linkage) 158.71 331.55 T
182.28 202.98 455.14 250.83 C
182.28 202.98 455.14 250.83 R
7 X
0 K
V
182.99 210.12 245.85 245.83 R
V
0.5 H
2 Z
0 X
N
3 10 Q
(tagdecs UNIT) 185.85 235.83 T
(s) 240.73 235.83 T
(tagdefs UNIT) 185.14 217.26 T
(s) 238.36 217.26 T
1 F
({UNIT) 257.28 233.69 T
(s of same kind grouped together in) 285.25 233.69 T
(order given by) 273.71 222.26 T
3 F
(pr) 334.5 222.26 T
(op_names) 343.01 222.26 T
1 F
(}) 383.54 222.26 T
83.21 121.84 512.08 489.84 C
206.21 260.04 210.13 248.7 200.79 256.24 203.5 258.14 4 Y
0 X
0 K
V
142.99 345.12 203.5 258.13 2 L
0.5 H
2 Z
N
3 10 Q
(gr) 168.71 277.26 T
(oups) 177.23 277.26 T
181.57 133.69 405.85 162.98 C
181.57 133.69 405.85 162.98 R
7 X
0 K
V
0 10 Q
0 X
(AN EXAMPLE OF A CAPSULE) 200.85 142.98 T
83.21 121.84 512.08 489.84 C
99.85 342.84 164.13 372.84 C
99.85 342.84 164.13 372.84 R
7 X
0 K
V
90 450 30 12.5 131.99 358.19 G
0.5 H
2 Z
0 X
90 450 30 12.5 131.99 358.19 A
1 10 Q
(CAPSULE) 105.56 354.26 T
83.21 121.84 512.08 489.84 C
72 72 523.3 769.9 C
0 0 595.3 841.9 C
FMENDPAGE
%%EndPage: "7" 13
%%Page: "8" 13
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 8) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
0 X
1.03 (Each CAPSULE has its own name-space, distinct from all other CAPSULEs\325 name-spaces and also from the) 72 763.23 P
0.03 (name-spaces of its component UNIT) 72 751.23 P
0.03 (s \050see section 2.1.2 on page 8\051. There are several dif) 218.54 751.23 P
0.03 (ferent kinds of names in) 426.57 751.23 P
-0.08 (TDF and each name-space is further subdivided into one for each kind of name. The number of dif) 72 739.23 P
-0.08 (ferent kinds of) 465.17 739.23 P
0.58 (names is potentially unlimited but only three are used in core-TDF) 72 727.23 P
0.58 (, namely \322tag\323, \322token\323 and \322al_tag\323. Those) 343.54 727.23 P
0.34 (names in a \322tag\323 name-space generally correspond to identi\336ers in normal programs and I shall use these as the) 72 715.23 P
(paradigm for the properties of them all.) 72 703.23 T
1 (The actual representations of a \322tag\323 name in a given name-space is an integer) 72 681.23 P
1 (, described as SOR) 397.94 681.23 P
1 (T TDFINT) 476.4 681.23 P
1 (.) 520.8 681.23 P
0.33 (These integers are drawn from a contiguous set starting from 0 up to some limit given by the constructor which) 72 669.23 P
2.03 (introduces the name-space. For CAPSULE name-spaces, this is given by the) 72 657.23 P
3 F
2.03 (capsule_linking) 402.67 657.23 P
1 F
2.03 ( parameter of) 465.97 657.23 P
0 F
(make_capsule) 72 645.23 T
1 F
(:) 131.97 645.23 T
7 F
(capsule_linking) 108 623.23 T
4 F
(: SLIST\050CAPSULE_LINK\051) 176.32 623.23 T
1 F
0.03 (In the most general case in core-TDF) 72 608.23 P
0.03 (, there would be three entries in the list introducing limits using) 220.12 608.23 P
0 F
0.03 (make_cap-) 476.66 608.23 P
(sule_link) 72 596.23 T
1 F
( \050S5.1) 110.33 596.23 T
(1.1\051 for each of the \322tag\323, \322token\323 and \322al_tag\323 name-spaces for the CAPSULE. Thus if:) 133.84 596.23 T
7 F
(capsule_linking) 108 574.23 T
4 F
( = \050) 176.32 574.23 T
0 F
(make_capsule_link) 191.04 574.23 T
4 F
(\050\322tag\323, 5\051,) 272.68 574.23 T
0 F
(make_capsule_link) 195.34 559.23 T
4 F
(\050\322token\323, 6\051,) 276.98 559.23 T
0 F
(make_capsule_link) 195.34 544.23 T
4 F
(\050\322al_tag\323, 7\051\051) 276.98 544.23 T
1 F
0.91 (there are 5 CAPSULE \322tag\323 names used within the CAPSULE, namely 0, 1, 2, 3 and 4; similarly there are 6) 72 529.23 P
(\322token\323 names and 7 \322al_tag\323 names.) 72 517.23 T
0 F
(3.1.1) 72 491.23 T
(External linkages) 108 491.23 T
1 F
-0.15 (The context of usage will always determine when and how an integer is to be interpreted as a name in a particular) 72 474.23 P
0.5 (name-space. For example, a T) 72 462.23 P
0.5 (AG in a UNIT is constructed by) 193.65 462.23 P
0 F
0.5 (make_tag) 327.88 462.23 P
1 F
0.5 ( \050S5.30.2\051applied to a TDFINT which) 369.52 462.23 P
0.54 (will be interpreted as a name from that UNIT\325) 72 450.23 P
0.54 (s \322tag\323 name-space. An integer representing a name in the CAP-) 260.06 450.23 P
(SULE name-space would be found in a LINKEXTERN of the) 72 438.23 T
3 F
(external_linkage) 322.92 438.23 T
1 F
( parameter of) 390.1 438.23 T
0 F
(make_capsule) 445.87 438.23 T
1 F
(.) 505.84 438.23 T
7 F
(external_linkage:) 108 416.23 T
4 F
(SLIST\050EXTERN_LINK\051) 186.33 416.23 T
1 F
0.38 (Each EXTERN_LINK \050S5.16\051 is itself formed from an SLIST of LINKEXTERNs given by) 72 401.23 P
0 F
0.38 (make_extern_link) 446.12 401.23 P
1 F
0.4 (\050S5.16.1\051. The order of the EXTERN_LINKs determines which name-space one is dealing with; they are in the) 72 389.23 P
1.25 (same order as given by the) 72 377.23 P
3 F
1.25 (capsule_linkage) 188.89 377.23 P
1 F
1.25 ( parameter) 253.84 377.23 P
1.25 (. Thus, with the) 297.01 377.23 P
3 F
1.25 (capsule_linkage) 366.99 377.23 P
1 F
1.25 ( given above, the \336rst) 431.94 377.23 P
0.61 (EXTERN_LINK would deal with the \322tag\323 name-space; Each of its component  LINKEXTERNs \050S5.21\051 con-) 72 365.23 P
0.03 (structed by) 72 353.23 P
0 F
0.03 (make_linkextern) 118.69 353.23 P
1 F
0.03 ( would be identifying a tag number with some name external to the CAPSULE; for) 190.87 353.23 P
(example one might be:) 72 341.23 T
0 F
(make_linkextern) 108 319.23 T
4 F
( \0504,) 180.18 319.23 T
0 F
(string_extern) 197.4 319.23 T
4 F
(\050\322printf\323\051\051) 254.58 319.23 T
1 F
0.86 (This would mean: identify the CAPSULE\325) 72 304.23 P
0.86 (s \322tag\323 4 with an name called \322printf\323, external to the module. The) 246.49 304.23 P
0.9 (name \322printf\323 would be used to linkage external to the CAPSULE; any name required outside the CAPSULE) 72 292.23 P
(would have to be linked like this.) 72 280.23 T
0 F
(3.1.2) 72 232.23 T
(UNIT) 108 232.23 T
(s) 132.07 232.23 T
1 F
-0.23 (This name \322printf\323, of course, does not necessarily mean the C procedure in the system library) 72 215.23 P
-0.23 (. This depends both) 445.69 215.23 P
0.01 (on the system context in which the CAPSULE is translated and also the meaning of the CAPSULE \322tag\323 name 4) 72 203.23 P
(given by the component UNIT) 72 191.23 T
(s of the CAPSULE in the) 193.99 191.23 T
3 F
(gr) 297.83 191.23 T
(oups) 306.34 191.23 T
1 F
( parameter of) 325.22 191.23 T
0 F
(make_capsule) 381 191.23 T
1 F
(:) 440.97 191.23 T
7 F
(groups:) 108 169.23 T
4 F
(SLIST\050GROUP\051) 144.11 169.23 T
1 F
0.15 (Each GROUP \050S5.18\051 in the) 72 154.23 P
3 F
0.15 (gr) 188.77 154.23 P
0.15 (oups) 197.29 154.23 P
1 F
0.15 ( SLIST will be formed by sets of UNIT) 216.17 154.23 P
0.15 (s of the same kind. Once again, there) 374.32 154.23 P
0.65 (are a potentially unlimited number of kinds of UNIT) 72 142.23 P
0.65 (s but core-TDF only uses those named \322al_tagdefs\323, \322tag-) 286.9 142.23 P
FMENDPAGE
%%EndPage: "8" 14
%%Page: "9" 14
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 9) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
0 X
-0.23 (decs\323, \322tagdefs\323, \322tokdecs\323 and \322tokdefs\323) 72 763.23 P
1 8 Q
-0.18 (1) 238.16 767.23 P
1 10 Q
-0.23 (. These names will appear \050in the same order as in) 242.15 763.23 P
3 F
-0.23 (gr) 442.27 763.23 P
-0.23 (oups) 450.78 763.23 P
1 F
-0.23 (\051 in the) 469.66 763.23 P
3 F
-0.23 (pr) 499.79 763.23 P
-0.23 (op_) 508.3 763.23 P
(names) 72 751.23 T
1 F
(parameter of) 100.04 751.23 T
0 F
(make_capsule) 153.32 751.23 T
1 F
(, one for each kind of UNIT appearing in the CAPSULE:) 213.28 751.23 T
7 F
(prop_names:) 108 729.23 T
4 F
(SLIST) 169.11 729.23 T
7 F
(\050) 196.88 729.23 T
4 F
(TDFIDENT\051) 200.21 729.23 T
1 F
(Thus if:) 72 714.23 T
7 F
(prop_names) 108 692.23 T
4 F
( = \050\322tagdecs\323, \322tagdefs\323\051) 163.55 692.23 T
1 F
0.88 (then, the \336rst element of) 72 677.23 P
3 F
0.88 (gr) 176.31 677.23 P
0.88 (oups) 184.83 677.23 P
1 F
0.88 ( would contain only \322tagdecs\323 UNIT) 203.71 677.23 P
0.88 (s and and the second would contain only) 354.77 677.23 P
0.19 (\322tagdefs\323 UNIT) 72 665.23 P
0.19 (s. A \322tagdecs\323 UNIT contains things rather like a set of global identi\336er declarations in C, while) 135.59 665.23 P
(a \322tagdefs\323 UNIT is like a set of global de\336nitions of identi\336ers.) 72 653.23 T
0 F
(3.1.3) 72 627.23 T
(make_unit) 108 627.23 T
1 F
(Now we come to the construction of UNIT) 72 610.23 T
(s using) 243.12 610.23 T
0 F
(make_unit) 273.66 610.23 T
1 F
( \050S5.50.1\051, as in the diagram below) 319.19 610.23 T
(First we give the limits of the various name-spaces local to the UNIT in the) 72 214.09 T
3 F
(local_vars) 375.96 214.09 T
1 F
( parameter:) 418.16 214.09 T
7 F
(local_vars) 108 192.09 T
8 F
(:) 152.99 192.09 T
4 F
(SLIST\050TDFINT) 159.09 192.09 T
7 F
(\051) 225.73 192.09 T
1 F
0.54 (Just in the same way as with) 72 177.09 P
3 F
0.54 (external_linkage) 192.08 177.09 P
1 F
0.54 (, the numbers in local_vars correspond \050in the same order\051 to the) 259.25 177.09 P
0.84 (spaces indicated in) 72 165.09 P
3 F
0.84 (capsule_linking) 152.51 165.09 P
1 F
0.84 ( in section 2.1 on page 7. W) 215.8 165.09 P
0.84 (ith our example,the \336rst element of) 333.12 165.09 P
3 F
0.84 (local_vars) 481.1 165.09 P
1 F
0.47 (gives the number of \322tag\323 names local to the UNIT) 72 153.09 P
0.47 (, the second gives the number of \322token\323 names local to the) 280.02 153.09 P
0.15 (UNIT etc. These will include) 72 141.09 P
0 F
0.15 (all) 192.11 141.09 P
1 F
0.15 ( the names used in the body of the UNIT) 202.67 141.09 P
0.15 (. Each declaration of a T) 366.23 141.09 P
0.15 (AG, for exam-) 464.43 141.09 P
(ple, will use a new number from the \322tag\323 name-space; there is no hiding or reuse of names within a UNIT) 72 129.09 T
(.) 498.44 129.09 T
72 92 523.3 106.98 C
72 92 523.3 106.98 R
7 X
0 K
V
81 104.96 225 104.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. The C producer also makes \322tld2\323 UNIT) 90 86.67 T
(s \050which gives usage information for T) 227.56 86.67 T
(AGs to aid the linker) 351.27 86.67 T
(, tld, to discover which T) 418.02 86.67 T
(AGs) 497.55 86.67 T
(have de\336nitions in libraries\051 and, optionally) 90 76.67 T
(, \322diagnostics\323 UNIT) 229.4 76.67 T
(s \050to give run-time diagnostic information\051.) 297.01 76.67 T
72 72 523.3 769.9 C
74.79 232.76 520.51 584.9 C
74.79 232.76 520.51 584.9 R
7 X
0 K
V
76.43 234.61 509.29 581.76 R
V
0.5 H
2 Z
0 X
N
7 X
90 450 23.57 13.57 101.93 443.47 G
0 X
90 450 23.57 13.57 101.93 443.47 A
162.65 515.61 479.08 570.61 C
162.65 515.61 479.08 570.61 R
7 X
0 K
V
164.79 517.76 249.08 566.33 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(No of local tags) 169.08 556.33 T
(No of local tokens) 169.79 542.76 T
(No of local al_tags) 170.51 529.19 T
({In order given by CAPSULE) 257.65 542.04 T
3 F
( capsule_linkage) 378.48 542.04 T
1 F
(}) 445.93 542.04 T
74.79 232.76 520.51 584.9 C
241.93 400.61 499.08 469.9 C
241.93 400.61 499.08 469.9 R
7 X
0 K
V
245.51 406.33 309.08 465.61 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(tag LINKs) 250.51 453.47 T
(token LINKs) 251.22 436.33 T
(al_tag LINKs) 251.93 418.47 T
({Gives links between UNIT namespace) 323.36 437.04 T
(and CAPSULE namespace}) 346.22 422.76 T
74.79 232.76 520.51 584.9 C
82.65 323.47 200.51 351.33 C
82.65 323.47 200.51 351.33 R
7 X
0 K
V
90 450 56.79 12.5 142.29 337.4 G
0.5 H
2 Z
0 X
90 450 56.79 12.5 142.29 337.4 A
1 12 Q
(T) 95.5 334.19 T
(AGDEF_PROPS) 101.87 334.19 T
74.79 232.76 520.51 584.9 C
152.47 532.41 160.5 541.33 158.42 529.51 155.45 530.96 4 Y
0 X
0 K
V
117.65 452.76 155.45 530.96 2 L
0.5 H
2 Z
N
3 10 Q
(local_vars) 101.93 490.61 T
231.11 445.35 242.65 442.04 231.11 438.74 231.11 442.04 4 Y
V
127.65 442.04 231.11 442.04 2 L
N
(lks) 160.51 446.33 T
134.36 378.34 134.07 366.34 127.96 376.66 131.16 377.5 4 Y
V
117.65 430.61 131.16 377.49 2 L
N
(pr) 116.22 394.9 T
(operties) 124.73 394.9 T
1 F
(BYTESTREAM) 98.36 357.04 T
281.93 335.61 403.36 362.04 C
281.93 335.61 403.36 362.04 R
7 X
0 K
V
284.79 341.33 386.93 359.9 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(No of labels used by) 286.93 349.19 T
3 F
(tds) 371.6 349.19 T
74.79 232.76 520.51 584.9 C
281.22 285.61 391.93 312.76 C
281.22 285.61 391.93 312.76 R
7 X
0 K
V
284.08 288.47 376.93 311.33 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(T) 287.65 297.04 T
(AGDEFs of UNIT) 292.95 297.04 T
74.79 232.76 520.51 584.9 C
268.56 353.97 280.5 352.77 269.73 347.46 269.15 350.72 4 Y
0 X
0 K
V
200.51 338.47 269.15 350.71 2 L
0.5 H
2 Z
N
269.87 306.18 279.07 298.48 267.19 300.13 268.53 303.15 4 Y
V
201.22 332.76 268.53 303.15 2 L
N
3 10 Q
(no_labels) 209.08 341.33 T
(tds) 212.65 317.04 T
154.08 236.33 438.36 263.47 C
154.08 236.33 438.36 263.47 R
7 X
0 K
V
0 10 Q
0 X
(AN EXAMPLE OF A T) 166.93 247.04 T
(AGDEF UNIT) 268.36 247.04 T
74.79 232.76 520.51 584.9 C
1 12 Q
0 X
0 K
(UNIT) 86.22 440.61 T
72 72 523.3 769.9 C
0 0 595.3 841.9 C
FMENDPAGE
%%EndPage: "9" 15
%%Page: "10" 15
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 10) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 F
0 X
(3.1.4) 72 763.23 T
(LINK) 108 763.23 T
1 F
0 (Connections between the CAPSULE name-spaces and the UNIT name-spaces are made by LINKs \050S5.20\051 in the) 72 746.23 P
3 F
(lks) 72 734.23 T
1 F
(parameter of) 85.6 734.23 T
0 F
( make_unit) 136.38 734.23 T
1 F
(:) 184.42 734.23 T
7 F
(lks) 108 712.23 T
4 F
(: SLIST\050LINKS) 120.21 712.23 T
7 F
(\051) 185.76 712.23 T
1 F
0.33 (Once again,) 72 697.23 P
3 F
0.33 (lks) 122.89 697.23 P
1 F
0.33 ( is ef) 133.99 697.23 P
0.33 (fectively indexed by the kind of name-space a. Each LINKS \050S5.22\051 is an SLIST of LINKs) 153.9 697.23 P
0.24 (each of which which establish an identity between names in the CAPSULE name-space and names in the UNIT) 72 685.23 P
(name-space. Thus if the \336rst element of) 72 673.23 T
3 F
(lks) 232.99 673.23 T
1 F
( contains:) 244.1 673.23 T
0 F
(make_link) 108 651.23 T
4 F
(\05042, 4\051) 152.99 651.23 T
1 F
(then, the UNIT \322tag\323 42 is identical to the CAPSULE \322tag\323 4.) 72 636.23 T
0.2 (Note that names from the CAPSULE name-space only arise in two places, LINKs and LINK_EXTERNs. Every) 72 614.23 P
(other use of names are derived from some UNIT name-space.) 72 602.23 T
72 566.89 523.3 576.9 C
72 566.89 523.3 576.9 R
7 X
0 K
V
72 575.89 541.01 575.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 542.88 523.3 552.89 C
72 542.88 523.3 552.89 R
7 X
0 K
V
72 551.88 541.01 551.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.2) 72 557.56 T
(De\336nitions and declarations) 108 557.56 T
1 10 Q
-0.06 (The encoding in the) 72 526.22 P
3 F
-0.06 (pr) 153.91 526.22 P
-0.06 (operties) 162.43 526.22 P
1 F
-0.06 (:BYTSTREAM parameter of a UNIT is a PROPS \050S5.25\051, for which there are \336ve) 194.63 526.22 P
0.94 (constructors corresponding to the kinds of UNIT) 72 514.22 P
0.94 (s in core-TDF) 271.8 514.22 P
0.94 (,) 328.94 514.22 P
0 F
0.94 (make_al_tagdefs) 334.88 514.22 P
1 F
0.94 (,) 406.5 514.22 P
0 F
0.94 (make_tagdecs) 412.44 514.22 P
1 F
0.94 (,) 472.39 514.22 P
0 F
0.94 (make_tag-) 478.33 514.22 P
1.09 (defs) 72 502.22 P
1 F
1.09 (,) 89.21 502.22 P
0 F
1.09 ( make_tokdefs) 91.71 502.22 P
1 F
1.09 ( and) 154.71 502.22 P
0 F
1.09 (make_tokdecs.) 176.31 502.22 P
1 F
1.09 ( Each of these will declare or de\336ne names in the appropriate UNIT) 239.33 502.22 P
0.11 (name-space which can be used by) 72 490.22 P
0 F
0.11 ( make_link) 208.27 490.22 P
1 F
0.11 ( in the UNIT\325) 255.87 490.22 P
0.11 (s) 310.33 490.22 P
3 F
0.11 (lks) 316.83 490.22 P
1 F
0.11 ( parameter as well as elsewhere in the) 327.93 490.22 P
3 F
0.11 (pr) 482.58 490.22 P
0.11 (operties) 491.09 490.22 P
1 F
1.01 (parameter) 72 478.22 P
1.01 (. The distinction between \322declarations\323 and \322de\336nitions\323 is rather similar to C usage; a declaration) 111.41 478.22 P
-0.15 (provides the \322type\323 of a name, while a de\336nition gives its meaning. For tags, the \322type\323 is the SOR) 72 466.22 P
-0.15 (T SHAPE \050see) 464.76 466.22 P
(below\051 and for tokens it is the SOR) 72 454.22 T
(TNAME of the result of the T) 212.7 454.22 T
(OKEN.) 332.44 454.22 T
(T) 72 432.22 T
(aking it as a paradigm for PROPS, we have) 77.41 432.22 T
0 F
(make_tagdefs) 253.4 432.22 T
1 F
( \050S5.35.1\051:) 312.25 432.22 T
3 F
(no_labels) 102.35 410.22 T
1 F
(:) 141.22 410.22 T
(TDFINT) 153 410.22 T
3 F
(tds) 129.56 398.22 T
1 F
(:) 141.22 398.22 T
(SLIST\050T) 153 398.22 T
(AGDEF\051) 188.29 398.22 T
2 F
(\256) 144 382.22 T
4 F
(T) 162 382.22 T
(AGDEF_PROPS) 167.37 382.22 T
1 F
1.11 (The) 72 364.22 P
3 F
1.11 (no_labels) 91.15 364.22 P
1 F
1.11 ( parameter introduces the size of yet another name-space local to the PROPS, this time for the) 130.02 364.22 P
0.65 (LABELs \050S5.19\051 used in the T) 72 352.22 P
0.65 (AGDEFs. Each T) 197.18 352.22 P
0.65 (AGDEF \050S5.34\051 in) 268.47 352.22 P
3 F
0.65 (tds) 348.73 352.22 P
1 F
0.65 ( will de\336ne a \322tag\323 name in the UNIT\325) 360.39 352.22 P
0.65 (s) 519.41 352.22 P
0.34 (name-space. The order of these T) 72 340.22 P
0.34 (AGDEFs is immaterial since the initialisations of the tags are constants whose) 206.68 340.22 P
-0.09 (values can be solved at translate time or load time. Note that are two constructors for T) 72 328.22 P
-0.09 (AGDEF) 417.58 328.22 P
-0.09 (,) 450.09 328.22 P
0 F
-0.09 (make_id_tagdef) 455 328.22 P
1 F
(and) 72 316.22 T
0 F
(make_var_tagdef) 88.93 316.22 T
1 F
( both with the same signature:) 163.32 316.22 T
3 F
(t) 138.44 294.22 T
1 F
(:) 141.22 294.22 T
( TDFINT) 153 294.22 T
3 F
(e) 136.78 282.22 T
1 F
(:) 141.22 282.22 T
(EXP x) 153 282.22 T
2 F
(\256) 144 266.22 T
4 F
(T) 162 266.22 T
(AGDEF) 167.37 266.22 T
1 F
1.34 (Here) 72 248.22 P
3 F
1.34 ( t) 91.42 248.22 P
1 F
1.34 ( is tag name and) 98.04 248.22 P
3 F
1.34 (e) 172.19 248.22 P
1 F
1.34 ( is its initialisation. The distinction between then arises with the use of) 176.62 248.22 P
0 F
1.34 (obtain_tag) 477.76 248.22 P
1 F
-0.22 (\050S5.14.59\051 in an EXP) 72 236.22 P
-0.22 (. If its tag parameter is derived from a) 156.01 236.22 P
0 F
-0.22 (make_id_tagdef) 307.77 236.22 P
1 F
-0.22 (, the result of) 376.06 236.22 P
0 F
-0.22 (obtain_tag) 430.4 236.22 P
1 F
-0.22 ( is the value) 475.94 236.22 P
-0.02 (of the initialisation) 72 224.22 P
3 F
-0.02 (e) 149.96 224.22 P
1 F
-0.02 (. If it is derived from) 154.4 224.22 P
0 F
-0.02 (make_var_tagdef) 240.06 224.22 P
1 F
-0.02 (, its value is a pointer to space which originally con-) 314.45 224.22 P
0.01 (tained the initialisation. In one case the tag is bound to the initial value; in the other) 72 212.22 P
0.01 (, space is reserved to hold the) 405.24 212.22 P
-0.06 (initialisation and the tag is bound to a pointer to that space. There is a similar distinction between tags introduced) 72 200.22 P
(to be locals of a procedure using) 72 188.22 T
0 F
(identify) 204.4 188.22 T
1 F
( and) 237.16 188.22 T
0 F
(variable) 256.59 188.22 T
1 F
( \050see section 4.2.1 on page 19\051) 291.57 188.22 T
0 F
(3.2.1) 72 162.22 T
(Scopes and linking) 108 162.22 T
1 F
0.89 (Only names introduced by AL_T) 72 145.22 P
0.89 (AGDEFS, T) 207.45 145.22 P
0.89 (AGDEFS, T) 257.51 145.22 P
0.89 (AGDECs, T) 307.57 145.22 P
0.89 (OKDECs and T) 357.7 145.22 P
0.89 (OKDEFs can be used in) 423.14 145.22 P
-0.04 (other UNIT) 72 133.22 P
-0.04 (s \050and then, only via the) 118.17 133.22 P
3 F
-0.04 (lks) 216.5 133.22 P
1 F
-0.04 ( parameters of the UNIT) 227.6 133.22 P
-0.04 (s involved\051. Y) 325 133.22 P
-0.04 (ou can regard them as being similar) 380.84 133.22 P
0.35 (to C global declarations. T) 72 121.22 P
0.35 (oken de\336nitions include their declarations implicitly; however this is not true of tags.) 179.02 121.22 P
-0.12 (This means that any CAPSULE which uses or de\336nes a tag across UNIT) 72 109.22 P
-0.12 (s must include a T) 360.74 109.22 P
-0.12 (AGDEC for that tag in) 432.74 109.22 P
FMENDPAGE
%%EndPage: "10" 16
%%Page: "11" 16
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 1) 491.88 36 T
(1) 499 36 T
72 72 523.3 769.9 R
7 X
V
0 X
1.49 (its \322tagdecs\323 UNIT) 72 763.23 P
1.49 (s. A T) 151.45 763.23 P
1.49 (AGDEC \050S5.32\051is constructed using either) 178.34 763.23 P
0 F
1.49 (make_id_tagdec) 359.59 763.23 P
1 F
1.49 ( or) 428.99 763.23 P
0 F
1.49 (make_var_tagdec) 445.3 763.23 P
1 F
1.49 (,) 520.8 763.23 P
(both with the same signature:) 72 751.23 T
3 F
(t_intr) 114.38 729.23 T
(o) 136.22 729.23 T
1 F
(:) 141.22 729.23 T
(TDFINT) 153 729.23 T
3 F
(acc) 127.35 717.23 T
1 F
(:) 141.22 717.23 T
(OPTION\050ACCESS\051) 153 717.23 T
3 F
(x) 136.78 705.23 T
1 F
(:) 141.22 705.23 T
(SHAPE) 153 705.23 T
2 F
(\256) 144 689.23 T
4 F
(T) 162 689.23 T
(AGDEC) 167.37 689.23 T
1 F
0.24 (Here the tagname is given by) 72 671.23 P
3 F
0.24 (t_intr) 192.79 671.23 P
0.24 (o) 214.64 671.23 P
1 F
0.24 (; the SHAPE) 219.63 671.23 P
3 F
0.24 (x) 274.49 671.23 P
1 F
0.24 ( will de\336ned the amount of space required for the tag \050this is) 278.93 671.23 P
0.18 (analogous to the type in a C declaration\051. The) 72 659.23 P
3 F
0.18 (acc) 258.5 659.23 P
1 F
0.18 ( \336eld will de\336ne certain properties of the tag not implicit in its) 272.37 659.23 P
0.07 (SHAPE; I shall return to the kinds of properties envisaged in discussing local declarations in section 4.2 on page) 72 647.23 P
(19.) 72 635.23 T
0.05 (Most program will appear in the \322tagdefs\323 UNIT) 72 613.23 P
0.05 (s - they will include the de\336nitions of the procedures of the pro-) 267.33 613.23 P
(gram which in turn will include local de\336nitions of tags for the locals of the procedures.) 72 601.23 T
1.28 (The standard TDF linker allows one to link CAPSULEs together using the name identi\336cations given in the) 72 579.23 P
-0.19 (LINKEXTERNs, perhaps hiding some of them in the \336nal CAPSULE. It does this just by generating a new CAP-) 72 567.23 P
-0.18 (SULE name-space, grouping together component UNIT) 72 555.23 P
-0.18 (s of the same kind and replacing their) 294.69 555.23 P
3 F
-0.18 (lks) 445.93 555.23 P
1 F
-0.18 ( parameters with) 457.04 555.23 P
0.79 (values derived from the new CAPSULE name-space without changing the UNIT) 72 543.23 P
0.79 (s\325 name-spaces or their) 402.83 543.23 P
3 F
0.79 (pr) 500.9 543.23 P
0.79 (ops) 509.41 543.23 P
1 F
-0.1 (parameters. The operation of grouping together UNIT) 72 531.23 P
-0.1 (s is ef) 286.37 531.23 P
-0.1 (fectively assumed to be associative, commutative and) 309.31 531.23 P
0.17 (idempotent e.g. if the same tag is declared in two capsules it is assumed to be the same thing . It also means that) 72 519.23 P
(there is no implied order of evaluation of UNIT) 72 507.23 T
(s or of their component T) 261.72 507.23 T
(AGDEFs) 362.79 507.23 T
1.49 (Dif) 72 485.23 P
1.49 (ferent languages have dif) 85.14 485.23 P
1.49 (ferent conventions for deciding how programs are actually run. For example, C) 190.18 485.23 P
0.28 (requires the presence of a suitably de\336ned \322main\323 procedure; this is usually enforced by requiring the system ld) 72 473.23 P
0.49 (utility to bind the name \322main\323 along with the de\336nitions of any library values required. Otherwise, the C con-) 72 461.23 P
-0.05 (ventions are met by standard TDF linking. Other languages have more stringent requirements. For example, C++) 72 449.23 P
-0.06 (requires dynamic initialisation of globals. As the only runnable code in TDF is in procedures, C++ would require) 72 437.23 P
1.35 (an additional linking phase to construct a \322main\323 procedure which calls the initialisation procedures of each) 72 425.23 P
0.31 (CAPSULE involved. A \322C++init\323 UNIT would probably be used to used to indicate which of the procedures in) 72 413.23 P
(the CAPSULE are to be used for initialisation.) 72 401.23 T
FMENDPAGE
%%EndPage: "11" 17
%%Page: "12" 17
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 12) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(4) 72 741.88 T
(SHAPEs, ALIGNMENT) 99 741.88 T
(s and OFFSET) 348.68 741.88 T
(s.) 499.77 741.88 T
1 10 Q
0.18 (In most languages there is some notion of the type of a value. This is often an uncomfortable mix of a de\336nition) 72 665.19 P
0.35 (of a representation for the value and a means of choosing which operators are applicable to the value. The TDF) 72 653.19 P
0.86 (analogue of the type of value is its SHAPE \050) 72 641.19 P
0 F
0.86 (S3.20) 257.11 641.19 P
1 F
0.86 (\051. A SHAPE is only concerned with the representation of a) 280.16 641.19 P
0.49 (value, being an abstraction of its size and alignment properties. Clearly an architecture-independent representa-) 72 629.19 P
0.25 (tion of a program cannot say) 72 617.19 P
0.25 (, for example, that a pointer is 32 bits long; the size of pointers has to be abstracted) 187.26 617.19 P
(so that translations to particular architectures can choose the size that is apposite for the platform.) 72 605.19 T
72 569.84 523.3 579.85 C
72 569.84 523.3 579.85 R
7 X
0 K
V
72 578.84 541.01 578.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 545.84 523.3 555.84 C
72 545.84 523.3 555.84 R
7 X
0 K
V
72 554.84 541.01 554.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.1) 72 560.51 T
(Shapes) 108 560.51 T
1 10 Q
1.55 (There are ten dif) 72 529.17 P
1.55 (ferent basic constructors for the SOR) 142.78 529.17 P
1.55 (T SHAPE from) 298.42 529.17 P
0 F
1.55 (bit\336eld) 367.74 529.17 P
1 F
1.55 ( \050S5.27.3\051 to) 397.73 529.17 P
0 F
1.55 (top) 454.85 529.17 P
1 F
1.55 (\050S5.27.12\051as) 472.77 529.17 P
-0.05 (shown in table 3. SHAPEs arising from those constructors are used as quali\336ers \050just using an upper case version) 72 517.17 P
0.74 (of the constructor name\051 to various SOR) 72 505.17 P
0.74 (T) 237.95 505.17 P
0.74 (s in the de\336nition; for example, EXP T) 243.36 505.17 P
0.74 (OP is an expression with) 403.83 505.17 P
0 F
0.74 (top) 509.41 505.17 P
1 F
1.01 (SHAPE. This is just used for de\336nitional purposes only; there is no SOR) 72 493.17 P
1.01 (T SHAPENAME as one has SOR) 374.21 493.17 P
1.01 (T-) 513.86 493.17 P
(NAME.) 72 481.17 T
-0.09 (In the TDF speci\336cation of EXPs, you will observe that all EXPs in constructor signatures are all quali\336ed by the) 72 121.17 P
-0.15 (SHAPE name; for example, a parameter might be EXP INTEGER\050v\051. This merely means that for the construct to) 72 109.17 P
0.15 (be meaningful the parameter must be derived from a constructor de\336ned to be an EXP INTEGER\050v\051. Y) 72 97.17 P
0.15 (ou might) 487.32 97.17 P
-0.17 (be for) 72 85.17 P
-0.17 (given for assuming that TDF is hence strongly-typed by its SHAPEs. This is not true; the producer must get) 95.24 85.17 P
0 F
(T) 289.24 435.17 T
(able 3.) 294.99 435.17 T
4 F
(SHAPE) 105.46 405.17 T
(QUALIFIER) 193.22 411.17 T
(SOR) 205.81 399.17 T
(T) 227.29 399.17 T
(USAGE) 331.7 405.17 T
(ALIGNMENT) 449.65 405.17 T
(BITFIELD\050) 78 377.17 T
0 F
(v) 125.2 377.17 T
4 F
(\051) 130.2 377.17 T
(BITFIELD_) 178.8 377.17 T
(V) 178.8 365.17 T
(ARIETY) 184.73 365.17 T
(As in C bit\336elds e.g. .., int x:5..) 272.4 377.17 T
({) 438 377.17 T
0 F
(v) 441.34 377.17 T
4 F
(}) 446.33 377.17 T
(BOTT) 78 345.17 T
(OM) 104.47 345.17 T
(It never gets here e.g. goto) 272.4 345.17 T
(None) 438 345.17 T
(COMPOUND\050) 78 325.17 T
0 F
(sz) 140.74 325.17 T
4 F
(\051) 149.06 325.17 T
(OFFSET\050) 178.8 325.17 T
0 F
(x) 221.56 325.17 T
4 F
(,) 226.55 325.17 T
0 F
(y) 232.11 325.17 T
4 F
(\051) 237.11 325.17 T
(Structs or unions; OFFSET) 272.4 325.17 T
0 F
(sz) 395.15 325.17 T
4 F
( is) 403.48 325.17 T
(size) 272.4 313.17 T
0 F
(x) 438 325.17 T
2 14 Q
(\312) 445.78 326.17 T
4 10 Q
( Set-union of) 455.75 325.17 T
(\336eld alignments) 438 313.17 T
(FLOA) 78 293.17 T
(TING\050) 103.37 293.17 T
0 F
(fv) 130.57 293.17 T
4 F
(\051) 138.9 293.17 T
(FLOA) 178.8 293.17 T
(TING_) 204.17 293.17 T
(V) 178.8 281.17 T
(ARIETY) 184.73 281.17 T
(Floating point numbers) 272.4 293.17 T
({) 438 293.17 T
0 F
(fv) 441.34 293.17 T
4 F
(}) 449.66 293.17 T
(INTEGER\050) 78 261.17 T
0 F
(v) 125.75 261.17 T
4 F
(\051) 130.75 261.17 T
(V) 178.8 261.17 T
(ARIETY) 184.73 261.17 T
(Integers, including chars) 272.4 261.17 T
({) 438 261.17 T
0 F
(v) 441.34 261.17 T
4 F
(}) 446.33 261.17 T
(NOF\050) 78 241.17 T
0 F
(n, s) 102.43 241.17 T
4 F
(\051) 116.87 241.17 T
(\050NA) 178.8 241.17 T
(T) 195.27 241.17 T
(, SHAPE\051) 200.27 241.17 T
(T) 272.4 241.17 T
(uple of) 278.14 241.17 T
0 F
(n) 310.92 241.17 T
4 F
( values of SHAPE) 316.48 241.17 T
0 F
(s) 398.69 241.17 T
4 F
({) 438 241.17 T
7 F
(alignment) 441.34 241.17 T
4 F
(\050) 484.66 241.17 T
0 F
(s) 487.99 241.17 T
4 F
(\051}) 491.88 241.17 T
(OFFSET\050) 78 221.17 T
0 F
(a1, a2) 120.76 221.17 T
4 F
(\051) 145.74 221.17 T
(\050ALIGNMENT) 178.8 221.17 T
(,) 239.33 221.17 T
(ALIGNMENT\051) 178.8 209.17 T
(Of) 272.4 221.17 T
(fsets in memory;) 282.77 221.17 T
0 F
(a1) 358.86 221.17 T
2 14 Q
(\312) 371.64 222.17 T
0 10 Q
(a2) 384.39 221.17 T
4 F
(.) 394.39 221.17 T
({) 438 221.17 T
7 F
(offset) 441.34 221.17 T
4 F
(}) 465.79 221.17 T
(POINTER\050) 78 189.17 T
0 F
(a) 125.75 189.17 T
4 F
(\051) 130.75 189.17 T
(ALIGNMENT) 178.8 189.17 T
(Pointers in memory) 272.4 189.17 T
({) 438 189.17 T
7 F
(pointer) 441.34 189.17 T
4 F
(}) 471.89 189.17 T
(PROC) 78 169.17 T
(Procedure values) 272.4 169.17 T
({) 438 169.17 T
7 F
(proc) 441.34 169.17 T
4 F
(}) 460.78 169.17 T
(T) 78 149.17 T
(OP) 83.93 149.17 T
(No value; e.g. result of assign) 272.4 149.17 T
({ }) 438 149.17 T
72 425.59 72 142.09 2 L
V
0.5 H
0 Z
N
172.8 426.09 172.8 141.59 2 L
V
N
266.4 426.09 266.4 141.59 2 L
V
N
432 426.09 432 141.59 2 L
V
N
525.6 425.59 525.6 142.09 2 L
V
N
71.75 425.84 525.85 425.84 2 L
V
N
72.25 391.09 525.35 391.09 2 L
V
N
72.25 388.59 525.35 388.59 2 L
V
N
71.75 357.84 525.85 357.84 2 L
V
N
71.75 337.84 525.85 337.84 2 L
V
N
71.75 305.84 525.85 305.84 2 L
V
N
71.75 273.84 525.85 273.84 2 L
V
N
71.75 253.84 525.85 253.84 2 L
V
N
71.75 233.84 525.85 233.84 2 L
V
N
71.75 201.84 525.85 201.84 2 L
V
N
71.75 181.84 525.85 181.84 2 L
V
N
71.75 161.84 525.85 161.84 2 L
V
N
71.75 141.84 525.85 141.84 2 L
V
N
FMENDPAGE
%%EndPage: "12" 18
%%Page: "13" 18
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 13) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.05 (it right. There are some checks in translators, but these are not exhaustive and are more for the bene\336t of transla-) 72 763.23 P
0 (tor writers than for the user) 72 751.23 P
0 (. A tool for testing the SHAPE correctness of a TDF program would be useful but has) 180.52 751.23 P
(yet to be written.) 72 739.23 T
0 F
(4.1.1) 72 713.23 T
(T) 108 713.23 T
(OP) 114.49 713.23 T
(, BOTT) 127.45 713.23 T
(OM, LUB) 160.04 713.23 T
1 F
0.19 (T) 72 696.23 P
0.19 (wo of the SHAPE constructions are rather specialised; these are T) 77.41 696.23 P
0.19 (OP and BOTT) 342.83 696.23 P
0.19 (OM. The result of any expres-) 401.33 696.23 P
0.22 (sion with a T) 72 684.23 P
0.22 (OP shape will always be discarded; examples are those produced by) 124.95 684.23 P
0 F
0.22 (assign) 402.43 684.23 P
1 F
0.22 ( \050S5.14.6\051) 428.54 684.23 P
0.22 (and) 471.17 684.23 P
0 F
0.22 ( integer_) 485.61 684.23 P
0.37 (test) 72 672.23 P
1 F
0.37 (\050S5.14.34\051. A BOTT) 89.85 672.23 P
0.37 (OM SHAPE is produced by an expression which will leave the current \337ow of control) 173.4 672.23 P
-0.07 (e.g.) 72 660.23 P
0 F
-0.07 (goto) 88.86 660.23 P
1 F
-0.07 ( \050S5.14.31\051. The signi\336cance of these SHAPEs only really impinges on the computation of the shapes of) 107.18 660.23 P
0.16 (constructs which have alternative expressions as results. For example, the result of) 72 648.23 P
0 F
0.16 (conditional) 406.48 648.23 P
1 F
0.16 ( \050S5.14.15\051 is the) 454.24 648.23 P
0.35 (result of one of its component expressions. In this case, the SHAPE of the result is described as the LUB of the) 72 636.23 P
0.17 (SHAPEs of the components. This simply means that if one of the component SHAPEs is T) 72 624.23 P
0.17 (OP then the resulting) 438.1 624.23 P
-0.15 (SHAPE is T) 72 612.23 P
-0.15 (OP; if one is BOTT) 120.95 612.23 P
-0.15 (OM then the resulting SHAPE is the SHAPE of the other; otherwise both compo-) 199.02 612.23 P
0.72 (nent SHAPEs must be equal and is the resulting SHAPE. Since this operation is associative, commutative and) 72 600.23 P
(idempotent, we can speak quite unambiguously of the LUB of several SHAPEs.) 72 588.23 T
0 F
(4.1.2) 72 562.23 T
(INTEGER, FLOA) 108 562.23 T
(TING, BITFIELD, PROC) 186.12 562.23 T
1 F
0.05 (Integer values in TDF have shape INTEGER\050v\051 where v is of SOR) 72 545.23 P
0.05 (T V) 339.84 545.23 P
0.05 (ARIETY) 354.43 545.23 P
0.05 (. The constructor for this SHAPE) 389.78 545.23 P
0.95 (is) 72 533.23 P
0 F
0.95 ( integer) 78.67 533.23 P
1 F
0.95 (\050S5.27.7\051 with a V) 115.54 533.23 P
0.95 (ARIETY parameter) 191.24 533.23 P
0.95 (. The basic constructor for V) 270.74 533.23 P
0.95 (ARIETY is) 389.13 533.23 P
0 F
0.95 ( var_limits) 435.89 533.23 P
1 F
0.95 ( \050S5.51.3\051) 482.64 533.23 P
0.07 (which has a pair of signed natural numbers as parameters giving the limits of possible values that the integer can) 72 521.23 P
(attain. The SHAPE required for a 32 bit signed integer would be:) 72 509.23 T
0 F
(integer) 108 487.23 T
4 F
(\050) 137.97 487.23 T
0 F
(var_limits) 141.3 487.23 T
4 F
(\050-2) 184.61 487.23 T
4 8 Q
(31) 196.82 491.23 T
4 10 Q
(, 2) 205.71 487.23 T
4 8 Q
(31) 216.83 491.23 T
4 10 Q
(-1\051\051) 225.72 487.23 T
1 F
(while an unsigned char is:) 72 472.23 T
0 F
(integer) 108 450.23 T
4 F
(\050) 137.97 450.23 T
0 F
(var_limits) 141.3 450.23 T
4 F
(\0500, 255\051\051) 184.61 450.23 T
1 F
0.16 ( A translator should represent each integer variety by an object big enough \050or bigger\051 to contain all the possible) 72 435.23 P
0.57 (values with limits of the V) 72 423.23 P
0.57 (ARIETY) 179.89 423.23 P
0.57 (. That being said, I must confess that most current translators do not handle) 215.24 423.23 P
(integers of more than 32 bits, but this will be recti\336ed in due course.) 72 411.23 T
-0.15 (Similarly) 72 389.23 P
-0.15 (, \337oating point numbers have shape FLOA) 108.56 389.23 P
-0.15 (TING quali\336ed by a FLOA) 277.25 389.23 P
-0.15 (TING_V) 384.9 389.23 P
-0.15 (ARIETY) 419.69 389.23 P
-0.15 (. A FLOA) 455.04 389.23 P
-0.15 (TING_) 494.43 389.23 P
0.72 (V) 72 377.23 P
0.72 (ARIETY \050S5.51\051 speci\336es the base, number of mantissa digits, and maximum and minimum exponent. Once) 77.93 377.23 P
0.3 (again, it is intended that the translator will choose a representation which will contain all possible values, but in) 72 365.23 P
(practice only those which are included in IEEE \337oat, double and extended are actually implemented.) 72 353.23 T
-0.2 (A number of contiguous bits have shape BITFIELD, quali\336ed by a BITFIELD_V) 72 331.23 P
-0.2 (ARIETY \050) 395 331.23 P
0 F
-0.2 (S3.4) 437.27 331.23 P
1 F
-0.2 (\051 which gives the) 455.32 331.23 P
0.35 (number of bits involved and whether these bits are to be treated as signed or unsigned integers. Current transla-) 72 319.23 P
(tors put a maximum of 32 on the number of bits.) 72 307.23 T
0.77 (The representational SHAPEs of procedure values is given by PROC with constructor) 72 285.23 P
0 F
0.77 (pr) 427.7 285.23 P
0.77 (oc) 437.51 285.23 P
1 F
0.77 ( \050S5.27.1) 446.95 285.23 P
0.77 (1\051. I shall) 483.72 285.23 P
(return to this in the description of the operations which use it.) 72 273.23 T
0 F
(4.1.3) 72 247.23 T
(Non-primitive SHAPEs) 108 247.23 T
1 F
1.83 (The construction of the other four SHAPEs involves either existing SHAPEs or the alignments of existing) 72 230.23 P
0.18 (SHAPEs. These are constructed by) 72 218.23 P
0 F
0.18 (compound) 215.56 218.23 P
1 F
0.18 ( \050S5.27.5\051,) 260.55 218.23 P
0 F
0.18 (nof) 305.6 218.23 P
1 F
0.18 ( \050S5.27.8\051,) 319.48 218.23 P
0 F
0.18 (offset) 364.54 218.23 P
1 F
0.18 ( \050S5.27.9\051and) 387.84 218.23 P
0 F
0.18 (pointer) 444.83 218.23 P
1 F
0.18 ( \050S5.27.10\051.) 475.92 218.23 P
(Before describing these, we require a digression into what is meant by alignments and of) 72 206.23 T
(fsets.) 426.85 206.23 T
72 148.89 523.3 158.9 C
72 148.89 523.3 158.9 R
7 X
0 K
V
72 157.89 541.01 157.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 124.89 523.3 134.89 C
72 124.89 523.3 134.89 R
7 X
0 K
V
72 133.89 541.01 133.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.2) 72 139.56 T
(Alignments) 108 139.56 T
1 10 Q
0.54 (In most processor architectures there are limitations on how one can address particular kinds of objects in con-) 72 108.22 P
-0.18 (venient ways. These limitations are usually de\336ned as part of the ABI for the processor) 72 96.22 P
-0.18 (. For example, in the MIPs) 417.31 96.22 P
0.43 (processor the fastest way to access a 32-bit integer is to ensure that the address of the integer is aligned on a 4-) 72 84.22 P
FMENDPAGE
%%EndPage: "13" 19
%%Page: "14" 19
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 14) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
1.35 (byte boundary in the address space; obviously one can extract a mis-aligned integer but not in one machine) 72 763.23 P
0.21 (instruction. Similarly) 72 751.23 P
0.21 (, 16-bit integers should be aligned on a 2-byte boundary) 156.52 751.23 P
0.21 (. In principle, each primitive object) 381.51 751.23 P
0.86 (could have similar restrictions for ef) 72 739.23 P
0.86 (\336cient access and these restrictions could vary from platform to platform.) 221.29 739.23 P
-0.06 (Hence, the notion of alignment has to be abstracted to form part of the architecture independent TDF - we cannot) 72 727.23 P
(assume that any particular alignment regime will hold universally) 72 715.23 T
(.) 333.96 715.23 T
0.26 (The abstraction of alignments clearly has to cover compound objects as well as primitive ones like integers. For) 72 693.23 P
0.16 (example, if a \336eld of structure in C is to be accessed ef) 72 681.23 P
0.16 (\336ciently) 292.68 681.23 P
0.16 (, then the alignment of the \336eld will in\337uence the) 324.8 681.23 P
0.1 (alignment of the structure as whole; the structure itself could be a component of a lar) 72 669.23 P
0.1 (ger object whose alignment) 412.8 669.23 P
0.33 (must then depend on the alignment of the structure and so on. In general, we \336nd that a compound alignment is) 72 657.23 P
0.06 (given by the maximum alignment of its components, regardless of the form of the compound object e.g. whether) 72 645.23 P
(it is a structure, union, array or whatever) 72 633.23 T
(.) 233.82 633.23 T
0.67 (This gives an immediate handle on the abstraction of the alignment of a compound object - it is just the set of) 72 611.23 P
-0.05 (abstractions of the alignments of its components. Since \322maximum\323 is associative, commutative and idempotent,) 72 599.23 P
1.17 (the component sets can be combined using normal set-union rules. In other words, a compound alignment is) 72 587.23 P
0.2 (abstracted as the set of alignments of the primitive objects which make up the compound object. Thus the align-) 72 575.23 P
1 (ment abstraction of a C structure with only \337oat \336elds is the singleton set containing the alignment of a \337oat) 72 563.23 P
(while that of a C union of an int and this structure is a pair of the alignments of an int and a \337oat.) 72 551.23 T
0 F
(4.2.1) 72 525.23 T
(ALIGNMENT constructors) 108 525.23 T
1 F
3.89 (The TDF abstraction of an alignment has SOR) 72 508.23 P
3.89 (T ALIGNMENT \050S5.5\051. The constructor) 284.93 508.23 P
3.89 (,) 463.31 508.23 P
0 F
3.89 (unite_align-) 472.2 508.23 P
0.01 (ments) 72 496.23 P
1 F
0.01 (\050S5.5.5\051, gives the set-union of its ALIGNMENT parameters; this would correspond to taking a maximum) 97.54 496.23 P
(of two real alignments in the translator) 72 484.23 T
(.) 226.35 484.23 T
0.17 (The constructor ,) 72 462.23 P
0 F
0.17 (alignment) 143.01 462.23 P
1 F
0.17 (\050S5.5.3\051, gives the ALIGNMENT of a given SHAPE according to the rules given in) 185.77 462.23 P
1.15 (the de\336nition. These rules ef) 72 450.23 P
1.15 (fectively) 190.51 450.23 P
3 F
1.15 (de\336ne) 229.12 450.23 P
1 F
1.15 ( the primitive ALIGNMENT) 252.99 450.23 P
1.15 (s as in the ALIGNMENT column of) 371.5 450.23 P
0.99 (table 3. Those for PROC, all OFFSET) 72 438.23 P
0.99 (s and all POINTERs are constants regardless of any SHAPE quali\336ers.) 229.95 438.23 P
-0.22 (Each of the INTERGER V) 72 426.23 P
-0.22 (ARIETYs, each of the FLOA) 176.95 426.23 P
-0.22 (TING V) 292.91 426.23 P
-0.22 (ARIETYs and each of the BITFIELD V) 324.98 426.23 P
-0.22 (ARIETYs) 482.77 426.23 P
-0.09 (have their own ALIGNMENT) 72 414.23 P
-0.09 (s. These ALIGNMENT) 192.31 414.23 P
-0.09 (s will be bound to values apposite to the particular platform) 286.07 414.23 P
0.07 (at translate-time. The ALIGNMENT of T) 72 402.23 P
0.07 (OP is conventionally taken to be the empty set of ALIGNMENT) 238.71 402.23 P
0.07 (s \050cor-) 497.42 402.23 P
(responding to the minimum alignment on the platform\051.) 72 390.23 T
0 F
(4.2.2) 72 364.23 T
(Special alignments) 108 364.23 T
1 F
0.78 (There are four other special ALIGNMENT) 72 347.23 P
0.78 (s. The alignment of a code address is {) 247.54 347.23 P
3 F
0.78 (code) 408.73 347.23 P
1 F
0.78 (} given by) 427.6 347.23 P
0 F
0.78 (code_align-) 474.43 347.23 P
0.52 (ment) 72 335.23 P
1 F
0.52 ( \050S5.5.6\051; this will be the alignment of a pointer given by) 93.65 335.23 P
0 F
0.52 (make_local_lv) 329.74 335.23 P
1 F
0.52 ( \050S5.14.44\051 giving the value of a) 390.82 335.23 P
1.27 (label. The other three special ALIGNMENT) 72 323.23 P
1.27 (s are considered to include all of the others, but remain distinct.) 255.3 323.23 P
0.97 (These are) 72 311.23 P
0 F
0.97 (frame_alignment) 115.01 311.23 P
1 F
0.97 ( \050S5.5.7\051 which gives the alignment of a frame-pointer delivered by) 188.29 311.23 P
0 F
0.97 (curr) 471.29 311.23 P
0.97 (ent_env) 489.98 311.23 P
1 F
1.42 (\050S5.14.18\051;) 72 299.23 P
0 F
1.42 (alloca_alignment) 120.9 299.23 P
1 F
1.42 ( \050S5.5.8\051 which gives the alignment of a local pointer delivered by) 193.64 299.23 P
0 F
1.42 (local_alloc) 478.32 299.23 P
1 F
0.74 (\050S5.14.37\051; and) 72 287.23 P
0 F
0.74 (var_param_alignment) 137.89 287.23 P
1 F
0.74 ( \050S5.5.9\051 which is the alignment required by a var_param of procedure) 233.39 287.23 P
(de\336nition \050see section 4.1.1 on page 18\051) 72 275.23 T
0 F
(4.2.3) 72 249.23 T
(AL_T) 108 249.23 T
(AG, make_al_tagdef) 132.81 249.23 T
1 F
0.27 (Alignments can also be named as AL_T) 72 232.23 P
0.27 (AGs using) 233.27 232.23 P
0 F
0.27 (make_al_tagdef) 278.78 232.23 P
1 F
0.27 ( \050S5.3.1\051. There is no corresponding) 346.52 232.23 P
0 F
0.27 (make_) 494.98 232.23 P
0.37 (al_tagdec) 72 220.23 P
1 F
0.37 ( since AL_T) 112.53 220.23 P
0.37 (AGs are implicitly declared by their constructor) 162.42 220.23 P
0.37 (,) 355.74 220.23 P
0 F
0.37 (make_al_tag) 361.11 220.23 P
1 F
0.37 ( \050S5.2.2\051. The main reason) 415.52 220.23 P
0 (for having names for alignments is to allow one to resolve the ALIGNMENT) 72 208.23 P
0 (s of recursive data structures. If, for) 380.61 208.23 P
0.09 (example, we have mutually recursive structures, their ALIGNMENT) 72 196.23 P
0.09 (s are best named and given as a set of equa-) 347.55 196.23 P
0.23 (tions formed by AL_T) 72 184.23 P
0.23 (AGDEFs. A translator can then solve these equations trivially by substitution; this is easy) 162.12 184.23 P
(because the only signi\336cant operation is set-union.) 72 172.23 T
72 136.89 523.3 146.9 C
72 136.89 523.3 146.9 R
7 X
0 K
V
72 145.89 541.01 145.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 112.89 523.3 122.89 C
72 112.89 523.3 122.89 R
7 X
0 K
V
72 121.89 541.01 121.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.3) 72 127.56 T
(Pointer and offset SHAPEs) 108 127.56 T
1 10 Q
0.26 (A pointer value must have a form which re\337ects the alignment of the object that it points to; for example, in the) 72 96.22 P
0.72 (MIPs processor) 72 84.22 P
0.72 (, the bottom two bits of a pointer to an integer must be zero. The TDF SHAPE for a pointer is) 134.77 84.22 P
FMENDPAGE
%%EndPage: "14" 20
%%Page: "15" 20
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 15) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.29 (POINTER quali\336ed by the ALIGNMENT of the object pointed to. The constructor) 72 763.23 P
0 F
0.29 (pointer) 409.98 763.23 P
1 F
0.29 ( \050S5.27.10\051 uses this) 441.08 763.23 P
(alignment to make a POINTER SHAPE.) 72 751.23 T
0 F
(4.3.1) 72 725.23 T
(OFFSET) 108 725.23 T
1 F
0 (Expressions which give sizes or of) 72 708.23 P
0 (fsets in TDF have an OFFSET SHAPE. These are always described as the dif-) 210.29 708.23 P
0.64 (ference between two pointers. Since the alignments of the objects pointed to could be dif) 72 696.23 P
0.64 (ferent, an OFFSET is) 435.86 696.23 P
2.99 (quali\336ed by these two ALIGNMENT) 72 684.23 P
2.99 (s. Thus an EXP OFFSET\050X,Y\051 is the dif) 233.17 684.23 P
2.99 (ference between an EXP) 415.8 684.23 P
0.12 (POINTER\050X\051 and an EXP POINTER\050Y\051. In order for the alignment rules to apply) 72 672.23 P
0.12 (, the set X of alignments must) 402.89 672.23 P
0.85 (include Y) 72 660.23 P
0.85 (. The constructor) 110.7 660.23 P
0 F
0.85 (offset) 183.74 660.23 P
1 F
0.85 ( \050S5.27.9\051 uses two such alignments to make an OFFSET SHAPE. However) 207.05 660.23 P
0.85 (,) 520.8 660.23 P
(many instances of of) 72 648.23 T
(fsets will be produced implicitly by the of) 154.81 648.23 T
(fset arithmetic, e.g.,) 322.03 648.23 T
0 F
(offset_pad) 403.92 648.23 T
1 F
( \050S5.14.66\051:) 448.33 648.23 T
3 F
(a) 136.22 626.23 T
1 F
(:) 141.22 626.23 T
(ALIGNMENT) 153 626.23 T
3 F
(ar) 122.71 614.23 T
(g) 131.23 614.23 T
1 F
(1:) 136.22 614.23 T
(EXP OFFSET\050) 153 614.23 T
3 F
(z, t) 213.81 614.23 T
1 F
(\051) 225.47 614.23 T
2 F
(\256) 144 598.23 T
4 F
(EXP OFFSET\050) 162 598.23 T
7 F
(z) 227.53 598.23 T
2 12 Q
( \310) 232.53 598.23 T
7 10 Q
( a, a) 244.74 598.23 T
4 F
(\051) 264.19 598.23 T
1 F
0.83 (This gives the next OFFSET greater or equal to) 72 580.23 P
3 F
0.83 (ar) 271.89 580.23 P
0.83 (g1) 280.41 580.23 P
1 F
0.83 ( at which an object of ALIGNMENT) 290.4 580.23 P
3 F
0.83 (a) 446.96 580.23 P
1 F
0.83 ( can be placed. It) 451.96 580.23 P
0.34 (should be noted that the calculation of shapes and alignments are all translate-time activities; only EXPs should) 72 568.23 P
0.48 (produce runnable code. This code, of course, may depend on the shapes and alignments involved; for example,) 72 556.23 P
0 F
0.79 (offset_pad) 72 544.23 P
1 F
0.79 ( might round up) 116.42 544.23 P
3 F
0.79 (ar) 186.23 544.23 P
0.79 (g1) 194.74 544.23 P
1 F
0.79 ( to be a multiple of four bytes if) 204.74 544.23 P
3 F
0.79 ( a) 338.23 544.23 P
1 F
0.79 ( was an integer ALIGNMENT and) 346.52 544.23 P
3 F
0.79 (z) 492.84 544.23 P
1 F
0.79 ( was a) 496.73 544.23 P
0.7 (character ALIGNMENT) 72 532.23 P
0.7 (. T) 170.48 532.23 P
0.7 (ranslators also do extensive constant analysis, so if) 181.93 532.23 P
3 F
0.7 (ar) 393.22 532.23 P
0.7 (g1) 401.73 532.23 P
1 F
0.7 ( was a constant of) 411.73 532.23 P
0.7 (fset, then) 485.96 532.23 P
(the round-of) 72 520.23 T
(f would be done at translate-time to produce another constant.) 121.5 520.23 T
(.) 72 498.23 T
72 462.89 523.3 472.9 C
72 462.89 523.3 472.9 R
7 X
0 K
V
72 471.89 541.01 471.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 438.88 523.3 448.89 C
72 438.88 523.3 448.89 R
7 X
0 K
V
72 447.88 541.01 447.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.4) 72 453.56 T
(Compound SHAPEs) 108 453.56 T
1 10 Q
0.35 (The alignments of compound SHAPEs \050i.e. those arising from the constructors) 72 422.22 P
0 F
0.35 ( compound) 390.26 422.22 P
1 F
0.35 ( and) 438.1 422.22 P
0 F
0.35 (nof) 458.22 422.22 P
1 F
0.35 (\051 are derived) 472.1 422.22 P
(from the constructions which produced the SHAPE. T) 72 410.22 T
(o take the easy one \336rst, the constructor) 287.82 410.22 T
0 F
( nof) 446.59 410.22 T
1 F
( has signature:) 462.98 410.22 T
3 F
(n) 136.22 388.22 T
1 F
(:) 141.22 388.22 T
( NA) 153 388.22 T
(T) 168.82 388.22 T
3 F
(s) 137.33 376.22 T
1 F
(:) 141.22 376.22 T
(SHAPE) 153 376.22 T
2 F
(\256) 144 360.22 T
4 F
(SHAPE) 162 360.22 T
1 F
0.37 (This SHAPE describes an array of) 72 342.22 P
3 F
0.37 (n) 214.13 342.22 P
1 F
0.37 ( values all of SHAPE) 219.12 342.22 P
3 F
0.37 (s) 308.98 342.22 P
1 F
0.37 (; note that) 312.87 342.22 P
3 F
0.37 (n) 356.47 342.22 P
1 F
0.37 ( is a natural number and hence is a con-) 361.46 342.22 P
0.1 (stant known to the producer) 72 330.22 P
0.1 (. Throughout the de\336nition this is referred to as the SHAPE NOF\050n, s\051. The ALIGN-) 183.46 330.22 P
(MENT of such a value is) 72 318.22 T
0 F
(alignment) 174.7 318.22 T
1 F
(\050s\051; i.e. the alignment of an array is just the alignment of its elements.) 217.46 318.22 T
(The other compound SHAPEs are produced using) 72 296.22 T
0 F
(compound) 274.36 296.22 T
1 F
(:) 319.34 296.22 T
3 F
(sz) 133.45 274.22 T
1 F
(:) 141.22 274.22 T
(EXP OFFSET\050) 153 274.22 T
3 F
(x, {}) 213.81 274.22 T
1 F
(\051) 231.24 274.22 T
2 F
(\256) 144 258.22 T
4 F
(S) 162 258.22 T
(HAPE) 168.67 258.22 T
1 F
(The) 72 240.22 T
6 F
(sz) 90.04 240.22 T
1 F
( parameter gives the minimum size which can accommodate the SHAPE.) 97.82 240.22 T
0 F
(4.4.1) 72 214.22 T
(Offset arithmetic with compound shapes) 108 214.22 T
1 F
0.82 (The constructors) 72 197.22 P
0 F
0.82 (offset_add) 143.03 197.22 P
1 F
0.82 ( \050S5.14.60\051,) 187.45 197.22 P
0 F
0.82 (offset_zer) 238.78 197.22 P
0.82 (o) 280.22 197.22 P
1 F
0.82 ( \050S5.14.69\051 and) 285.22 197.22 P
0 F
0.82 (shape_offset) 351.8 197.22 P
1 F
0.82 ( \050S5.14.80\051 are used together) 404.55 197.22 P
-0.18 (with) 72 185.22 P
0 F
-0.18 (offset_pad) 92.09 185.22 P
1 F
-0.18 ( to implement \050) 136.51 185.22 P
3 F
-0.18 (inter alia) 197.33 185.22 P
1 F
-0.18 (\051 selection from structures represented by COMPOUND SHAPEs. Start-) 234.08 185.22 P
0.12 (ing from the zero OFFSET given by) 72 173.22 P
0 F
0.12 (offset_zer) 220.26 173.22 P
0.12 (o) 261.69 173.22 P
1 F
0.12 (, one can construct an EXP which is the of) 266.69 173.22 P
0.12 (fset of a \336eld by pad-) 437.48 173.22 P
0.09 (ding and adding of) 72 161.22 P
0.09 (fsets until the required \336eld is reached. The value of the \336eld required could then be extracted) 147.34 161.22 P
1.38 (using) 72 149.22 P
0 F
1.38 (component) 97.53 149.22 P
1 F
1.38 ( \050S5.14.13\051 or) 144.73 149.22 P
0 F
1.38 (add_to_ptr) 206.87 149.22 P
1 F
1.38 ( \050S5.14.3\051. Most producers would de\336ne a T) 254.62 149.22 P
1.38 (OKEN for the EXP) 441.17 149.22 P
(OFFSET of each \336eld of a structure or union used in the program simply to reduce the size of the TDF) 72 137.22 T
0.3 (The SHAPE of a C structure consisting of an char followed by an int would require) 72 115.22 P
3 F
0.3 (x) 412.67 115.22 P
1 F
0.3 ( to be the set consisting of) 417.11 115.22 P
(two INTEGER V) 72 103.22 T
(ARIETYs, one for int and one for char) 140.66 103.22 T
(, and) 295.14 103.22 T
3 F
(sz) 317.07 103.22 T
1 F
( would probably have been constructed like:) 324.84 103.22 T
7 F
(sz) 108 81.22 T
4 F
(=) 120.77 81.22 T
0 F
( offset_add) 126.61 81.22 T
4 F
(\050) 173.52 81.22 T
0 F
(offset_pad) 176.85 81.22 T
4 F
(\050int_al,) 221.27 81.22 T
0 F
(shape_offset) 254.04 81.22 T
4 F
(\050char\051\051,) 306.78 81.22 T
0 F
(shape_offset) 341.76 81.22 T
4 F
(\050int\051\051) 394.5 81.22 T
FMENDPAGE
%%EndPage: "15" 21
%%Page: "16" 21
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 16) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.84 (The various rules for the ALIGNMENT quali\336ers of the OFFSET) 72 763.23 P
0.84 (s give the required SHAPE; these rules also) 342.83 763.23 P
0.49 (ensure that of) 72 751.23 P
0.49 (fset arithmetic can be implemented simply using integer arithmetic for standard architectures \050see) 127.19 751.23 P
0 (section 12.1 on page 44\051. Note that the OFFSET computed here is the minimum size for the SHAPE. This would) 72 739.23 P
0.66 (not in general be the same as the dif) 72 727.23 P
0.66 (ference between successive elements of an array of these structures which) 220.87 727.23 P
0.85 (would have SHAPE OFFSET\050) 72 715.23 P
3 F
0.85 (x) 196.99 715.23 P
1 F
0.85 (,) 201.43 715.23 P
3 F
0.85 (x) 207.28 715.23 P
1 F
0.85 (\051 as produced by) 211.72 715.23 P
0 F
0.85 (offset_pad) 283.96 715.23 P
1 F
0.85 (\050) 328.38 715.23 P
3 F
0.85 (x) 331.71 715.23 P
1 F
0.85 (,) 336.14 715.23 P
3 F
0.85 (sz) 341.99 715.23 P
1 F
0.85 (\051. For examples of the use of OFFSET) 349.77 715.23 P
0.85 (s to) 508.28 715.23 P
(access and create structures, see section 1) 72 703.23 T
(1 on page 42.) 237.87 703.23 T
0 F
(4.4.2) 72 677.23 T
(offset_mult) 108 677.23 T
1 F
0.34 (In C, all structures have size known at translate-time. This means that OFFSET) 72 660.23 P
0.34 (s for all \336eld selections of struc-) 392.44 660.23 P
0.06 (tures and unions are translate-time constants; there is never any need to produce code to compute these sizes and) 72 648.23 P
-0.24 (of) 72 636.23 P
-0.24 (fsets. Other languages \050notably Ada\051 do have variable size structures and so sizes and of) 80.15 636.23 P
-0.24 (fsets within these struc-) 429.36 636.23 P
0.44 (tures may have to be computed dynamically) 72 624.23 P
0.44 (. Indexing in C will require the computation of dynamic OFFSET) 250.55 624.23 P
0.44 (s;) 516.63 624.23 P
1.1 (this would usually be done by using) 72 612.23 P
0 F
1.1 (offset_mult) 226 612.23 P
1 F
1.1 ( \050S5.14.64\051 to multiply an of) 274.29 612.23 P
1.1 (fset expression representing the) 393.71 612.23 P
(stride by an integer expression giving the index:) 72 600.23 T
3 F
(ar) 122.71 578.23 T
(g1) 131.23 578.23 T
1 F
(:) 141.22 578.23 T
(EXP OFFSET\050) 153 578.23 T
3 F
(x, x) 213.81 578.23 T
1 F
(\051) 227.68 578.23 T
3 F
(ar) 122.71 566.23 T
(g2) 131.23 566.23 T
1 F
(:) 141.22 566.23 T
(EXP INTEGER\050) 153 566.23 T
3 F
(v) 220.45 566.23 T
1 F
(\051) 224.89 566.23 T
2 F
(\256) 144 550.23 T
4 F
(EXP OFFSET\050) 162 550.23 T
7 F
(x, x) 227.53 550.23 T
4 F
(\051) 243.09 550.23 T
1 F
(and using) 72 532.23 T
0 F
(add_to_ptr) 113.09 532.23 T
1 F
( with a pointer expression giving the base of the array with the resulting OFFSET) 160.84 532.23 T
(.) 486 532.23 T
0 F
(4.4.3) 72 506.23 T
(OFFSET ordering and r) 108 506.23 T
(epr) 211.94 506.23 T
(esentation) 226.2 506.23 T
1 F
0.2 (There is an ordering de\336ned on OFFSET) 72 489.23 P
0.2 (s with the same alignment quali\336ers, as given by) 236.26 489.23 P
0 F
0.2 (offset_test) 435.12 489.23 P
1 F
0.2 ( \050S5.14.68\051) 478.4 489.23 P
(and) 72 477.23 T
0 F
(offset_max) 88.93 477.23 T
1 F
( \050S5.14.68\051 having properties like:) 135.55 477.23 T
0 F
(shape_offset) 108 455.23 T
4 F
(\050S\051) 160.74 455.23 T
2 14 Q
(\263) 176.84 455.23 T
0 10 Q
(offset_zer) 187.3 455.23 T
(o) 228.74 455.23 T
4 F
(\050) 233.74 455.23 T
0 F
(alignment) 237.07 455.23 T
4 F
(\050S\051\051) 279.82 455.23 T
(A) 108 440.23 T
2 14 Q
(\263) 117.44 440.23 T
4 10 Q
( B) 125.13 440.23 T
(if) 137.35 440.23 T
(f) 142.17 440.23 T
0 F
(offset_max) 147.72 440.23 T
4 F
(\050A,B\051 = A) 194.35 440.23 T
0 F
(offset_add) 108 425.23 T
4 F
(\050A, B\051) 152.42 425.23 T
2 14 Q
(\263) 180.74 425.23 T
4 10 Q
( A) 188.42 425.23 T
(where B) 197.87 425.23 T
2 14 Q
(\263) 237.3 425.23 T
0 10 Q
(offset_zer) 247.76 425.23 T
(o) 289.2 425.23 T
4 F
(\050some compatible alignment\051) 294.2 425.23 T
1 F
1.12 (In most machines, OFFSET) 72 410.23 P
1.12 (s would be represented as single integer values with the OFFSET ordering corre-) 186.26 410.23 P
0.77 (sponding to simple integer ordering. The) 72 398.23 P
0 F
0.77 (offset_add) 242.33 398.23 P
1 F
0.77 ( constructor just translates to simple addition with) 286.75 398.23 P
0 F
0.77 (offset_) 494.99 398.23 P
0.4 (zer) 72 386.23 P
0.4 (o) 85.13 386.23 P
1 F
0.4 (as 0 with similar correspondences for the other of) 93.03 386.23 P
0.4 (fset constructors. Y) 294.2 386.23 P
0.4 (ou might well ask why TDF does not) 371.99 386.23 P
-0.03 (simply use integers for of) 72 374.23 P
-0.03 (fsets, instead of introducing the rather complex OFFSET SHAPE. The reasons are two-) 173.87 374.23 P
0.39 (fold. First, following the OFFSET arithmetic rules concerned with the ALIGNMENT quali\336ers will ensure that) 72 362.23 P
0.96 (one never extracts a value from a pointer with the wrong alignment by) 72 350.23 P
0.96 (, for example, applying) 364.32 350.23 P
0 F
0.96 (contents) 463.64 350.23 P
1 F
0.96 ( to an) 499.17 350.23 P
0 F
0.79 (add_to_pointer) 72 338.23 P
1 F
0.79 (. This frees TDF from having to de\336ne the ef) 136.97 338.23 P
0.79 (fect of strange operations like forming a \337oat by) 323.78 338.23 P
-0.11 (taking the contents of a pointer to a character which may be mis-aligned with respect to \337oats - a heavy operation) 72 326.23 P
-0.12 (on most processors. The second reason is quite simple; there are machines which cannot represent OFFSET) 72 314.23 P
-0.12 (s by a) 500.23 314.23 P
(single integer value.) 72 302.23 T
0.15 (The iAPX-432 is a fairly extreme example of such a machine; it is a \322capability\323 machine which must segregate) 72 280.23 P
0.98 (pointer values and non-pointer values into dif) 72 268.23 P
0.98 (ferent spaces. On this machine a value of SHAPE POINTER\050{-) 259.83 268.23 P
3 F
0.7 (pointer) 72 256.23 P
1 F
0.7 (, int}\051 \050e.g. a pointer to a structure containing both integers and pointers\051 could have two components) 100.47 256.23 P
1 8 Q
0.56 (1) 516.52 260.23 P
1 10 Q
0.7 (;) 520.52 256.23 P
0 (one referring to the pointers and another to the integers. In general, of) 72 244.23 P
0 (fsets from this pointer would also have two) 350.4 244.23 P
-0.19 (components, one to pick out any pointer values and the other the integer values. This would obviously be the case) 72 232.23 P
0.44 (if the original POINTER referred to an array of structures containing both pointers and integers; an of) 72 220.23 P
0.44 (fset to an) 485.78 220.23 P
1.53 (element of the array would have SHAPE OFFSET\050{) 72 208.23 P
3 F
1.53 (pointer) 292.64 208.23 P
1 F
1.53 (, int},{) 321.11 208.23 P
3 F
1.53 (pointer) 350.28 208.23 P
1 F
1.53 (, int}\051; both elements of the of) 378.76 208.23 P
1.53 (fset) 508.86 208.23 P
0.18 (would have to be used as displacements to the corresponding elements of the pointer to extract the structure ele-) 72 196.23 P
-0.23 (ment. The OFFSET ordering is now given by the comparison of both displacements. Using this method, one \336nds) 72 184.23 P
0.61 (that pointers in store to non-pointer alignments are two words in dif) 72 172.23 P
0.61 (ferent blocks and pointers to pointer) 349.18 172.23 P
0.61 (-align-) 496.65 172.23 P
0.51 (ments are four words, two in one block and two in another) 72 160.23 P
0.51 (. This sounds a very unwieldy machine compared to) 310.76 160.23 P
1.33 (normal machines with linear addressing. However) 72 148.23 P
1.33 (, who knows what similar strange machines will appear in) 279.23 148.23 P
0.33 (future; the basic con\337icts between security) 72 136.23 P
0.33 (, integrity and \337exibility that the iAPX-432 sought to resolve are still) 243.71 136.23 P
(with us. For more on the modelling of pointers and of) 72 124.23 T
(fsets see section 12 on page 44.) 286.41 124.23 T
72 92 523.3 106.98 C
72 92 523.3 106.98 R
7 X
0 K
V
81 104.96 225 104.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
-0.13 (1. In fact, I believe that most compilers on the iAPX-432 represent pointers as integer displacements into a single pointer area - unfor-) 90 86.67 P
(tunately) 90 76.67 T
(, obviating most of the claimed advantages of this kind of capability machine.) 115.24 76.67 T
FMENDPAGE
%%EndPage: "16" 22
%%Page: "17" 22
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 17) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.5) 72 750.56 T
(BITFIELD alignments) 108 750.56 T
1 10 Q
0.29 (Even in standard machines, one \336nds that the size of a pointer may depend on the alignment of the data pointed) 72 719.22 P
0.3 (at. Most machines do not allow one to construct pointers to bits with the same facility as other alignments. This) 72 707.22 P
0.87 (usually means that pointers in memory to BITFIELD V) 72 695.22 P
0.87 (ARIETYs must be implemented as two words with an) 299.78 695.22 P
-0.19 (address and bit displacement. One might imagine that a translator could implement BITFIELD alignments so that) 72 683.22 P
0.12 (they are the same as the smallest natural alignment of the machine and avoid the bit displacement, but this is not) 72 671.22 P
-0.02 (the intention of the de\336nition. On any machine for which it is meaningful, the alignment of a BITFIELD must be) 72 659.22 P
0.96 (one bit; in other words successive BITFIELDs are butted together with no padding bits) 72 647.22 P
1 8 Q
0.77 (1) 432.29 651.22 P
1 10 Q
0.96 (. W) 436.29 647.22 P
0.96 (ithin the limits of) 451.28 647.22 P
0.47 (what one can extract from BITFIELDs, namely INTEGER V) 72 635.22 P
0.47 (ARIETYs, this is how one should implement non-) 319.01 635.22 P
0.04 (standard alignments, perhaps in constructing data, such as protocols, for exchange between machines. One could) 72 623.22 P
(implement some Ada representational statements in this way; certainly the most commonly used ones.) 72 611.22 T
72 102 523.3 116.98 C
72 102 523.3 116.98 R
7 X
0 K
V
81 114.96 225 114.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. Note that is not generally true for C bit\336elds; most C ABIs have \050dif) 90 96.67 T
(ferent\051 rules for putting in padding bits depending on the size) 316.16 96.67 T
(of the bit\336eld and its relation with the natural alignments. This is a fruitful source of errors in data exchange between dif) 90 86.67 T
(ferent C) 474.92 86.67 T
(ABIs.) 90 76.67 T
FMENDPAGE
%%EndPage: "17" 23
%%Page: "18" 23
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 18) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(5) 72 741.88 T
(Pr) 99 741.88 T
(ocedur) 123.87 741.88 T
(es and Locals) 194.06 741.88 T
1 10 Q
0.22 (All procedures in TDF are essentially global; the only values which are accessible from the body of a procedure) 72 665.19 P
1.14 (are those which are derived from global T) 72 653.19 P
1.14 (AGs \050introduced by T) 247.07 653.19 P
1.14 (AGDEFs or T) 337.67 653.19 P
1.14 (AGDECs\051, local T) 395.77 653.19 P
1.14 (AGs de\336ned) 471.92 653.19 P
(within the procedure and parameter T) 72 641.19 T
(AGs of the procedure) 221.91 641.19 T
72 605.84 523.3 615.85 C
72 605.84 523.3 615.85 R
7 X
0 K
V
72 614.84 541.01 614.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 581.84 523.3 591.84 C
72 581.84 523.3 591.84 R
7 X
0 K
V
72 590.84 541.01 590.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(5.1) 72 596.51 T
(De\336ning and calling pr) 108 596.51 T
(ocedur) 244.99 596.51 T
(es) 285.93 596.51 T
0 10 Q
(5.1.1) 72 559.17 T
(make_pr) 108 559.17 T
(oc) 146.13 559.17 T
1 F
(All executable code in TDF will arise from an EXP PROC made by the) 72 542.17 T
0 F
(make_pr) 360.14 542.17 T
(oc) 398.27 542.17 T
1 F
( \050S5.14.50\051 constructor:) 407.7 542.17 T
3 F
(r) 90.51 520.17 T
(esult_shape) 94.03 520.17 T
1 F
(:) 141.22 520.17 T
(SHAPE) 153 520.17 T
3 F
(params_intr) 87.17 508.17 T
(o) 136.22 508.17 T
1 F
(:) 141.22 508.17 T
(LIST\050T) 153 508.17 T
(AGSHACC\051) 182.73 508.17 T
3 F
(var_intr) 103.83 496.17 T
(o) 136.22 496.17 T
1 F
(:) 141.22 496.17 T
(OPTION\050T) 153 496.17 T
(AGACC\051) 198.27 496.17 T
3 F
(body) 121.79 484.17 T
1 F
(:) 141.22 484.17 T
(EXP BOTT) 153 484.17 T
(OM) 200.29 484.17 T
2 F
(\256) 144 468.17 T
4 F
(EXP PROC) 162 468.17 T
1 F
-0.12 (The) 72 450.17 P
3 F
-0.12 (params_intr) 89.92 450.17 P
-0.12 (o) 138.97 450.17 P
1 F
-0.12 ( and) 143.97 450.17 P
3 F
-0.12 (var_intr) 163.16 450.17 P
-0.12 (o) 195.55 450.17 P
1 F
-0.12 ( parameters introduce the formal parameters of the procedure which may be used) 200.55 450.17 P
1.13 (in) 72 438.17 P
3 F
1.13 (body) 83.4 438.17 P
1 F
1.13 (. The procedure result will have SHAPE) 102.18 438.17 P
3 F
1.13 (r) 273.86 438.17 P
1.13 (esult_shape) 277.37 438.17 P
1 F
1.13 ( and will be given by some) 324.57 438.17 P
0 F
1.13 (r) 442.68 438.17 P
1.13 (eturn) 446.94 438.17 P
1 F
1.13 ( construction) 470.26 438.17 P
0.11 (within) 72 426.17 P
3 F
0.11 (body) 100.16 426.17 P
1 F
0.11 ( \050section 4.1.2 on page 19\051. The basic model is that space will be provided to copy actual parameters) 119.59 426.17 P
0.38 (\050supplied by some) 72 414.17 P
0 F
0.38 (apply_pr) 148.91 414.17 P
0.38 (oc) 187.61 414.17 P
1 F
0.38 ( \050S5.14.5\051\051 by value into these formals and the body will treat this space as local) 197.05 414.17 P
(variables.) 72 402.17 T
0.16 (The straightforward formal parameters are introduced by a LIST of auxiliary SOR) 72 380.17 P
0.16 (T T) 402.03 380.17 P
0.16 (AGSHACC \050S5.36\051 which) 416.1 380.17 P
0.15 (gives the T) 72 368.17 P
0.15 (AG to be used for the formal parameter within body together with SHAPE and access information. A) 115.92 368.17 P
(T) 72 356.17 T
(AGSHACC is constructed using make_tagshacc \050S5.36.1\051:) 77.31 356.17 T
3 F
(sha) 127.34 334.17 T
1 F
(:) 141.22 334.17 T
(SHAPE) 153 334.17 T
3 F
(opt_access) 97.37 322.17 T
1 F
(:) 141.22 322.17 T
(OPTION\050LIST\050ACCESS\051\051) 153 322.17 T
3 F
(tg_intr) 109.38 310.17 T
(o) 136.22 310.17 T
1 F
(:) 141.22 310.17 T
(T) 153 310.17 T
(AG POINTER\050alignment\050) 158.31 310.17 T
3 F
(sha) 264.07 310.17 T
1 F
(\051\051) 277.95 310.17 T
2 F
(\256) 144 294.17 T
4 F
(T) 162 294.17 T
(AGSHACC) 167.37 294.17 T
1 F
0.69 (W) 72 276.17 P
0.69 (ithin) 81.04 276.17 P
3 F
0.69 (body) 102.56 276.17 P
1 F
0.69 (, the formal will be accessed using) 121.34 276.17 P
3 F
0.69 (tg_intr) 266.63 276.17 P
0.69 (o) 293.48 276.17 P
1 F
0.69 (; it is always considered to be a pointer to the space of) 298.48 276.17 P
(SHAPE) 72 264.17 T
3 F
(sha) 106.15 264.17 T
1 F
( allocated by) 120.03 264.17 T
0 F
(apply_pr) 173.6 264.17 T
(oc) 212.3 264.17 T
1 F
(, hence the pointer SHAPE.) 221.74 264.17 T
0.42 (For example, if we had a simple procedure with one integer parameter) 72 242.17 P
0.42 (,) 357.09 242.17 P
3 F
0.42 (var_intr) 362.5 242.17 P
0.42 (o) 394.89 242.17 P
1 F
0.42 ( would be empty and) 399.89 242.17 P
3 F
0.42 (params_) 488.32 242.17 P
(intr) 72 230.17 T
(o) 86.07 230.17 T
1 F
( might be:) 91.07 230.17 T
7 F
(params_intro) 108 208.17 T
4 F
( =) 166.32 208.17 T
0 F
(make_tagshacc) 177.71 208.17 T
7 F
(\050) 242.67 208.17 T
0 F
( integer) 245.99 208.17 T
4 F
(\050v\051, empty) 278.47 208.17 T
(,) 322.15 208.17 T
0 F
(make_tag) 327.71 208.17 T
4 F
(\05013\051\051) 369.35 208.17 T
1 F
1.53 (Then, T) 72 193.17 P
1.53 (AG 13 from the enclosing UNIT\325) 104.37 193.17 P
1.53 (s name-space is identi\336ed with the formal parameter with SHAPE) 245.54 193.17 P
0.98 (POINTER\050INTEGER\050v\051\051. Any use of) 72 181.17 P
0 F
0.98 (obtain_tag) 230.52 181.17 P
1 F
0.98 (\050) 276.05 181.17 P
0 F
0.98 (make_tag) 279.38 181.17 P
1 F
0.98 (\05013\051\051 in) 321.02 181.17 P
3 F
0.98 (body) 355.73 181.17 P
1 F
0.98 ( will deliver a pointer to the integer) 375.16 181.17 P
1.04 (parameter) 72 169.17 P
1.04 (. I shall return to the meaning of) 111.41 169.17 P
3 F
1.04 (opt_access) 251.06 169.17 P
1 F
1.04 ( and the rami\336cations of the scope and extent of T) 294.92 169.17 P
1.04 (AGs) 504.98 169.17 P
(involved in conjunction with local declarations in section 4.2.1 on page 19.) 72 157.17 T
FMENDPAGE
%%EndPage: "18" 24
%%Page: "19" 24
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 19) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 F
0 X
(5.1.2) 72 763.23 T
(apply_pr) 108 763.23 T
(oc, r) 146.7 763.23 T
(eturn) 165.39 763.23 T
1 F
(Procedures are called) 72 746.23 T
1 8 Q
(1) 157.47 750.23 T
1 10 Q
( using) 161.47 746.23 T
0 F
(apply_pr) 188.13 746.23 T
(oc) 226.82 746.23 T
1 F
( \050S5.14.5\051:) 236.26 746.23 T
3 F
(r) 90.51 724.23 T
(esult_shape) 94.03 724.23 T
1 F
(:) 141.22 724.23 T
(SHAPE) 153 724.23 T
3 F
(ar) 122.71 712.23 T
(g1) 131.23 712.23 T
1 F
(:) 141.22 712.23 T
(EXP PROC) 153 712.23 T
3 F
(ar) 122.71 700.23 T
(g2) 131.23 700.23 T
1 F
(:) 141.22 700.23 T
(LIST\050EXP\051) 153 700.23 T
3 F
(varparam) 101.8 688.23 T
1 F
(:) 141.22 688.23 T
(OPTION\050EXP\051) 153 688.23 T
2 14 Q
(\256) 126 676.23 T
4 10 Q
( EXP) 139.81 676.23 T
7 F
(result_shape) 165.37 676.23 T
1 F
0.12 (Here) 72 661.23 P
3 F
0.12 (ar) 94.04 661.23 P
0.12 (g1) 102.56 661.23 P
1 F
0.12 ( is the procedure to be called and) 112.55 661.23 P
3 F
0.12 (ar) 247.89 661.23 P
0.12 (g2) 256.4 661.23 P
1 F
0.12 ( gives the actual parameters. The SHAPEs of these actuals must) 266.4 661.23 P
0.17 (correspond exactly to the) 72 649.23 P
3 F
0.17 (params_intr) 175.92 649.23 P
0.17 (o) 224.97 649.23 P
1 F
0.17 ( of the) 229.97 649.23 P
0 F
0.17 (make_pr) 258.51 649.23 P
0.17 (oc) 296.63 649.23 P
1 F
0.17 ( of the procedure. The SHAPE of the result of the call) 306.07 649.23 P
0.74 (is given by) 72 637.23 P
3 F
0.74 (r) 120.58 637.23 P
0.74 (esult_shape) 124.1 637.23 P
1 F
0.74 ( although the) 171.3 637.23 P
3 F
0.74 (body) 228.21 637.23 P
1 F
0.74 (of a) 250.87 637.23 P
0 F
0.74 (make_pr) 270.11 637.23 P
0.74 (oc) 308.24 637.23 P
1 F
0.74 ( always has SHAPE BOTT) 317.68 637.23 P
0.74 (OM; this is because its) 429.28 637.23 P
(evaluation normally terminates by giving the result of the procedure using a) 72 625.23 T
0 F
(r) 377.9 625.23 T
(eturn) 382.16 625.23 T
1 F
( \050S5.14.77\051:) 405.48 625.23 T
3 F
(ar) 122.71 603.23 T
(g1) 131.23 603.23 T
1 F
(:) 141.22 603.23 T
(EXP) 153 603.23 T
3 F
(x) 174.38 603.23 T
2 F
(\256) 144 587.23 T
4 F
(EXP BOTT) 162 587.23 T
(OM) 211.25 587.23 T
1 F
0.39 (Here) 72 569.23 P
3 F
0.39 (x) 94.31 569.23 P
1 F
0.39 ( must be identical to the) 98.74 569.23 P
3 F
0.39 (r) 199.34 569.23 P
0.39 (esult_shape) 202.86 569.23 P
1 F
0.39 ( of the call of the procedure There may be several) 250.05 569.23 P
0 F
0.39 ( r) 452.63 569.23 P
0.39 (eturn) 459.78 569.23 P
1 F
0.39 (s in body;) 483.09 569.23 P
0.38 (and the SHAPE) 72 557.23 P
3 F
0.38 (x) 138.92 557.23 P
1 F
0.38 ( in each will be the same as the SHAPE speci\336ed in the) 143.36 557.23 P
0 F
0.38 (apply_pr) 372.25 557.23 P
0.38 (oc) 410.95 557.23 P
1 F
0.38 ( and the the) 420.38 557.23 P
0 F
0.38 (make_pr) 470.73 557.23 P
0.38 (oc) 508.86 557.23 P
1 F
0.38 (..) 518.3 557.23 P
0.13 (Some languages allow dif) 72 545.23 P
0.13 (ferent types to be returned depending on the particular call. The producer must resolve) 175.76 545.23 P
0.58 (this issue. For example, C allows one to deliver void if the resulting value is not used. In TDF a dummy value) 72 533.23 P
(must be prvided at the return; for example) 72 521.23 T
0 F
(make_value) 242.99 521.23 T
1 F
(\050) 294.07 521.23 T
3 F
(r) 297.4 521.23 T
(esult_shape) 300.91 521.23 T
1 F
(\051.) 348.11 521.23 T
0 F
(5.1.3) 72 495.23 T
6 F
(vartag) 108 495.23 T
0 F
(,) 134.1 495.23 T
6 F
(varparam) 139.09 495.23 T
1 F
0.96 (Use of the) 72 478.23 P
3 F
0.96 (var_option) 118.46 478.23 P
1 F
0.96 ( OPTION in) 162.33 478.23 P
0 F
0.96 (make_pr) 217.13 478.23 P
0.96 (oc) 255.26 478.23 P
1 F
0.96 ( and the corresponding) 264.69 478.23 P
3 F
0.96 (varparam) 362.36 478.23 P
1 F
0.96 ( in) 401.78 478.23 P
0 F
0.96 (apply_pr) 416.48 478.23 P
0.96 (oc) 455.17 478.23 P
1 F
0.96 ( allows one to) 464.61 478.23 P
0.51 (have an inde\336nite number of extra parameters of possibly dif) 72 466.23 P
0.51 (ferent SHAPEs to the procedure, where the actual) 320.42 466.23 P
0.17 (number and SHAPEs can be deduced in some way by the) 72 454.23 P
3 F
0.17 (body) 306.24 454.23 P
1 F
0.17 ( of the) 325.67 454.23 P
0 F
0.17 (make_pr) 354.22 454.23 P
0.17 (oc) 392.35 454.23 P
1 F
0.17 ( \050cf. printf in C\051. One supplies) 401.78 454.23 P
-0.2 (an extra actual parameter) 72 442.23 P
-0.2 (,) 171.73 442.23 P
3 F
-0.2 (varparam) 176.53 442.23 P
1 F
-0.2 (, which usually would be a structure grouping the extra parameters. The body) 215.94 442.23 P
0.09 (of the procedure can then access these values using the pointer given by the T) 72 430.23 P
0.09 (AG given in) 383.29 430.23 P
3 F
0.09 (var_intr) 435.47 430.23 P
0.09 (o) 467.86 430.23 P
1 F
0.09 (, using) 472.86 430.23 P
0 F
0.09 (add_) 502.19 430.23 P
(to_ptr) 72 418.23 T
1 F
( with some computed of) 98.64 418.23 T
(fsets to pick out the individual \336elds which are the extra parameters.) 195.07 418.23 T
72 382.89 523.3 392.9 C
72 382.89 523.3 392.9 R
7 X
0 K
V
72 391.89 541.01 391.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 358.88 523.3 368.89 C
72 358.88 523.3 368.89 R
7 X
0 K
V
72 367.88 541.01 367.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(5.2) 72 373.56 T
(De\336ning and using locals) 108 373.56 T
0 10 Q
(5.2.1) 72 336.22 T
(identify) 108 336.22 T
(, variable) 140.21 336.22 T
1 F
0.8 (Local de\336nitions within the) 72 319.22 P
3 F
0.8 (body) 187.91 319.22 P
1 F
0.8 ( of a procedure are given by two EXP constructors which permit one to give) 207.34 319.22 P
-0.2 (names to values over a scope given by the de\336nition. Note that this is somewhat dif) 72 307.22 P
-0.2 (ferent to declarations in stand-) 402.52 307.22 P
1.07 (ard languages where the declaration is usually embedded in a lar) 72 295.22 P
1.07 (ger construct which de\336nes the scope of the) 340.66 295.22 P
0.08 (name; here the scope is explicit in the de\336nition. The reason for this will become more obvious in the discussion) 72 283.22 P
(of TDF transformations. The simpler constructor is) 72 271.22 T
0 F
(identify) 279.09 271.22 T
1 F
( \050S5.14.33\051:) 311.85 271.22 T
3 F
(opt_access) 97.37 249.22 T
1 F
(:) 141.22 249.22 T
(OPTION\050ACCESS\051) 153 249.22 T
3 F
(name_intr) 95.51 237.22 T
(o) 136.22 237.22 T
1 F
(:) 141.22 237.22 T
(T) 153 237.22 T
(AG) 158.31 237.22 T
3 F
( x) 172.74 237.22 T
(de\336nition) 103.46 225.22 T
1 F
(:) 141.22 225.22 T
(EXP) 153 225.22 T
3 F
(x) 174.38 225.22 T
(body) 121.79 213.22 T
1 F
(:) 141.22 213.22 T
( EXP) 153 213.22 T
3 F
(y) 176.88 213.22 T
2 F
(\256) 144 197.22 T
4 F
(EXP) 162 197.22 T
7 F
( y) 182 197.22 T
1 F
0.6 (The) 72 179.22 P
3 F
0.6 (de\336nition) 90.64 179.22 P
1 F
0.6 ( is evaluated and its result is identi\336ed with the T) 128.4 179.22 P
0.6 (AG given by) 330.2 179.22 P
3 F
0.6 (name_intr) 386.14 179.22 P
0.6 (o) 426.86 179.22 P
1 F
0.6 ( within its scope) 431.86 179.22 P
3 F
0.6 (body) 502.02 179.22 P
1 F
0.6 (.) 520.8 179.22 P
1.37 (Hence the use of any) 72 167.22 P
0 F
1.37 (obtain_tag) 165.17 167.22 P
1 F
1.37 (\050) 210.7 167.22 P
3 F
1.37 (name_intr) 214.03 167.22 P
1.37 (o) 254.75 167.22 P
1 F
1.37 (\051 within) 259.74 167.22 P
3 F
1.37 (body) 296.36 167.22 P
1 F
1.37 ( is equivalent to using this result. Anywhere else,) 315.79 167.22 P
0 F
(obtain_tag) 72 155.22 T
1 F
(\050) 117.54 155.22 T
3 F
(name_intr) 120.86 155.22 T
(o) 161.58 155.22 T
1 F
(\051 is meaningless, including in other procedures.) 166.58 155.22 T
72 82 523.3 96.98 C
72 82 523.3 96.98 R
7 X
0 K
V
81 94.96 225 94.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. There may be other methods of calling and de\336ning procedures in further extensions to TDF) 90 76.67 T
FMENDPAGE
%%EndPage: "19" 25
%%Page: "20" 25
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 20) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
(The other kind of local de\336nition is) 72 763.23 T
0 F
( variable) 213.58 763.23 T
1 F
(\050S5.14.84\051:) 253.56 763.23 T
3 F
(opt_access) 97.37 741.23 T
1 F
(:) 141.22 741.23 T
(OPTION\050ACCESS\051) 153 741.23 T
3 F
(name_intr) 95.51 729.23 T
(o) 136.22 729.23 T
1 F
(:) 141.22 729.23 T
(T) 153 729.23 T
(AG) 158.31 729.23 T
3 F
( x) 172.74 729.23 T
(init) 127.89 717.23 T
1 F
(:) 141.22 717.23 T
(EXP) 153 717.23 T
3 F
(x) 174.38 717.23 T
(body) 121.79 705.23 T
1 F
(:) 141.22 705.23 T
( EXP) 153 705.23 T
3 F
(y) 176.88 705.23 T
2 F
(\256) 144 689.23 T
4 F
(EXP) 162 689.23 T
7 F
( y) 182 689.23 T
1 F
0.54 (Here the) 72 671.23 P
3 F
0.54 (init) 109.71 671.23 P
1 F
0.54 ( EXP is evaluated and its result serves as an initialisation of space of SHAPE) 123.04 671.23 P
3 F
0.54 (x) 441.76 671.23 P
1 F
0.54 ( local to the proce-) 446.2 671.23 P
0.65 (dure. The T) 72 659.23 P
0.65 (AG name_intro is then identi\336ed with a pointer to that SP) 119.4 659.23 P
0.65 (ACE within body) 355.97 659.23 P
0.65 (. A use of) 427.14 659.23 P
0 F
0.65 (obtain_tag) 471.1 659.23 P
1 F
0.65 (\050-) 516.64 659.23 P
3 F
2.58 (name_intr) 72 647.23 P
2.58 (o) 112.72 647.23 P
1 F
2.58 (\051 within) 117.71 647.23 P
3 F
2.58 (body) 156.76 647.23 P
1 F
2.58 ( is equivalent to using this pointer and is meaningless outside) 176.18 647.23 P
3 F
2.58 (body) 451.98 647.23 P
1 F
2.58 ( or in other) 471.41 647.23 P
-0.13 (procedures. Many variable declarations in programs are uninitialised; in this case, the) 72 635.23 P
3 F
-0.13 (init) 414.63 635.23 P
1 F
-0.13 ( ar) 427.96 635.23 P
-0.13 (gument could be pro-) 437.91 635.23 P
(vided by) 72 623.23 T
0 F
(make_value) 109.2 623.23 T
1 F
( \050S5.14.52\051which will produce some value with SHAPE given by its parameter) 160.28 623.23 T
(.) 475.36 623.23 T
0 F
(5.2.2) 72 597.23 T
(Locals model and ACCESS) 108 597.23 T
1 F
0.5 (The ACCESS SOR) 72 580.23 P
0.5 (T \050S5.1\051 given in tag declarations is a way of describing a list of properties to be associated) 150.14 580.23 P
0.87 (with the tag. At the moment there are just three possibilities, but others are invisaged in the future) 72 568.23 P
1 8 Q
0.69 (1) 477.32 572.23 P
1 10 Q
0.87 (. They are) 481.32 568.23 P
0 F
1.78 (standard_access) 72 556.23 P
1 F
1.78 ( \050the default\051 ,) 141.4 556.23 P
0 F
1.78 (visible) 207.63 556.23 P
1 F
1.78 ( and) 234.85 556.23 P
0 F
1.78 (long_jump_access) 257.83 556.23 P
1 F
1.78 (. Any of these can be combined using) 335.01 556.23 P
0 F
1.78 (add_) 502.19 556.23 P
(access) 72 544.23 T
1 F
(.) 98.09 544.23 T
0.25 (The basic model used for the locals and parameters of a procedure is a frame within a stack of nested procedure) 72 522.23 P
0.85 (calls. One could implement a procedure by allocating space according to SHAPEs of all of the parameter and) 72 510.23 P
(local T) 72 498.23 T
(AGs so that the corresponding values are at \336xed of) 99.24 498.23 T
(fsets from the start of the frame.) 306.4 498.23 T
0.09 (Indeed, if the ACCESS) 72 476.23 P
3 F
0.09 (opt_access) 168.15 476.23 P
1 F
0.09 (parameter in a T) 214.59 476.23 P
0.09 (AG de\336nition is produced by) 279.84 476.23 P
0 F
0.09 (visible) 399.4 476.23 P
1 F
0.09 ( \050S5.1.6\051, then a transla-) 426.61 476.23 P
0.68 (tor is almost bound to do just that for that T) 72 464.23 P
0.68 (AG. This is because it allows for the possibility of the value to be) 252.37 464.23 P
0.83 (accessed in some way other than by using) 72 452.23 P
0 F
0.83 (obtain_tag) 248.51 452.23 P
1 F
0.83 ( \050S5.14.59\051 which is the standard way of recovering the) 294.05 452.23 P
0.49 (value bound to the T) 72 440.23 P
0.49 (AG. The principal way that this could happen within TDF is by the combined use of) 155.9 440.23 P
0 F
0.49 (env_) 503.31 440.23 P
0.25 (offset) 72 428.23 P
1 F
0.25 ( \050S5.14.21\051 to give the of) 95.31 428.23 P
0.25 (fset and) 196.59 428.23 P
0 F
0.25 (curr) 230.95 428.23 P
0.25 (ent_env) 249.64 428.23 P
1 F
0.25 ( \050S5.14.18\051 to give a pointer to the current frame. These are) 282.95 428.23 P
(ef) 72 416.23 T
(fectively de\336ned by the following identities:) 79.59 416.23 T
4 F
(If T) 108 394.23 T
(AG t is derived from a) 121.7 394.23 T
0 F
(variable) 221.13 394.23 T
4 F
( de\336nition or is a parameter:) 256.11 394.23 T
0 F
(add_to_ptr) 126 379.23 T
4 F
(\050) 173.75 379.23 T
0 F
(curr) 177.08 379.23 T
(ent_env) 195.77 379.23 T
4 F
(\050\051,) 229.08 379.23 T
0 F
(env_offset) 241.3 379.23 T
4 F
(\050t\051\051 =) 284.59 379.23 T
0 F
(obtain_tag) 308.75 379.23 T
4 F
(\050t\051) 354.29 379.23 T
(and if T) 108 364.23 T
(AG t is derived from an) 140.59 364.23 T
0 F
(identify) 245.57 364.23 T
4 F
( de\336nition:) 278.34 364.23 T
0 F
(contents) 126 349.23 T
4 F
(\050shape\050t\051,) 161.53 349.23 T
0 F
(add_to_ptr) 207.07 349.23 T
4 F
(\050) 254.83 349.23 T
0 F
(curr) 258.16 349.23 T
(ent_env) 276.85 349.23 T
4 F
(\050\051,) 310.16 349.23 T
0 F
(env_offset) 322.37 349.23 T
4 F
(\050t\051\051\051 =) 365.67 349.23 T
0 F
(obtain_tag) 393.15 349.23 T
4 F
(\050t\051) 438.69 349.23 T
1 F
0.47 (These identities are valid throughout the extent of t, including in inner procedure calls. In other words, one can) 72 334.23 P
(dynamically create a pointer to the value by composing) 72 322.23 T
0 F
(curr) 296.01 322.23 T
(ent_env) 314.7 322.23 T
1 F
( and) 348.01 322.23 T
0 F
(env_offset) 367.44 322.23 T
1 F
(.) 410.73 322.23 T
0.28 (The importance of this is that) 72 300.23 P
0 F
0.28 (env_offset) 193.57 300.23 P
1 F
0.28 (\050t\051 is a constant OFFSET and can be used anywhere with the enclosing) 236.87 300.23 P
1.06 (CAPSULE) 72 288.23 P
1 8 Q
0.85 (2) 116.43 292.23 P
1 10 Q
1.06 (, in other procedures or as part of constant T) 120.42 288.23 P
1.06 (AGDEF; remember that the TDFINT underlying t is) 306.27 288.23 P
0.14 (unique within the UNIT) 72 276.23 P
0.14 (. The result of a) 167.99 276.23 P
0 F
0.14 (curr) 234.17 276.23 P
0.14 (ent_env) 252.86 276.23 P
1 F
0.14 ( could be passed to another procedure \050as a parameter) 286.17 276.23 P
0.14 (, say\051) 501.51 276.23 P
1.4 (and this new procedure could then access a local of the original by using its) 72 264.23 P
0 F
1.4 (env_offset) 397.5 264.23 P
1 F
1.4 (. This would be the) 440.8 264.23 P
0.09 (method one would use to access non-local, non-global identi\336ers in a language which allowed one to de\336ne pro-) 72 252.23 P
0.55 (cedures within procedures such as Pascal or Algol. Of course, given the stack-based model, the value given by) 72 240.23 P
0 F
(curr) 72 228.23 T
(ent_env) 90.69 228.23 T
1 F
( becomes meaningless once the procedure in which it is invoked is exited.) 124 228.23 T
0.42 (The) 72 206.23 P
0 F
0.42 (long_jump_access) 90.46 206.23 P
1 F
0.42 ( \337ag is used to indicate that the tag must be available after a) 167.64 206.23 P
0 F
0.42 (long_jump) 415.02 206.23 P
1 F
0.42 ( \050S5.14.40\051\051. In) 461.11 206.23 P
0.48 (practice, if either) 72 194.23 P
0 F
0.48 (visible) 143.94 194.23 P
1 F
0.48 ( or) 171.16 194.23 P
0 F
0.48 (long_jump_access) 185.44 194.23 P
1 F
0.48 ( is set, most translators would allocate the space for the declara-) 262.62 194.23 P
0.42 (tion on the main-store stack rather than in an available register) 72 182.23 P
0.42 (. If it is not set, then a translator is free to use its) 325.46 182.23 P
-0.14 (own criteria for whether space which can \336t into a register is allocated on the stack or in a register) 72 170.23 P
-0.14 (, provided there) 460.57 170.23 P
(is no observable dif) 72 158.23 T
(ference \050other than time or program size\051 between the two possibilities.) 150.38 158.23 T
0.26 ( Some of these criteria are rather obvious; for example, if a pointer to local variable is passed outside the proce-) 72 136.23 P
-0.16 (dure in an opaque manner) 72 124.23 P
-0.16 (, then it is highly unlikely that one can allocate the variable in a register) 174.78 124.23 P
-0.16 (. Some might be) 458.24 124.23 P
0.08 (less obvious. If the only uses of a T) 72 112.23 P
0.08 (AG t was in) 213.68 112.23 P
0 F
0.08 (obtain_tag) 264.52 112.23 P
1 F
0.08 (\050t\051s which are operands of) 310.05 112.23 P
0 F
0.08 (content) 417.3 112.23 P
1 F
0.08 (s \050S5.14.16\051 or the) 448.94 112.23 P
72 92 523.3 106.98 C
72 92 523.3 106.98 R
7 X
0 K
V
81 104.96 225 104.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. For example, \322this is a read only pointer\323, \322this tag is not aliased\323 etc. would be useful in translator optimisations.) 90 86.67 T
(2. If it was not in the current UNIT) 90 76.67 T
(, one would have to arrange to link it using a LINK.) 201.55 76.67 T
FMENDPAGE
%%EndPage: "20" 26
%%Page: "21" 26
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 21) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
-0.07 (left-hand operands of) 72 763.23 P
0 F
-0.07 (assign) 159.76 763.23 P
1 F
-0.07 (s \050S5.14.6\051, most ABIs would allow the tag to be placed in a register) 185.86 763.23 P
-0.07 (. W) 458.06 763.23 P
-0.07 (e do not nec-) 471.62 763.23 P
(essarily have to generate a pointer value if it can be subsumed by the operations available.) 72 751.23 T
0 F
(5.2.3) 72 725.23 T
(local_alloc, local_fr) 108 725.23 T
(ee_all, last_local) 190.54 725.23 T
1 F
-0.08 (The size of stack frame produced by) 72 708.23 P
0 F
-0.08 (variable) 219.34 708.23 P
1 F
-0.08 ( and) 254.32 708.23 P
0 F
-0.08 (identify) 273.58 708.23 P
1 F
-0.08 ( de\336nitions is a translate-time constant since the frame) 306.34 708.23 P
1.4 (is composed of values whose SHAPEs are known. TDF also allows one to produce dynamically sized local) 72 696.23 P
(objects which are conceptually part of the frame. These are produced by) 72 684.23 T
0 F
(local_alloc) 363.14 684.23 T
1 F
( \050S5.14.37\051:) 408.11 684.23 T
3 F
(ar) 122.71 662.23 T
(g1) 131.23 662.23 T
1 F
(:) 141.22 662.23 T
(EXP OFFSET\050) 153 662.23 T
3 F
(x, y) 213.81 662.23 T
1 F
(\051) 227.68 662.23 T
2 F
(\256) 144 646.23 T
4 F
(EXP POINTER\050alloca_alignment\051) 162 646.23 T
1 F
0.24 (The operand) 72 628.23 P
3 F
0.24 (ar) 125.22 628.23 P
0.24 (g1) 133.73 628.23 P
1 F
0.24 ( gives the size of the new object required and the result is a pointer to the space for this object) 143.73 628.23 P
0.65 (\322on top of the stack\323 as part of the frame. The quotation marks indicate that a translator writer might prefer to) 72 616.23 P
-0.11 (maintain a dynamic stack as well as static one. There are some disadvantages in putting everything into one stack) 72 604.23 P
0.95 (which may well out-weigh the trouble of maintaining another stack which is relatively infrequently used. If a) 72 592.23 P
0.04 (frame has a known size, then all addressing of locals can be done using a stack-front register; if it is dynamically) 72 580.23 P
0.33 (sized, then another frame-pointer register must be used - some ABIs make this easy but not all. The majority of) 72 568.23 P
-0.23 (procedures contain no) 72 556.23 P
0 F
-0.23 (local_alloc) 162.07 556.23 P
1 F
-0.23 (s, so their addressing of locals can always be done relative to a stack-front; only) 207.04 556.23 P
(the others have to use another register for a frame pointer) 72 544.23 T
(.) 300.7 544.23 T
(The alignment of pointer result is alloca_alignment which must include all SHAPE alignments.) 72 522.23 T
0.65 (There are two constructors for releasing space generated by) 72 500.23 P
0 F
0.65 (local_alloc) 318.48 500.23 P
1 F
0.65 (. T) 363.46 500.23 P
0.65 (o release all such space generated in) 374.52 500.23 P
0.22 (the current procedure one does) 72 488.23 P
0 F
0.22 (local_fr) 198.83 488.23 P
0.22 (ee_all) 231.4 488.23 P
1 F
0.22 (\050\051 \050S5.14.39\051; this reduces the size of the current frame to its static) 255.83 488.23 P
(size.) 72 476.23 T
(The other constructor is) 72 454.23 T
0 F
(local_fr) 169.71 454.23 T
(ee) 202.28 454.23 T
1 F
( \050S5.14.38\051 whch is ef) 211.15 454.23 T
(fectively a \322pop\323 to) 299.24 454.23 T
0 F
(local_alloc) 380.29 454.23 T
1 F
(\325) 425.27 454.23 T
(s \322push\323:) 428.04 454.23 T
(a:) 136.78 432.23 T
(EXP OFFSET\050) 153 432.23 T
3 F
(x) 213.81 432.23 T
1 F
(,) 218.24 432.23 T
3 F
(y) 223.24 432.23 T
1 F
(\051) 227.68 432.23 T
3 F
(p) 136.22 420.23 T
1 F
(:) 141.22 420.23 T
( EXP POINTER\050alloca_alignment\051) 153 420.23 T
2 F
(\256) 144 404.23 T
4 F
(EXP T) 162 404.23 T
(OP) 190.7 404.23 T
1 F
-0.08 (Here) 72 386.23 P
3 F
-0.08 (p) 93.84 386.23 P
1 F
-0.08 ( must evaluate to a pointer generated either by) 98.83 386.23 P
0 F
-0.08 (local_alloc) 285.48 386.23 P
1 F
-0.08 ( or) 330.45 386.23 P
0 F
-0.08 (last_local) 343.61 386.23 P
1 F
-0.08 ( \050S5.14.36\051. The ef) 383.59 386.23 P
-0.08 (fect is to free all) 458.67 386.23 P
-0.09 (of the space locally allocated after p. The usual implementation \050with a downward growing stack\051 of this is that p) 72 374.23 P
(becomes the \322top of stack\323 pointer) 72 362.23 T
1 8 Q
(1) 210.5 366.23 T
1 10 Q
(.) 214.5 362.23 T
72 326.89 523.3 336.9 C
72 326.89 523.3 336.9 R
7 X
0 K
V
72 335.89 541.01 335.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 302.88 523.3 312.89 C
72 302.88 523.3 312.89 R
7 X
0 K
V
72 311.88 541.01 311.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(5.3) 72 317.56 T
(Heap storage) 108 317.56 T
1 10 Q
0.8 (At the moment, there are no explicit constructors of creating dynamic of) 72 286.22 P
0.8 (f-stack storage in TDF) 369.84 286.22 P
0.8 (. Any of) 461.65 286.22 P
0.8 (f-stack) 496.1 286.22 P
0.75 (storage requirements must be met by the API in which the system is embedded, using the standard procedural) 72 274.22 P
0.11 (interface. For example, the ANSI C API allows the creation of heap space using standard library procedures like) 72 262.22 P
(malloc.) 72 250.22 T
72 92 523.3 106.98 C
72 92 523.3 106.98 R
7 X
0 K
V
81 104.96 225 104.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
-0.03 (1. The speci\336cation of TDF will probably be extended to allow more complex means of creating and freeing local dynamic space, so) 90 86.67 P
(watch this space.) 90 76.67 T
FMENDPAGE
%%EndPage: "21" 27
%%Page: "22" 27
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 22) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(6) 72 741.88 T
(Contr) 99 741.88 T
(ol Flow within pr) 159.85 741.88 T
(ocedur) 336.01 741.88 T
(es) 406.2 741.88 T
72 661.84 523.3 671.85 C
72 661.84 523.3 671.85 R
7 X
0 K
V
72 670.84 541.01 670.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 637.84 523.3 647.84 C
72 637.84 523.3 647.84 R
7 X
0 K
V
72 646.84 541.01 646.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(6.1) 72 652.51 T
(Unconditional \337ow) 108 652.51 T
0 10 Q
(6.1.1) 72 615.17 T
(sequence) 108 615.17 T
1 F
(T) 72 598.17 T
(o perform a sequential set of operations in TDF) 77.41 598.17 T
(, one uses the constructor) 266.47 598.17 T
0 F
(sequence) 370.29 598.17 T
1 F
(\050S5.14.79\051:) 408.6 598.17 T
3 F
(statements) 99.03 576.17 T
1 F
(:) 141.22 576.17 T
(LIST\050EXP\051) 153 576.17 T
3 F
(r) 118.82 564.17 T
(esult) 122.34 564.17 T
1 F
(:) 141.22 564.17 T
(EXP) 153 564.17 T
3 F
(x) 174.38 564.17 T
2 F
(\256) 144 548.17 T
4 F
(EXP) 162 548.17 T
7 F
(x) 184.78 548.17 T
1 F
0.09 (Each of the) 72 530.17 P
3 F
0.09 (statements) 120.27 530.17 P
1 F
0.09 ( are evaluated in order) 162.47 530.17 P
0.09 (, throwing away their results. Then,) 251.78 530.17 P
3 F
0.09 (r) 396.92 530.17 P
0.09 (esult) 400.44 530.17 P
1 F
0.09 ( is evaluated and its result) 419.32 530.17 P
(is the result of the) 72 518.17 T
0 F
(sequence) 146.12 518.17 T
1 F
(.) 184.43 518.17 T
0.37 (A translator is free to rearrange the order of evaluation if there is no observable dif) 72 496.17 P
0.37 (ference other than in time or) 407.93 496.17 P
-0.05 (space. This applies anywhere I say \322something is evaluated and then ...\323. W) 72 484.17 P
-0.05 (e \336nd this kind of statement in de\336ni-) 373.44 484.17 P
0.92 (tions of local variables in section 4.2 on page 19, and in the controlling parts of the conditional constructions) 72 472.17 P
(below) 72 460.17 T
(.) 95.78 460.17 T
(For a more precise discussion of allowable reorderings see \050S7.14\051 .) 72 438.17 T
72 402.83 523.3 412.84 C
72 402.83 523.3 412.84 R
7 X
0 K
V
72 411.83 541.01 411.83 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 378.82 523.3 388.83 C
72 378.82 523.3 388.83 R
7 X
0 K
V
72 387.82 541.01 387.82 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(6.2) 72 393.5 T
(Conditional \337ow) 108 393.5 T
0 10 Q
(6.2.1) 72 356.15 T
(labelled, make_label) 108 356.15 T
1 F
-0.24 (All simple changes of \337ow of control within a TDF procedure are done by jumps or branches to LABELs, mirror-) 72 339.15 P
0.59 (ing what actually happens in most computers. There are three constructors which introduce LABELs; the most) 72 327.15 P
(general is) 72 315.15 T
0 F
(labelled) 113.08 315.15 T
1 F
( \050S5.14.35\051 which allows arbitrary jumping between its component EXPs:) 146.4 315.15 T
3 F
(placelabs_intr) 78.85 293.15 T
(o) 136.22 293.15 T
1 F
(:) 141.22 293.15 T
(LIST\050LABEL\051) 153 293.15 T
3 F
(starter) 114.57 281.15 T
1 F
(:) 141.22 281.15 T
(EXP) 153 281.15 T
3 F
(x) 174.38 281.15 T
(places) 115.69 269.15 T
1 F
(:) 141.22 269.15 T
(LIST\050EXP\051) 153 269.15 T
2 F
(\256) 144 253.15 T
4 F
(EXP) 162 253.15 T
7 F
(w) 184.78 253.15 T
1 F
0.21 (Each of the EXPs in) 72 235.15 P
3 F
0.21 (place) 156.6 235.15 P
1 F
0.21 (s is labelled by the corresponding LABEL in) 178.25 235.15 P
3 F
0.21 (place) 361.47 235.15 P
1 F
0.21 (labs_intro; these LABELs are con-) 383.12 235.15 P
-0.16 (structed by) 72 223.15 P
0 F
-0.16 (make_label) 118.31 223.15 P
1 F
-0.16 ( \050S5.19.2\051 applied to a TDFINT uniquely drawn from the LABEL name-space introduced) 167.17 223.15 P
0.44 (by the enclosing PROPS. The evaluation starts by evaluating) 72 211.15 P
3 F
0.44 (starter) 321.93 211.15 P
1 F
0.44 (; if this runs to completion the result of the) 348.59 211.15 P
0 F
0.5 (labelled) 72 199.15 P
1 F
0.5 ( is the result of) 105.32 199.15 P
3 F
0.5 (starter) 169.72 199.15 P
0.5 (.) 195.27 199.15 P
1 F
0.5 ( If there is some jump to a LABEL in) 197.77 199.15 P
3 F
0.5 ( placelabs_intr) 351.89 199.15 P
0.5 (o) 412.26 199.15 P
1 F
0.5 ( then control passes to the) 417.26 199.15 P
-0.17 (corresponding EXP in) 72 187.15 P
3 F
-0.17 (place) 162.83 187.15 P
1 F
-0.17 (s and so on. If any of these EXPS) 184.47 187.15 P
-0.17 (runs to completion then its result is the result of the) 319.54 187.15 P
0 F
(labelled) 72 175.15 T
1 F
(; hence the SHAPE of the result, w) 105.32 175.15 T
(, is the LUB of the SHAPEs of the component EXPs.) 244.57 175.15 T
0.45 (Note that control does not automatically pass from one EXP to the next; if this is required the appropriate EXP) 72 153.15 P
(must end with an explicit) 72 141.15 T
0 F
(goto) 175.55 141.15 T
1 F
(.) 193.87 141.15 T
FMENDPAGE
%%EndPage: "22" 28
%%Page: "23" 28
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 23) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 F
0 X
(6.2.2) 72 763.23 T
(goto, make_local_lv) 108 763.23 T
(, goto_local_lv) 191.84 763.23 T
(, long_jump) 252.37 763.23 T
1 F
0.29 (The unconditional) 72 746.23 P
0 F
0.29 (goto) 148.08 746.23 P
1 F
0.29 ( \050S5.14.31\051is the simplest method of jumping. In common with all the methods of jump-) 166.4 746.23 P
0.07 (ing using LABELs, its LABEL parameter must have been introduced in an enclosing construction, like) 72 734.23 P
0 F
0.07 (labelled) 487.48 734.23 P
1 F
0.07 (,) 520.8 734.23 P
(which scopes it.) 72 722.23 T
0.85 (One can also pick up a label value of SHAPE POINTER {code} \050usually implemented as a program address\051) 72 700.23 P
0.51 (using) 72 688.23 P
0 F
0.51 (make_local_lv) 96.67 688.23 P
1 F
0.51 ( \050S5.14.44\051 for later use by an \322indirect jump\323 such as) 157.75 688.23 P
0 F
0.51 (goto_local_lv) 381.85 688.23 P
1 F
0.51 ( \050S5.14.32\051. Here the) 437.93 688.23 P
(same prohibition holds - the construction which introduced the LABEL must still be active.) 72 676.23 T
1.02 (The construction) 72 654.23 P
0 F
1.02 (goto_local_lv) 144 654.23 P
1 F
1.02 ( only permits one to jump within the current procedure; if one wished to do a) 200.08 654.23 P
0.11 (jump out of a procedure into a calling one, one uses) 72 642.23 P
0 F
0.11 (long_jump) 282.54 642.23 P
1 F
0.11 ( \050S5.14.40\051 which requires a pointer to the desti-) 328.64 642.23 P
0.24 (nation frame \050produced by) 72 630.23 P
0 F
0.24 (curr) 181.75 630.23 P
0.24 (ent_env) 200.44 630.23 P
1 F
0.24 ( in the destination procedure\051 as well as the label value. If a) 233.75 630.23 P
0 F
0.24 (long_jump) 477.2 630.23 P
1 F
-0.23 (is made to a label, only those local T) 72 618.23 P
-0.23 (AGs which have been de\336ned with a) 216.24 618.23 P
0 F
-0.23 (visible) 364.26 618.23 P
1 F
-0.23 ( ACCESS) 391.47 618.23 P
-0.23 (are guaranteed to have) 433.79 618.23 P
0.88 (preserved their values; the translator could allocate the other T) 72 606.23 P
0.88 (AGs in scope as registers whose values are not) 329.19 606.23 P
(necessarily preserved.) 72 594.23 T
0 F
(6.2.3) 72 568.23 T
(integer_test, NTEST) 108 568.23 T
1 F
0.22 (Conditional branching is provided by the various) 72 551.23 P
0 F
0.22 (_test) 272.02 551.23 P
1 F
0.22 ( constructors, one for each primitive SHAPE except BIT-) 292 551.23 P
(FIELD. I shall use) 72 539.23 T
0 F
(integer_test) 148.34 539.23 T
1 F
( \050S5.14.34\051 as the paradigm for them all:) 198.29 539.23 T
3 F
(nt) 133.45 517.23 T
1 F
(:) 141.22 517.23 T
(NTEST) 153 517.23 T
3 F
(dest) 125.12 505.23 T
1 F
(:) 141.22 505.23 T
(LABEL) 153 505.23 T
3 F
(ar) 122.71 493.23 T
(g1) 131.23 493.23 T
1 F
(:) 141.22 493.23 T
(EXP INTEGER\050) 153 493.23 T
3 F
(v) 220.45 493.23 T
1 F
(\051) 224.89 493.23 T
3 F
(ar) 122.71 481.23 T
(g2) 131.23 481.23 T
1 F
(:) 141.22 481.23 T
(EXP INTEGER\050) 153 481.23 T
3 F
(v) 220.45 481.23 T
1 F
(\051) 224.89 481.23 T
2 F
(\256) 144 465.23 T
4 F
(EXP T) 162 465.23 T
(OP) 190.7 465.23 T
1 F
0.27 (The NTEST) 72 447.23 P
3 F
0.27 (nt) 124.18 447.23 P
1 F
0.27 ( \050S5.24\051 chooses a dyadic test \050e.g. =, >=, <, etc.\051 that is to be applied to the results of evaluating) 131.95 447.23 P
3 F
1.19 (ar) 72 435.23 P
1.19 (g1) 80.51 435.23 P
1 F
1.19 ( and) 90.51 435.23 P
3 F
1.19 (ar) 112.32 435.23 P
1.19 (g2) 120.83 435.23 P
1 F
1.19 (. If) 130.83 435.23 P
3 F
1.19 (ar) 147.36 435.23 P
1.19 (g1 nt ar) 155.87 435.23 P
1.19 (g2) 189.53 435.23 P
1 F
1.19 ( then the result is T) 199.53 435.23 P
1.19 (OP; otherwise control passes to the LABEL) 282.19 435.23 P
3 F
1.19 (dest) 468.46 435.23 P
1 F
1.19 (. In other) 484.56 435.23 P
0.28 (words,) 72 423.23 P
0 F
0.28 (integer_test) 101.7 423.23 P
1 F
0.28 ( acts like an assertion where if the assertion is false, control passes to the LABEL instead of) 151.65 423.23 P
(continuing in the normal fashion.) 72 411.23 T
-0.02 (Some of the constructors for NTEST) 72 389.23 P
-0.02 (s are disallowed for some) 218.62 389.23 P
0 F
-0.02 (_test) 323.18 389.23 P
1 F
-0.02 (s \050e.g.) 343.16 389.23 P
0 F
-0.02 (pr) 369.77 389.23 P
-0.02 (oc_test) 379.59 389.23 P
1 F
-0.02 ( \050S5.14.73\051\051 while others are) 409 389.23 P
3.19 (redundant for some) 72 377.23 P
0 F
3.19 (_tests) 161.79 377.23 P
1 F
3.19 (; for example,) 185.65 377.23 P
0 F
3.19 (not_gr) 253.51 377.23 P
3.19 (eater_than) 281.65 377.23 P
1 F
3.19 ( \050S5.24.9\051is the same as) 327.72 377.23 P
0 F
3.19 (less_than_or_equal) 441.11 377.23 P
1 F
0.2 (\050S5.24.7\051 for all except possibly) 72 365.23 P
0 F
0.2 (\337oating_test) 203.74 365.23 P
1 F
0.2 (. where the use of NaNs \050in the IEEE sense\051 as operands may give) 255.93 365.23 P
(dif) 72 353.23 T
(ferent results.) 82.92 353.23 T
0 F
(6.2.4) 72 327.23 T
(case) 108 327.23 T
1 F
1.4 (There are only two other ways of changing \337ow of control using LABELs. One arises in ERROR_TREA) 72 310.23 P
1.4 (T-) 513.86 310.23 P
(MENT) 72 298.23 T
(s which will be dealt with in the arithmetic operations. The other is) 99.61 298.23 T
0 F
(case) 370 298.23 T
1 F
( \050S5.14.8\051:) 387.76 298.23 T
3 F
(exhaustive) 99.04 276.23 T
1 F
(:) 141.22 276.23 T
(BOOL) 153 276.23 T
3 F
(contr) 112.72 264.23 T
(ol) 133.45 264.23 T
1 F
(:) 141.22 264.23 T
(EXP INTEGER\050) 153 264.23 T
3 F
(v) 220.45 264.23 T
1 F
(\051) 224.89 264.23 T
3 F
(branches) 104.58 252.23 T
1 F
(:) 141.22 252.23 T
(LIST\050CASELIM\051) 153 252.23 T
2 F
(\256) 144 236.23 T
4 F
(EXP \050) 162 236.23 T
7 F
(exhaustive) 188.11 236.23 T
4 F
( ? BOTT) 235.88 236.23 T
(OM : T) 273.47 236.23 T
(OP\051) 303.83 236.23 T
1 F
(Each CASELIM is constructed using) 72 218.23 T
0 F
(make_caselim) 222.74 218.23 T
1 F
( \050S5.12.1\051:) 282.69 218.23 T
(branch:) 114.03 196.23 T
(LABEL) 153 196.23 T
(lower:) 118.46 184.23 T
(SIGNED_NA) 153 184.23 T
(T) 207.96 184.23 T
(upper:) 118.46 172.23 T
(SIGNED_NA) 153 172.23 T
(T) 207.96 172.23 T
2 F
(\256) 144 156.23 T
4 F
(CASELIM) 162 156.23 T
1 F
-0.06 (In the) 72 138.23 P
0 F
-0.06 (case) 97.42 138.23 P
1 F
-0.06 ( construction, the) 115.18 138.23 P
3 F
-0.06 ( contr) 184.18 138.23 P
-0.06 (ol) 207.35 138.23 P
1 F
-0.06 ( EXP is evaluated and tested to see whether its value lies inclusively between) 215.12 138.23 P
0.38 (some) 72 126.23 P
3 F
0.38 (lower) 95.97 126.23 P
1 F
0.38 ( and) 118.74 126.23 P
3 F
0.38 (upper) 138.92 126.23 P
1 F
0.38 (in the list of CASELIMs. If so, control passes to the corresponding) 165.11 126.23 P
3 F
0.38 (branch) 439.45 126.23 P
1 F
0.38 (. The order in) 467.77 126.23 P
0.22 (which these tests are performed is unde\336ned, so it is probably best if the tests are exclusive. The exhaustive \337ag) 72 114.23 P
0 (being true asserts that one of the branches will be taken and so the SHAPE of the result is BOTT) 72 102.23 P
0 (OM. Otherwise,) 458.61 102.23 P
(if none of the branches are taken, its SHAPE is T) 72 90.23 T
(OP and execution carries on normally) 268.62 90.23 T
(.) 419.25 90.23 T
FMENDPAGE
%%EndPage: "23" 29
%%Page: "24" 29
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 24) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 F
0 X
(6.2.5) 72 763.23 T
(conditional, r) 108 763.23 T
(epeat) 165.02 763.23 T
1 F
-0.1 (Besides) 72 746.23 P
0 F
-0.1 (labelled) 105.49 746.23 P
1 F
-0.1 (, two other constructors,) 138.81 746.23 P
0 F
-0.1 (conditional) 237.77 746.23 P
1 F
-0.1 ( and) 285.53 746.23 P
0 F
-0.1 (r) 304.75 746.23 P
-0.1 (epeat) 309.01 746.23 P
1 F
-0.1 (, introduce LABELs which can be used with the) 331.77 746.23 P
0.53 (various jump instructions. Both can be expressed as) 72 734.23 P
0 F
0.53 (labelled) 285.84 734.23 P
1 F
0.53 (, but have extra constraints which make assertions) 319.16 734.23 P
0.74 (about the use of the LABELs introduced and could usually be translated more ef) 72 722.23 P
0.74 (\336ciently; hence producers are) 403.13 722.23 P
0.46 (advised to use them where possible. A conditional expression or statement would usually be done using) 72 710.23 P
0 F
0.46 (condi-) 496.64 710.23 P
(tional) 72 698.23 T
1 F
(\050S5.14.15\051:) 98.93 698.23 T
3 F
(alt_label_intr) 81.61 676.23 T
(o) 136.22 676.23 T
1 F
(:) 141.22 676.23 T
(LABEL) 153 676.23 T
3 F
(\336rst) 125.67 664.23 T
1 F
(:) 141.22 664.23 T
(EXP) 153 664.23 T
3 F
(x) 174.38 664.23 T
(alt) 130.67 652.23 T
1 F
(:) 141.22 652.23 T
(EXP) 153 652.23 T
3 F
(y) 174.38 652.23 T
2 F
(\256) 144 636.23 T
4 F
(EXP\050LUB\050) 162 636.23 T
7 F
(x, y) 208.1 636.23 T
4 F
(\051\051) 223.65 636.23 T
1 F
0.19 (Here) 72 618.23 P
3 F
0.19 (\336rst) 94.11 618.23 P
1 F
0.19 ( is evaluated; if it terminates normally) 109.66 618.23 P
0.19 (, its result is the result of the) 262.3 618.23 P
0 F
0.19 (conditional) 379.62 618.23 P
1 F
0.19 (. If a jump to) 427.38 618.23 P
3 F
0.19 (alt_label_) 482.76 618.23 P
-0.17 (intr) 72 606.23 P
-0.17 (o) 86.07 606.23 P
1 F
-0.17 ( occurs then) 91.07 606.23 P
3 F
-0.17 (alt) 141.36 606.23 P
1 F
-0.17 ( is evaluated and its result is the result of the) 151.91 606.23 P
0 F
-0.17 (conditional) 330.23 606.23 P
1 F
-0.17 (. Clearly) 378 606.23 P
-0.17 (, this, so far) 411.6 606.23 P
-0.17 (, is just the same) 457.61 606.23 P
0.93 (as) 72 594.23 P
0 F
0.93 (labelled) 83.75 594.23 P
1 F
0.93 (\050\050) 117.07 594.23 P
3 F
0.93 (alt_label_intr) 123.73 594.23 P
0.93 (o) 178.34 594.23 P
1 F
0.93 (\051,) 183.34 594.23 P
3 F
0.93 (\336rst) 192.59 594.23 P
1 F
0.93 (, \050) 208.14 594.23 P
3 F
0.93 (alt) 217.39 594.23 P
1 F
0.93 (\051\051. However) 227.94 594.23 P
0.93 (,) 276.75 594.23 P
0 F
0.93 (conditional) 282.68 594.23 P
1 F
0.93 ( imposes the constraint that) 330.44 594.23 P
3 F
0.93 (alt) 446.95 594.23 P
1 F
0.93 ( cannot use) 457.5 594.23 P
3 F
0.93 (alt_) 507.74 594.23 P
(label_intr) 72 582.23 T
(o) 111.06 582.23 T
1 F
(. All jumps to) 116.06 582.23 T
3 F
(alt_label_intr) 173.53 582.23 T
(o) 228.14 582.23 T
1 F
( are \322forward jumps\323 - a useful property to know in a translator) 233.14 582.23 T
(.) 485.72 582.23 T
0.98 (Obviously) 72 560.23 P
0.98 (, this kind of conditional is rather dif) 113 560.23 P
0.98 (ferent to those found in traditional high-level languages which) 266.22 560.23 P
1.24 (usually have three components, a boolean expression, a then-part and an else-part. Here, the) 72 548.23 P
3 F
1.24 (\336rst) 459.59 548.23 P
1 F
1.24 ( component) 475.14 548.23 P
0.13 (includes both the boolean expression and the then-part; usually we \336nd that it is a) 72 536.23 P
0 F
0.13 (sequence) 402.32 536.23 P
1 F
0.13 ( of the tests \050branch-) 440.63 536.23 P
0.99 (ing to) 72 524.23 P
3 F
0.99 (alt_label_intr) 99.53 524.23 P
0.99 (o) 154.14 524.23 P
1 F
0.99 (\051 forming the boolean expression followed by the else-part. This formulation means that) 159.14 524.23 P
(HLL constructions like \322andif\323 and \322orelse\323 do not require special constructions in TDF) 72 512.23 T
(.) 424.28 512.23 T
(A simple loop can be expressed using) 72 490.23 T
0 F
(r) 225.51 490.23 T
(epeat) 229.76 490.23 T
1 F
( \050S5.14.76\051:) 252.52 490.23 T
3 F
(r) 72 468.23 T
(epeat_label_intr) 75.52 468.23 T
(o) 141.22 468.23 T
1 F
(:) 146.22 468.23 T
(LABEL) 153 468.23 T
3 F
(start) 122.89 456.23 T
1 F
(:) 141.22 456.23 T
(EXP T) 153 456.23 T
(OP) 180.3 456.23 T
3 F
(body) 121.79 444.23 T
1 F
(:) 141.22 444.23 T
(EXP) 153 444.23 T
3 F
(y) 174.38 444.23 T
2 F
(\256) 144 428.23 T
4 F
(EXP) 162 428.23 T
7 F
(y) 184.78 428.23 T
1 F
-0.02 (The EXP) 72 410.23 P
3 F
-0.02 (start) 111.37 410.23 P
1 F
-0.02 ( is evaluated, followed by) 129.71 410.23 P
3 F
-0.02 (body) 235.08 410.23 P
1 F
-0.02 ( which is labelled by) 254.51 410.23 P
3 F
-0.02 (r) 339.62 410.23 P
-0.02 (epeat_label_intr) 343.14 410.23 P
-0.02 (o) 408.85 410.23 P
1 F
-0.02 (. If a jump to) 413.84 410.23 P
3 F
-0.02 (r) 468.15 410.23 P
-0.02 (epeat_label_) 471.66 410.23 P
1.06 (intr) 72 398.23 P
1.06 (o) 86.07 398.23 P
1 F
1.06 ( occurs in) 91.07 398.23 P
3 F
1.06 (body) 135.6 398.23 P
1 F
1.06 (, then) 154.38 398.23 P
3 F
1.06 (body) 181.21 398.23 P
1 F
1.06 ( is re-evaluated. If) 200.63 398.23 P
3 F
1.06 (body) 280.08 398.23 P
1 F
1.06 ( terminates normally then its result is the result of the) 299.51 398.23 P
0 F
(r) 72 386.23 T
(epeat) 76.26 386.23 T
1 F
(. This is just the same as:) 99.01 386.23 T
0 F
(labelled) 108 364.23 T
4 F
(\050\050) 141.32 364.23 T
7 F
(repeat_label_intro) 147.98 364.23 T
4 F
(\051,) 227.97 364.23 T
0 F
(sequence) 236.86 364.23 T
4 F
(\050\050) 275.17 364.23 T
7 F
(start) 281.82 364.23 T
4 F
(\051,) 301.26 364.23 T
0 F
(goto) 310.15 364.23 T
4 F
(\050) 328.47 364.23 T
7 F
(repeat_label_intro) 331.8 364.23 T
4 F
(\051\051,) 411.79 364.23 T
7 F
(\050body) 424.01 364.23 T
4 F
(\051\051) 449 364.23 T
1 F
(except that no jumps to) 72 349.23 T
3 F
(r) 167.78 349.23 T
(epeat_label_intr) 171.29 349.23 T
(o) 237 349.23 T
1 F
( are allowed in) 242 349.23 T
3 F
(start) 303.61 349.23 T
1 F
( - a useful place to do initialisations for the loop.) 321.94 349.23 T
0.38 (Just as with conditionals, the tests for the continuating or breaking the loop are included in) 72 327.23 P
3 F
0.38 (body) 442.51 327.23 P
1 F
0.38 ( and require no) 461.94 327.23 P
(special constructions.) 72 315.23 T
FMENDPAGE
%%EndPage: "24" 30
%%Page: "25" 30
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 25) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(7) 72 741.88 T
(V) 99 741.88 T
(alues, variables and assignments.) 114.11 741.88 T
1 10 Q
0.27 (T) 72 665.19 P
0.27 (AGs in TDF ful\336l the role played by identi\336ers in most programming languages. One can apply) 77.31 665.19 P
0 F
0.27 (obtain_tag) 467.22 665.19 P
1 F
0.27 ( to) 512.75 665.19 P
0.38 (\336nd the value bound to the T) 72 653.19 P
0.38 (AG. This value is always a constant over the scope of a particular de\336nition of the) 188.96 653.19 P
0.73 (T) 72 641.19 P
0.73 (AG. This may sound rather strange to those used to the concepts of left-hand and right-hand values in C, for) 77.31 641.19 P
(example, but is quite easily explained as follows.) 72 629.19 T
-0.12 (If a T) 72 607.19 P
-0.12 (AG, id, is introduced by an) 93.16 607.19 P
0 F
-0.12 (identify) 203.49 607.19 P
1 F
-0.12 (, then the value bound is \336xed by its) 235.6 607.19 P
3 F
-0.12 (de\336nition) 381.67 607.19 P
1 F
-0.12 ( ar) 419.43 607.19 P
-0.12 (gument. If, on the other) 429.39 607.19 P
-0.17 (hand, v was a T) 72 595.19 P
-0.17 (AG introduced by a) 133.51 595.19 P
0 F
-0.17 (variable) 214.42 595.19 P
1 F
-0.17 ( de\336nition, then the value bound to v is a pointer to \336xed space in the) 249.4 595.19 P
(procedure frame \050i.e. the left-hand value in C\051.) 72 583.19 T
72 547.84 523.3 557.85 C
72 547.84 523.3 557.85 R
7 X
0 K
V
72 556.84 541.01 556.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 523.84 523.3 533.84 C
72 523.84 523.3 533.84 R
7 X
0 K
V
72 532.84 541.01 532.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(7.1) 72 538.51 T
(contents) 108 538.51 T
1 10 Q
0.13 (In order to get the contents of this space \050the right-hand value in C\051, one must apply the) 72 507.17 P
0 F
0.13 (contents) 426.59 507.17 P
1 F
0.13 ( operator to the) 462.12 507.17 P
(pointer:) 72 495.17 T
0 F
(contents) 108 473.17 T
4 F
(\050shape\050v\051,) 143.53 473.17 T
0 F
(obtain_tag) 191.29 473.17 T
4 F
(\050v\051\051) 236.83 473.17 T
1 F
(In general, the) 72 458.17 T
0 F
(contents) 131.95 458.17 T
1 F
(\050S5.14.16\051 constructor takes a SHAPE and an expression delivering pointer:) 167.48 458.17 T
3 F
(s) 137.33 436.17 T
1 F
(:) 141.22 436.17 T
(SHAPE) 153 436.17 T
3 F
(ar) 122.71 424.17 T
(g1) 131.23 424.17 T
1 F
(:) 141.22 424.17 T
(EXP POINTER\050) 153 424.17 T
3 F
(x) 219.9 424.17 T
1 F
(\051) 224.34 424.17 T
2 F
(\256) 144 408.17 T
4 F
(EXP) 162 408.17 T
7 F
(s) 184.78 408.17 T
1 F
-0.14 (It delivers the value of SHAPE) 72 390.17 P
3 F
-0.14 (s) 197.75 390.17 P
1 F
-0.14 (, pointed at by the evaluation of) 201.64 390.17 P
3 F
-0.14 (ar) 330.03 390.17 P
-0.14 (g1) 338.55 390.17 P
1 F
-0.14 (. The alignment of) 348.54 390.17 P
3 F
-0.14 (s) 424.33 390.17 P
1 F
-0.14 ( need not be identical to) 428.22 390.17 P
3 F
0.65 (x) 72 378.17 P
1 F
0.65 (. It only needs to be included in it; this would allow one, for example, to pick out the \336rst \336eld of a structure) 76.44 378.17 P
(from a pointer to it.) 72 366.17 T
72 330.83 523.3 340.84 C
72 330.83 523.3 340.84 R
7 X
0 K
V
72 339.83 541.01 339.83 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 306.82 523.3 316.83 C
72 306.82 523.3 316.83 R
7 X
0 K
V
72 315.82 541.01 315.82 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(7.2) 72 321.49 T
(assign) 108 321.49 T
1 10 Q
(A simple assignment in TDF is done using) 72 290.15 T
0 F
(assign) 245.24 290.15 T
1 F
( \050S5.14.6\051:) 271.35 290.15 T
3 F
(ar) 122.71 268.15 T
(g1) 131.23 268.15 T
1 F
(:) 141.22 268.15 T
(EXP POINTER\050) 153 268.15 T
3 F
(x) 219.9 268.15 T
1 F
(\051) 224.34 268.15 T
3 F
(ar) 122.71 256.15 T
(g2) 131.23 256.15 T
1 F
(:) 141.22 256.15 T
(EXP) 153 256.15 T
3 F
(y) 174.38 256.15 T
2 F
(\256) 144 240.15 T
4 F
(EXP T) 162 240.15 T
(OP) 190.7 240.15 T
1 F
-0.04 (The EXPs) 72 222.15 P
3 F
-0.04 (ar) 115.22 222.15 P
-0.04 (g1) 123.74 222.15 P
1 F
-0.04 ( and) 133.73 222.15 P
3 F
-0.04 (ar) 153.07 222.15 P
-0.04 (g2) 161.59 222.15 P
1 F
-0.04 ( are evaluated \050no ordering implied\051 and the value of SHAPE) 171.58 222.15 P
3 F
-0.04 (y) 418.42 222.15 P
1 F
-0.04 ( given by) 422.86 222.15 P
3 F
-0.04 (ar) 462.43 222.15 P
-0.04 (g2) 470.94 222.15 P
1 F
-0.04 ( is put into) 480.94 222.15 P
0.06 (the space pointed at by) 72 210.15 P
3 F
0.06 (ar) 166.38 210.15 P
0.06 (g1) 174.9 210.15 P
1 F
0.06 (. Once again, the alignment of) 184.89 210.15 P
3 F
0.06 (y) 308.48 210.15 P
1 F
0.06 ( need only be included in) 312.92 210.15 P
3 F
0.06 (x) 416.52 210.15 P
1 F
0.06 (, allowing the assignment) 420.96 210.15 P
0.07 (to the \336rst \336eld of a structure using a pointer to the structure. An assignment has no obvious result so its SHAPE) 72 198.15 P
(is T) 72 186.15 T
(OP) 87.09 186.15 T
(.) 98.75 186.15 T
0.55 (Some languages give results to assignments. For example, C de\336nes the result of an assignment to be its right-) 72 164.15 P
(hand expression, so that if the result of \050v = exp\051 was required, it would probably be expressed as:) 72 152.15 T
0 F
(identify) 108 130.15 T
4 F
(\050empty) 140.76 130.15 T
(, newtag, exp,) 170.57 130.15 T
0 F
(sequence) 126 115.15 T
4 F
(\050\050) 164.31 115.15 T
0 F
(assign) 170.96 115.15 T
4 F
(\050) 197.07 115.15 T
0 F
(obtain_tag) 200.4 115.15 T
4 F
(\050v\051,) 245.93 115.15 T
0 F
(obtain_tag) 263.14 115.15 T
4 F
(\050newtag\051\051\051,) 308.68 115.15 T
0 F
( obtain_tag) 356.99 115.15 T
4 F
(\050newtag\051\051\051) 405.03 115.15 T
FMENDPAGE
%%EndPage: "25" 31
%%Page: "26" 31
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 26) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
1.03 (From the de\336nition of) 72 763.23 P
0 F
1.03 (assign) 166.65 763.23 P
1 F
1.03 (, the destination ar) 192.75 763.23 P
1.03 (gument,) 269.51 763.23 P
3 F
1.03 (ar) 305.53 763.23 P
1.03 (g1) 314.04 763.23 P
1 F
1.03 (, must have a POINTER shape. This means that) 324.04 763.23 P
-0.02 (given the T) 72 751.23 P
-0.02 (AG id above,) 116.68 751.23 P
0 F
-0.02 (assign) 172.68 751.23 P
1 F
-0.02 (\050) 198.79 751.23 P
0 F
-0.02 (obtain_tag) 202.11 751.23 P
1 F
-0.02 (\050id\051, lhs\051 is only legal if the) 247.65 751.23 P
3 F
-0.02 (de\336nition) 359.08 751.23 P
1 F
-0.02 ( of its) 396.84 751.23 P
0 F
-0.02 (identify) 422.04 751.23 P
1 F
-0.02 ( had a POINTER) 454.8 751.23 P
(SHAPE. A trivial example would be if id was de\336ned:) 72 739.23 T
0 F
(identify) 108 717.23 T
4 F
(\050empty) 140.76 717.23 T
(, id,) 170.57 717.23 T
0 F
(obtain_tag) 189.46 717.23 T
4 F
(\050v\051,) 234.99 717.23 T
0 F
(assign) 252.2 717.23 T
4 F
(\050) 278.31 717.23 T
0 F
(obtain_tag) 281.64 717.23 T
4 F
(\050id\051, lhs\051\051) 327.17 717.23 T
1 F
-0.06 (This identi\336es id with the variable v which has a POINTER SHAPE, and assigns lhs to this pointer) 72 702.23 P
-0.06 (. Given that id) 466.29 702.23 P
(does not occur in lhs, this is identical to:) 72 690.23 T
0 F
(assign) 110.78 668.23 T
4 F
(\050) 136.88 668.23 T
0 F
(obtain_tag) 140.21 668.23 T
4 F
(\050v\051, lhs\051.) 185.75 668.23 T
1 F
-0.19 (Equivalences like this are widely used for transforming TDF in translators and other tools \050see section 10 on page) 72 653.23 P
(37\051.) 72 641.23 T
0 F
(7.2.1) 72 615.23 T
(move_some, TRANSFER_MODE) 108 615.23 T
1 F
0.52 (The value assigned in) 72 598.23 P
0 F
0.52 (assign) 163.45 598.23 P
1 F
0.52 ( has some \336xed SHAPE; its size is known at translate-time. V) 189.56 598.23 P
0.52 (ariable sized objects) 441.21 598.23 P
(can be moved by) 72 586.23 T
0 F
(move_some) 142.5 586.23 T
1 F
( \050S5.14.54\051:) 191.9 586.23 T
3 F
(md) 129.01 564.23 T
1 F
(:) 141.22 564.23 T
(TRANSFER_MODE) 153 564.23 T
3 F
(ar) 122.71 552.23 T
(g1) 131.23 552.23 T
1 F
(:) 141.22 552.23 T
(EXP POINTER) 153 552.23 T
3 F
(x) 219.07 552.23 T
(ar) 122.71 540.23 T
(g2) 131.23 540.23 T
1 F
(:) 141.22 540.23 T
(EXP POINTER y) 153 540.23 T
3 F
(ar) 122.71 528.23 T
(g3) 131.23 528.23 T
1 F
(:) 141.22 528.23 T
(EXP OFFSET\050z, t\051) 153 528.23 T
2 F
(\256) 144 512.23 T
4 F
(EXP T) 162 512.23 T
(OP) 190.7 512.23 T
1 F
0.47 (The EXP) 72 494.23 P
3 F
0.47 (ar) 112.36 494.23 P
0.47 (g1) 120.87 494.23 P
1 F
0.47 ( is the destination pointer) 130.87 494.23 P
0.47 (, and) 233.39 494.23 P
3 F
0.47 (ar) 256.26 494.23 P
0.47 (g2) 264.77 494.23 P
1 F
0.47 ( is a source pointer) 274.77 494.23 P
0.47 (. The amount moved is given by the OFF-) 351.59 494.23 P
(SET) 72 482.23 T
3 F
(ar) 92.27 482.23 T
(g3) 100.78 482.23 T
1 F
(.) 110.78 482.23 T
0 (The TRANSFER_MODE) 72 460.23 P
3 F
0 ( md) 175.56 460.23 P
1 F
0 ( parameter controls the way that the move will be performed. W) 190.27 460.23 P
0 (ith) 446.39 460.23 P
0 F
0 (move_some) 459.45 460.23 P
1 F
0 (, its) 508.85 460.23 P
1.2 (only signi\336cant constructor is) 72 448.23 P
0 F
1.2 (overlap) 197.83 448.23 P
1 F
1.2 (\050S5.48.4\051. If) 230.04 448.23 P
0 F
1.2 (overlap) 283.78 448.23 P
1 F
1.2 ( is present, then the translator will ensure that the) 315.98 448.23 P
0.01 (move is equivalent to moving the source into new space and then copying it to the destination; it would probably) 72 436.23 P
0.9 (do this by choosing a good direction in which to step through the value. The alternative,) 72 424.23 P
0 F
0.9 (standard_transfer_) 440.57 424.23 P
(mode) 72 412.23 T
1 F
(, indicates that it does not matter) 95.32 412.23 T
(.) 224.97 412.23 T
72 376.89 523.3 386.9 C
72 376.89 523.3 386.9 R
7 X
0 K
V
72 385.89 541.01 385.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 352.88 523.3 362.89 C
72 352.88 523.3 362.89 R
7 X
0 K
V
72 361.88 541.01 361.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(7.3) 72 367.56 T
(contents_with_mode, assign_with_mode) 108 367.56 T
1 10 Q
(There are variants of both the) 72 336.22 T
0 F
(contents) 192.45 336.22 T
1 F
( and) 227.98 336.22 T
0 F
(assign) 247.41 336.22 T
1 F
( constructors. The signature of) 273.52 336.22 T
0 F
(contents_with_mode) 397.87 336.22 T
1 F
( is:) 485.59 336.22 T
3 F
(md) 129.01 314.22 T
1 F
(:) 141.22 314.22 T
(TRANSFER_MODE) 153 314.22 T
3 F
(s) 137.33 302.22 T
1 F
(:) 141.22 302.22 T
(SHAPE) 153 302.22 T
3 F
(ar) 122.71 290.22 T
(g1) 131.23 290.22 T
1 F
(:) 141.22 290.22 T
(EXP POINTER\050) 153 290.22 T
3 F
(x) 219.9 290.22 T
1 F
(\051) 224.34 290.22 T
2 F
(\256) 144 274.22 T
4 F
(EXP s) 162 274.22 T
1 F
0.45 (Here, the only signi\336cant TRANSFER_MODE constructor) 72 256.22 P
3 F
0.45 (md) 313.74 256.22 P
1 F
0.45 ( is) 325.96 256.22 P
0 F
0.45 (volatile) 338.53 256.22 P
1 F
0.45 (\050S5.48.6\051. This is principally intended) 369.62 256.22 P
-0.25 (to implement the C volatile construction; it certainly means that the) 72 244.22 P
0 F
-0.25 (contents_with_mode) 341.63 244.22 P
1 F
-0.25 ( operation will never be) 429.35 244.22 P
(\322optimised\323 away) 72 232.22 T
(.) 143.24 232.22 T
0.22 (Similar considerations apply to) 72 210.22 P
0 F
0.22 (assign_with_mode) 200.03 210.22 P
1 F
0.22 (; here the) 278.33 210.22 P
0 F
0.22 (overlap) 318.68 210.22 P
1 F
0.22 ( TRANSFER_MODE) 350.89 210.22 P
0.22 (is also possible with) 441.84 210.22 P
(the same meaning as in) 72 198.22 T
0 F
(move_some) 167.77 198.22 T
1 F
(\050section 6.2.1 on page 26\051.) 217.17 198.22 T
FMENDPAGE
%%EndPage: "26" 32
%%Page: "27" 32
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 27) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(8) 72 741.88 T
(Operations) 99 741.88 T
1 10 Q
0.77 (Most of the arithmetic operations of TDF have familiar analogues in standard languages and processors. They) 72 665.19 P
0.34 (dif) 72 653.19 P
0.34 (fer principally in how error conditions \050e.g. numeric over\337ow\051 are handled. There is a wide diversity in error) 82.92 653.19 P
0.62 (handling in both languages and processors, so TDF tries to reduce it to the simplest primitive level compatible) 72 641.19 P
0.14 (with their desired operation in languages and their implementation on processors. Before delving into the details) 72 629.19 P
(of error handling, it is worthwhile revisiting the SHAPEs and ranges in arithmetic V) 72 617.19 T
(ARIETYs.) 407.71 617.19 T
72 581.84 523.3 591.85 C
72 581.84 523.3 591.85 R
7 X
0 K
V
72 590.84 541.01 590.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 557.84 523.3 567.84 C
72 557.84 523.3 567.84 R
7 X
0 K
V
72 566.84 541.01 566.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(8.1) 72 572.51 T
(V) 108 572.51 T
(ARIETY and over\337ow) 116.3 572.51 T
1 10 Q
0.28 (An INTEGER V) 72 541.17 P
0.28 (ARIETY) 138.44 541.17 P
0.28 (, for example, is de\336ned by some range of signed natural numbers. A translator will \336t) 173.79 541.17 P
0.77 (this range into some possibly lar) 72 529.17 P
0.77 (ger range which is convenient for the processor in question. For example, the) 205.34 529.17 P
0.08 (integers with) 72 517.17 P
0 F
0.08 (variety) 126.57 517.17 P
1 F
0.08 (\0501,10\051 would probably be represented as unsigned characters with range \0500..255\051, a conven-) 156.54 517.17 P
(ient representation for both storage and arithmetic.) 72 505.17 T
-0.04 (The question then arises of what is meant by over\337ow in an operation which is meant to deliver an integer of this) 72 483.17 P
0.96 (V) 72 471.17 P
0.96 (ARIETY - is it when the integer result is outside the range \0501..10\051 or outside the range \0500..255\051? For purely) 77.93 471.17 P
0.32 (pragmatic reasons, TDF chooses the latter - the result is over\337owed when it is outside its representational range) 72 459.17 P
0 (\0500..255\051. If the program insists that it must be within \0501..10\051, then it can always test for it. If the program uses the) 72 447.17 P
1.14 (error handling mechanism and the result is outside \0501..10\051 but still within the representational limits, then, in) 72 435.17 P
-0.09 (order for the program to be portable, then the error handling actions must in some sense be \322continuous\323 with the) 72 423.17 P
1.04 (normal action. This would not be the case if, for example, the value was used to index an array with bounds) 72 411.17 P
0.54 (\0501..10\051, but will usually be the case where the value is used in further arithmetic operations which have similar) 72 399.17 P
0.89 (error handling. The arithmetic will continue to give the mathematically correct result provided the representa-) 72 387.17 P
(tional bounds are not exceeded.) 72 375.17 T
0.12 (The limits in a V) 72 353.17 P
0.12 (ARIETY are there to provide a guide to its representation, and not to give hard limits to its pos-) 138.93 353.17 P
-0.24 (sible values. This choice is consistent with the general TDF philosophy of how exceptions are to be treated. If, for) 72 341.17 P
0.16 (example, one wishes to do array-bound checking, then it must be done by explicit tests on the indices and jump-) 72 329.17 P
0.62 (ing to some exception action if they fail. Similarly) 72 317.17 P
0.62 (, explicit tests can be made on an integer value, provided its) 277.54 317.17 P
0.22 (representational limits are not exceeded. It is unlikely that a translator could produce any more ef) 72 305.17 P
0.22 (\336cient code, in) 463.73 305.17 P
0.15 (general, if the tests were implicit. The representational limits can be exceeded in arithmetic operations, so facili-) 72 293.17 P
(ties are provided to allow one to jump to a label if it happens in an operation.) 72 281.17 T
FMENDPAGE
%%EndPage: "27" 33
%%Page: "28" 33
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 28) 491.51 36 T
80.71 218.33 132.14 276.18 C
80.71 218.33 132.14 276.18 R
7 X
0 K
V
0 10 Q
0 X
(UNIT) 85.71 249.76 T
0 0 595.3 841.9 C
72 72 523.3 769.9 R
7 X
0 K
V
0 10 Q
0 X
(8.1.1) 72 763.23 T
(ERROR_TREA) 108 763.23 T
(TMENT) 176.11 763.23 T
1 F
(T) 72 746.23 T
(aking integer addition as an example,) 77.41 746.23 T
0 F
(plus) 229.24 746.23 T
1 F
( \050S5.14.71\051 has signature:) 247.02 746.23 T
3 F
(ov_err) 114.58 724.23 T
1 F
(:) 141.22 724.23 T
(ERROR_TREA) 153 724.23 T
(TMENT) 216.3 724.23 T
3 F
(ar) 122.71 712.23 T
(g1) 131.23 712.23 T
1 F
(:) 141.22 712.23 T
(EXP INTEGER\050) 153 712.23 T
3 F
(v) 220.45 712.23 T
1 F
(\051) 224.89 712.23 T
3 F
(ar) 122.71 700.23 T
(g2) 131.23 700.23 T
1 F
(:) 141.22 700.23 T
(EXP INTEGER\050) 153 700.23 T
3 F
(v) 220.45 700.23 T
1 F
(\051) 224.89 700.23 T
2 F
(\256) 144 684.23 T
4 F
(EXP INTEGER\050) 162 684.23 T
7 F
(v) 232.53 684.23 T
4 F
(\051) 237.53 684.23 T
1 F
-0.22 (The result of the addition has the same integer V) 72 666.23 P
-0.22 (ARIETY as its parameters. If the representational bounds of) 263.26 666.23 P
3 F
-0.22 (v) 504.38 666.23 P
1 F
-0.22 ( are) 508.82 666.23 P
0.47 (exceeded, then the action taken depends on the ERROR_TREA) 72 654.23 P
0.47 (TMENT\050S5.13\051) 329.16 654.23 P
3 F
0.47 (ov_err) 396.25 654.23 P
1 F
0.47 (. The constructor for) 422.35 654.23 P
3 F
0.47 (ov_) 508.86 654.23 P
(err) 72 642.23 T
1 F
( that one would use if one wished to treat an over\337ow as an exception is) 84.21 642.23 T
0 F
(err) 374.56 642.23 T
(or_jump) 387.7 642.23 T
1 F
( \050S5.13.3\051:) 424.9 642.23 T
3 F
(lab) 128.45 620.23 T
1 F
(:) 141.22 620.23 T
(LABEL) 153 620.23 T
2 F
(\256) 144 604.23 T
4 F
(ERROR_TREA) 162 604.23 T
(TMENT) 229.56 604.23 T
1 F
0.64 (A branch to) 72 586.23 P
3 F
0.64 (lab) 123.61 586.23 P
1 F
0.64 ( will occur if the result over\337ows. The action performed there will depend on the program and) 136.38 586.23 P
0.25 (language involved. If the language were Ada, it would probably jump to some exception-handler) 72 574.23 P
0.25 (, either directly) 462.02 574.23 P
(if the error) 72 562.23 T
(-handler was in the current procedure or indirectly using) 114.54 562.23 T
0 F
(long_jump) 342.41 562.23 T
1 F
( on some globals if not.) 388.51 562.23 T
0 F
(8.1.2) 72 536.23 T
(impossible, ignor) 108 536.23 T
(e) 180.57 536.23 T
1 F
0.03 (There are two other ways of constructing ERROR_TREA) 72 519.23 P
0.03 (TMENT) 302.31 519.23 P
0.03 (s) 336.03 519.23 P
1 8 Q
0.02 (1) 339.92 523.23 P
1 10 Q
0.03 (. The constructor) 343.92 519.23 P
0.03 (,) 411.58 519.23 P
0 F
0.03 (impossible) 416.6 519.23 P
1 F
0.03 (, is an assertion) 461.59 519.23 P
0.22 (by the producer that over\337ow will not occur; on its head be it if it does. The other is) 72 507.23 P
0 F
0.22 (wrap) 413.66 507.23 P
1 F
0.22 (; it is only de\336ned for) 435.87 507.23 P
0.16 (integer varieties. For all the standard integer operations which have ERROR_TREA) 72 495.23 P
0.16 (TMENT) 408.69 495.23 P
0.16 (s, the result is unde-) 442.41 495.23 P
0.79 (\336ned if the lower bound of the V) 72 483.23 P
0.79 (ARIETY) 207.5 483.23 P
3 F
0.79 (v) 247.43 483.23 P
1 F
0.79 ( is negative. If it is de\336ned, then the calculation is done modulo 2) 251.86 483.23 P
0.14 (raised to the power of the number of bits of the representational variety; thus, integer arithmetic with byte repre-) 72 471.23 P
0.41 (sentational variety is done modulo 256. This just corresponds to what happens in most processors and, inciden-) 72 459.23 P
(tally) 72 447.23 T
(, the de\336nition of C.) 89.12 447.23 T
72 411.89 523.3 421.9 C
72 411.89 523.3 421.9 R
7 X
0 K
V
72 420.89 541.01 420.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 387.88 523.3 397.89 C
72 387.88 523.3 397.89 R
7 X
0 K
V
72 396.88 541.01 396.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(8.2) 72 402.56 T
(Division and r) 108 402.56 T
(emainder) 192.5 402.56 T
1 10 Q
2.83 (The various constructors in involving integer division \050e.g.) 72 371.22 P
0 F
2.83 (div1) 332.24 371.22 P
1 F
2.83 ( \050S5.14.19\051,) 350.57 371.22 P
0 F
2.83 (r) 405.92 371.22 P
2.83 (em1) 410.17 371.22 P
1 F
2.83 (\050S5.14.74\051\051 have two) 433.26 371.22 P
(ERROR_TREA) 72 359.22 T
(TMENT parameters, one for over\337ow and one for divide-by-zero e.g.) 135.3 359.22 T
0 F
(div1) 416.46 359.22 T
1 F
( is:) 434.79 359.22 T
3 F
(div_by_zer) 72 337.22 T
(o_err) 115.49 337.22 T
(or) 137.32 337.22 T
1 F
(:) 146.21 337.22 T
(ERROR_TREA) 153 337.22 T
(TMENT) 216.3 337.22 T
3 F
(ov_err) 114.58 325.22 T
1 F
(:) 141.22 325.22 T
(ERROR_TREA) 153 325.22 T
(TMENT) 216.3 325.22 T
3 F
(ar) 122.71 313.22 T
(g1) 131.23 313.22 T
1 F
(:) 141.22 313.22 T
(EXP INTEGER\050) 153 313.22 T
3 F
(v) 220.45 313.22 T
1 F
(\051) 224.89 313.22 T
3 F
(ar) 122.71 301.22 T
(g2) 131.23 301.22 T
1 F
(:) 141.22 301.22 T
(EXP INTEGER\050) 153 301.22 T
3 F
(v) 220.45 301.22 T
1 F
(\051) 224.89 301.22 T
2 F
(\256) 144 285.22 T
4 F
(EXP INTEGER\050) 162 285.22 T
7 F
(v) 232.53 285.22 T
4 F
(\051) 237.53 285.22 T
1 F
-0.04 (. There are two dif) 72 267.22 P
-0.04 (ferent kinds of division operators \050with corresponding remainder operators\051 de\336ned. The oper-) 145.74 267.22 P
1.21 (ators) 72 255.22 P
0 F
1.21 (div2) 95.14 255.22 P
1 F
1.21 ( \050S5.14.20\051and) 113.47 255.22 P
0 F
1.21 (r) 177.52 255.22 P
1.21 (em2) 181.78 255.22 P
1 F
1.21 ( \050S5.14.75\051 are those generally implemented directly by processor instructions) 199.54 255.22 P
0.09 (giving the sign of the remainder the same as the sign of the quotient. The other pair) 72 243.22 P
0.09 (,) 405.81 243.22 P
0 F
0.09 (div1) 410.89 243.22 P
1 F
0.09 ( and) 429.22 243.22 P
0 F
0.09 (r) 448.83 243.22 P
0.09 (em1) 453.08 243.22 P
1 F
0.09 (, is less com-) 470.84 243.22 P
1.76 (monly implemented in hardware, but have rather more consistent mathematical properties; here the sign of) 72 231.22 P
0.35 (remainder is the same as the sign of divisor) 72 219.22 P
0.35 (. Thus,) 247.49 219.22 P
0 F
0.35 (div1) 278.18 219.22 P
1 F
0.35 (\050x, 2\051 is the same as) 296.51 219.22 P
0 F
0.35 (shift_right) 380.51 219.22 P
1 F
0.35 (\050x, 1\051 which is only true) 425.48 219.22 P
0.49 (for) 72 207.22 P
0 F
0.49 (div2) 86.64 207.22 P
1 F
0.49 ( if x is positive. The two pairs of operations give the same results if both operands have the same sign.) 104.97 207.22 P
(The precise de\336nition of the divide operations is given in \050S7.4\051.) 72 195.22 T
72 82 523.3 96.98 C
72 82 523.3 96.98 R
7 X
0 K
V
81 94.96 225 94.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. There may be extensions to this to allow easier use of system provided error traps.) 90 76.67 T
FMENDPAGE
%%EndPage: "28" 34
%%Page: "29" 34
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 29) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(8.3) 72 750.56 T
(change_variety) 108 750.56 T
1 10 Q
(Conversions between the various INTEGER varieties are provided for by) 72 719.22 T
0 F
(change_variety) 367.89 719.22 T
1 F
( \050S5.14.12\051:) 432.84 719.22 T
3 F
(ov_err) 114.58 697.22 T
1 F
(:) 141.22 697.22 T
(ERROR_TREA) 153 697.22 T
(TMENT) 216.3 697.22 T
3 F
(r) 137.33 685.22 T
1 F
(:) 141.22 685.22 T
(V) 153 685.22 T
(ARIETY) 158.93 685.22 T
3 F
(ar) 122.71 673.22 T
(g1) 131.23 673.22 T
1 F
(:) 141.22 673.22 T
(EXP INTEGER\050) 153 673.22 T
3 F
(v) 220.45 673.22 T
1 F
(\051) 224.89 673.22 T
2 F
(\256) 144 657.22 T
4 F
(EXP INTEGER\050) 162 657.22 T
7 F
(r) 232.53 657.22 T
4 F
(\051) 235.86 657.22 T
1 F
-0.06 (If the value) 72 639.22 P
3 F
-0.06 (ar) 119.84 639.22 P
-0.06 (g1) 128.36 639.22 P
1 F
-0.06 ( is outside the limits of the representational variety of) 138.35 639.22 P
3 F
-0.06 (r) 353.75 639.22 P
1 F
-0.06 (, then the ERROR_TREA) 357.24 639.22 P
-0.06 (TMENT) 459.79 639.22 P
3 F
-0.06 (ov_err) 496.65 639.22 P
1 F
(will be invoked.) 72 627.22 T
72 591.88 523.3 601.88 C
72 591.88 523.3 601.88 R
7 X
0 K
V
72 600.88 541.01 600.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 567.87 523.3 577.88 C
72 567.87 523.3 577.88 R
7 X
0 K
V
72 576.87 541.01 576.87 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(8.4) 72 582.54 T
(and, or) 108 582.54 T
(, not, xor) 149.47 582.54 T
1 10 Q
0.12 (The standard logical operations,) 72 551.2 P
0 F
0.12 (and) 203.23 551.2 P
1 F
0.12 ( \050S5.14.4\051,) 219.34 551.2 P
0 F
0.12 (not) 264.28 551.2 P
1 F
0.12 ( \050S5.14.58\051,) 278.17 551.2 P
0 F
0.12 (or) 328.11 551.2 P
1 F
0.12 (\050S5.14.70\051 and) 337.54 551.2 P
0 F
0.12 (xor) 399.41 551.2 P
1 F
0.12 ( \050S5.14.85\051are provided for) 413.85 551.2 P
0.55 (all integer varieties. A purist might ar) 72 539.2 P
0.55 (gue that these cannot be architecturally independent for signed varieties -) 225.28 539.2 P
0.96 (what about ones-complement arithmetic? A pedantic producer should indeed only use unsigned varieties with) 72 527.2 P
-0.02 (logical operations, but ones-complement machines are few and far between. I wonder how many C programmers) 72 515.2 P
-0.18 (know that \050x &= -4\051 does not necessarily remove the bottom two bits from x; it really should have been written \050x) 72 503.2 P
(&= ~3\051.) 72 491.2 T
72 455.86 523.3 465.87 C
72 455.86 523.3 465.87 R
7 X
0 K
V
72 464.86 541.01 464.86 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 431.85 523.3 441.86 C
72 431.85 523.3 441.86 R
7 X
0 K
V
72 440.85 541.01 440.85 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(8.5) 72 446.53 T
(Floating-point operations, ROUNDING_MODE) 108 446.53 T
1 10 Q
0.94 (All of the \337oating-point operations include ERROR-TREA) 72 415.19 P
0.94 (TMENT) 313.08 415.19 P
0.94 (s. If the result of a \337oating-point operation) 346.8 415.19 P
1.41 (cannot be represented in the desired FLOA) 72 403.19 P
1.41 (TING_V) 251.44 403.19 P
1.41 (ARIETY) 286.23 403.19 P
1.41 (, the error treatment is invoked. If the ERROR_) 321.58 403.19 P
-0.17 (TREA) 72 391.19 P
-0.17 (TMENT is) 96.99 391.19 P
0 F
-0.17 (wrap) 142.72 391.19 P
1 F
-0.17 ( or) 164.93 391.19 P
0 F
-0.17 (impossible) 177.9 391.19 P
1 F
-0.17 (, the result is unde\336ned; otherwise the jump operates in the same way as for) 222.89 391.19 P
0.57 (integer operations. Both) 72 379.19 P
0 F
0.57 (\337oating_plus) 172.54 379.19 P
1 F
0.57 (\050S5.14.29\051 and) 227.53 379.19 P
0 F
0.57 (\337oating_mult) 290.3 379.19 P
1 F
0.57 ( \050S5.14.27\051 are de\336ned as n-ary operations.) 347.5 379.19 P
-0.09 (In general, \337oating addition and multiplication are not associative, but a producer may not care about the order in) 72 367.19 P
0.91 (which they are to be performed. Making them appear as though they were associative allows the translator to) 72 355.19 P
(choose an order which is convenient to the hardware.) 72 343.19 T
0.73 (Conversions from integer to \337oating are done by) 72 321.19 P
0 F
0.73 (\337oat_int) 274.96 321.19 P
1 F
0.73 ( \050S5.14.23\051 and from \337oating to integers by) 310.5 321.19 P
0 F
0.73 (r) 492.37 321.19 P
0.73 (ound_) 496.63 321.19 P
1.44 (with_mode) 72 309.19 P
1 F
1.44 ( \050S5.14.78\051. This latter constructor has a parameter of SOR) 119.19 309.19 P
1.44 (T ROUNDING_MODE \050S5.26\051which) 367.47 309.19 P
(ef) 72 297.19 T
(fectively gives the IEEE rounding mode to be applied to the \337oat to produce its integer result.) 79.59 297.19 T
72 261.84 523.3 271.85 C
72 261.84 523.3 271.85 R
7 X
0 K
V
72 270.84 541.01 270.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 237.84 523.3 247.85 C
72 237.84 523.3 247.85 R
7 X
0 K
V
72 246.84 541.01 246.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(8.6) 72 252.51 T
(change_bit\336eld_to_int, change_int_to_bit\336eld) 108 252.51 T
1 10 Q
1.7 (There are two bit-\336eld operation,) 72 221.17 P
0 F
1.7 (change_bit\336eld_to_int) 215.37 221.17 P
1 F
1.7 ( \050S5.14.9\051and) 310.33 221.17 P
0 F
1.7 (change_int_to_bit\336eld) 370.35 221.17 P
1 F
1.7 ( \050S5.14.1) 465.31 221.17 P
1.7 (1\051 to) 503 221.17 P
1.4 (transform between bit-\336elds and integers. If the varieties do not \336t the result is unde\336ned; the producer can) 72 209.17 P
-0.14 (always get it right. The main dif) 72 197.17 P
-0.14 (\336culty for translators dealing with bit-\336elds is not in these operations themselves,) 199.5 197.17 P
0.55 (but in the representation and manipulation of pointers to bit\336elds, i.e. those with SHAPE POINTER\050bv\051 where) 72 185.17 P
-0.2 (bv is a BITFIELD_V) 72 173.17 P
-0.2 (ARIETY) 155.33 173.17 P
-0.2 (. Usually) 190.68 173.17 P
-0.2 (, processors do not have pointers to individual bits, so the representation of) 225.92 173.17 P
0.55 (a POINTER\050bv\051 must be two words, one giving a byte-address and the other a bit displacement. The choice of) 72 161.17 P
0.32 (the exact details of this can be quite tricky as is the OFFSET arithmetic involved. Current translators go to con-) 72 149.17 P
0.67 (siderable lengths to avoid ever having to explicitly create one of these compound pointers; they can always be) 72 137.17 P
(avoided in C since it has no type corresponding to a pointer to a bit-\336eld.) 72 125.17 T
FMENDPAGE
%%EndPage: "29" 35
%%Page: "30" 35
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 30) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(8.7) 72 750.56 T
(make_compound, make_nof, n_copies) 108 750.56 T
1 10 Q
(There is one operation to make values of COMPOUND SHAPE,) 72 719.22 T
0 F
(make_compound) 333.77 719.22 T
1 F
( \050S5.14.41\051:) 407.07 719.22 T
3 F
(ar) 122.71 697.22 T
(g1) 131.23 697.22 T
1 F
(:) 141.22 697.22 T
(EXP OFFSET\050) 153 697.22 T
3 F
(base, y) 213.81 697.22 T
1 F
(\051) 241.56 697.22 T
3 F
(ar) 122.71 685.22 T
(g2) 131.23 685.22 T
1 F
(:) 141.22 685.22 T
(LIST\050EXP\051) 153 685.22 T
2 F
(\256) 144 669.22 T
4 F
(EXP COMPOUND\050) 162 669.22 T
7 F
(sz) 247.51 669.22 T
4 F
(\051) 257.51 669.22 T
1 F
-0.17 (The OFFSET) 72 651.22 P
3 F
-0.17 (ar) 128.29 651.22 P
-0.17 (g1) 136.8 651.22 P
1 F
-0.17 ( is evaluated as a translate-time constant to give) 146.8 651.22 P
3 F
-0.17 (sz) 338.7 651.22 P
1 F
-0.17 (, the size of the compound object. The EXPs) 346.48 651.22 P
0.25 (of ar) 72 639.22 P
0.25 (g2 are alternately OFFSET) 90.66 639.22 P
0.25 (s \050also translate-time constants\051 and values which will be placed at those of) 198.71 639.22 P
0.25 (fsets.) 502.48 639.22 P
1.17 (This constructor is used to construct values given by structure displays; in C, these only occur with constant) 72 627.22 P
3 F
0.39 (val[i]) 72 615.22 P
1 F
0.39 ( in global de\336nitions. It is also used to provide union injectors; here) 94.77 615.22 P
3 F
0.39 (sz) 372.48 615.22 P
1 F
0.39 ( would be the size of the union and) 380.26 615.22 P
(the list would probably two elements with the \336rst being an) 72 603.22 T
0 F
(offset_zer) 312.14 603.22 T
(o) 353.58 603.22 T
1 F
(.) 358.57 603.22 T
0.51 (Constant sized array values may be constructed using) 72 581.22 P
0 F
0.51 (make_nof) 292.6 581.22 P
1 F
0.51 ( \050S5.14.45\051,) 334.79 581.22 P
0 F
0.51 (make_nof_int) 385.51 581.22 P
1 F
0.51 ( \050see section 8.3 on) 444.36 581.22 P
(page 32\051, and) 72 569.22 T
0 F
(n_copies) 128.62 569.22 T
1 F
( \050S5.14.56\051. Again, they only occur in C as constants in global de\336nitions.) 165.27 569.22 T
FMENDPAGE
%%EndPage: "30" 36
%%Page: "31" 36
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 31) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(9) 72 741.88 T
(Constants) 99 741.88 T
1 10 Q
0.27 (The representation of constants clearly has peculiar dif) 72 665.19 P
0.27 (\336culties in any architecture neutral format. Leaving aside) 292.7 665.19 P
0.15 (any problems of how numbers are to be represented, we also have the situation where a \322constant\323 can have dif-) 72 653.19 P
0.2 (ferent values on dif) 72 641.19 P
0.2 (ferent platforms. An obvious example would be the size of a structure which, although it is a) 149.85 641.19 P
0.47 (constant of any particular run of a program, may have dif) 72 629.19 P
0.47 (ferent values on dif) 305.49 629.19 P
0.47 (ferent machines. Further) 384.15 629.19 P
0.47 (, this con-) 482.66 629.19 P
-0.19 (stant is in general the result of some computation involving the sizes of its components which are not known until) 72 617.19 P
0.12 (the platform is chosen. In TDF) 72 605.19 P
0.12 (, sizes are always derived from some EXP OFFSET constructed using the various) 195.08 605.19 P
0.4 (OFFSET arithmetic operations on primitives like) 72 593.19 P
0 F
0.4 (shape_offset) 273.2 593.19 P
1 F
0.4 ( and) 325.94 593.19 P
0 F
0.4 (offset_zer) 346.17 593.19 P
0.4 (o) 387.61 593.19 P
1 F
0.4 (. Most such EXP OFFSET) 392.61 593.19 P
0.4 (s pro-) 499.86 593.19 P
0.78 (duced are in fact constants of the platform; they include \336eld displacements of structure as well as their sizes.) 72 581.19 P
0.17 (TDF assumes that, if these EXPs can be evaluated at translate-time \050i.e. when the sizes and alignments of primi-) 72 569.19 P
0.51 (tive objects are known\051, then they must be evaluated there. An example of why this is so arises in) 72 557.19 P
0 F
0.51 (make_com-) 473.89 557.19 P
1.06 (pound) 72 545.19 P
1 F
1.06 (; the SHAPE of its result EXP depends on its) 99.22 545.19 P
3 F
1.06 (ar) 292.52 545.19 P
1.06 (g1) 301.04 545.19 P
1 F
1.06 ( EXP OFFSET parameter and all SHAPEs must be) 311.03 545.19 P
(translate-time values.) 72 533.19 T
0.7 (An initialisation of a T) 72 511.19 P
0.7 (AGDEF is a constant in this sense; this allows one to ignore any dif) 165.07 511.19 P
0.7 (\336culties about their) 444.71 511.19 P
0.86 (order of evaluation in the UNIT and consequently the order of evaluation of UNIT) 72 499.19 P
0.86 (s. Once again all the EXPs) 412.43 499.19 P
0.39 (which are initialisations must be evaluated before the program is run. The limitation on an initialisation EXP to) 72 487.19 P
0.51 (ensure this is basically that one cannot take the contents of a variable declared outside the EXP after all tokens) 72 475.19 P
1.12 (and conditional evaluation is taken into account. In other words, each TDF translator ef) 72 463.19 P
1.12 (fectively has an TDF) 435.83 463.19 P
0.17 (interpreter which can do evaluation of expressions \050including conditionals etc.\051 involving only constants such as) 72 451.19 P
0.65 (numbers, sizes and addresses of globals. This corresponds very roughly to the kind of initialisations of globals) 72 439.19 P
(that are permissible in C; for a more precise de\336nition, see) 72 427.19 T
(\050S7.3\051.) 308.5 427.19 T
72 391.84 523.3 401.85 C
72 391.84 523.3 401.85 R
7 X
0 K
V
72 400.84 541.01 400.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 367.84 523.3 377.84 C
72 367.84 523.3 377.84 R
7 X
0 K
V
72 376.84 541.01 376.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(9.1) 72 382.51 T
(exp_cond) 108 382.51 T
1 10 Q
1.42 (Another place where translate-time evaluation of constants is mandated is in the various) 72 351.17 P
0 F
1.42 (_cond) 444.97 351.17 P
1 F
1.42 ( constructors) 470.52 351.17 P
0.16 (which give a kind of \322conditional compilation\323 facility; every SOR) 72 339.17 P
0.16 (T which has a SOR) 341.79 339.17 P
0.16 (TNAME, other that T) 419.54 339.17 P
0.16 (AG,) 506.36 339.17 P
(T) 72 327.17 T
(OKEN and LABEL, has one of these constructors e.g.) 77.93 327.17 T
0 F
(exp_cond) 297.21 327.17 T
1 F
( \050S5.14.2\051:) 337.74 327.17 T
3 F
(contr) 112.72 305.17 T
(ol) 133.45 305.17 T
1 F
(:) 141.22 305.17 T
(EXP INTEGER\050) 153 305.17 T
3 F
(v) 220.45 305.17 T
1 F
(\051) 224.89 305.17 T
3 F
(e1) 131.79 293.17 T
1 F
(:) 141.22 293.17 T
(BITSTREAM EXP) 153 293.17 T
3 F
(x) 233.52 293.17 T
(e2) 131.79 281.17 T
1 F
(:) 141.22 281.17 T
(BITSTREAM EXP) 153 281.17 T
3 F
(y) 233.52 281.17 T
2 F
(\256) 144 265.17 T
4 F
(EXP) 162 265.17 T
7 F
(x) 184.78 265.17 T
4 F
( or EXP) 189.77 265.17 T
7 F
(y) 226.99 265.17 T
1 F
-0.11 (The constant,) 72 247.17 P
3 F
-0.11 (contr) 128.13 247.17 P
-0.11 (ol) 148.86 247.17 P
1 F
-0.11 (, is evaluated at translate time. If it is not zero the entire construction is replaced by the EXP) 156.63 247.17 P
0.35 (in) 72 235.17 P
3 F
0.35 (e1) 82.63 235.17 P
1 F
0.35 (; otherwise it is replaced by the one in) 92.06 235.17 P
3 F
0.35 (e2) 249.86 235.17 P
1 F
0.35 (. In either case, the other BITSTREAM is totally ignored; it even) 259.3 235.17 P
-0.1 (does not need to be sensible TDF) 72 223.17 P
-0.1 (. This kind of construction is use extensively in C pre-processing directives e.g.:) 203.85 223.17 P
4 F
(#if \050sizeof\050int\051 == sizeof\050long\051\051 ...) 108 201.17 T
FMENDPAGE
%%EndPage: "31" 37
%%Page: "32" 37
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 32) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(9.2) 72 750.56 T
(make_int) 108 750.56 T
1 10 Q
(Integer constants are constructed using) 72 719.22 T
0 F
(make_int) 229.93 719.22 T
1 F
( \050S5.14.43\051:) 269.91 719.22 T
3 F
(v) 136.78 697.22 T
1 F
(:) 141.22 697.22 T
(V) 153 697.22 T
(ARIETY) 158.93 697.22 T
3 F
(value) 119.57 685.22 T
1 F
(:) 141.22 685.22 T
(SIGNED_NA) 153 685.22 T
(T) 207.96 685.22 T
2 F
(\256) 144 669.22 T
4 F
(EXP INTEGER\050) 162 669.22 T
7 F
(v) 232.53 669.22 T
4 F
(\051) 237.53 669.22 T
1 F
0.49 (The SIGNED_NA) 72 651.22 P
0.49 (T) 145.49 651.22 P
3 F
0.49 (value) 154.59 651.22 P
1 F
0.49 ( is an encoding of the binary value required for the integer; this value must lie within) 176.23 651.22 P
0.62 (the limits given by) 72 639.22 P
3 F
0.62 (v) 151.65 639.22 P
1 F
0.62 (. I have been rather slip-shod in writing down examples of integer constants earlier in this) 155.44 639.22 P
0.15 (document; where I have written 1 as an integer EXP) 72 627.22 P
0.15 (, for example, I should have written) 281.24 627.22 P
0 F
0.15 (make_int) 427.46 627.22 P
1 F
0.15 (\050v) 467.44 627.22 P
0.15 (, 1\051 where v) 475.11 627.22 P
(is some appropriate V) 72 615.22 T
(ARIETY) 158.7 615.22 T
(.) 194.05 615.22 T
72 579.88 523.3 589.88 C
72 579.88 523.3 589.88 R
7 X
0 K
V
72 588.88 541.01 588.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 555.87 523.3 565.88 C
72 555.87 523.3 565.88 R
7 X
0 K
V
72 564.87 541.01 564.87 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(9.3) 72 570.54 T
(TDFSTRING, make_nof_int) 108 570.54 T
1 10 Q
0.22 (Constants for both \337oats and strings use TDFSTRINGs; a TDFSTRING\050) 72 539.2 P
3 F
0.22 (k, n) 365.79 539.2 P
1 F
0.22 (\051 is an encoding of) 380.44 539.2 P
3 F
0.22 (n) 458.45 539.2 P
1 F
0.22 ( unsigned inte-) 463.44 539.2 P
(gers of size) 72 527.2 T
3 F
(k) 120.01 527.2 T
1 F
( bits. A constant string is just an particular example of) 124.45 527.2 T
0 F
(make_nof_int) 343.2 527.2 T
1 F
( \050S5.14.46\051:) 402.06 527.2 T
3 F
(v) 136.78 505.2 T
1 F
(:) 141.22 505.2 T
(V) 153 505.2 T
(ARIETY) 158.93 505.2 T
3 F
(str) 130.67 493.2 T
1 F
(:) 141.22 493.2 T
(TDFSTRING\050) 153 493.2 T
3 F
(k, n) 211.3 493.2 T
1 F
(\051) 225.73 493.2 T
2 F
(\256) 144 477.2 T
4 F
(EXP NOF\050) 162 477.2 T
7 F
(n) 209.2 477.2 T
4 F
(, INTEGER\050) 214.76 477.2 T
7 F
(v) 268.07 477.2 T
4 F
(\051\051) 273.07 477.2 T
1 F
0.38 (Each unsigned integer in) 72 459.2 P
3 F
0.38 (str) 175.12 459.2 P
1 F
0.38 ( must lie in the variety) 185.67 459.2 P
3 F
0.38 (v) 280.13 459.2 P
1 F
0.38 ( and the result is the constant array whose elements are the) 284.56 459.2 P
-0.19 (integers considered to be of V) 72 447.2 P
-0.19 (ARIETY) 189.96 447.2 P
3 F
-0.19 (v) 228.91 447.2 P
1 F
-0.19 (. An ASCI-C constant string might have) 232.7 447.2 P
3 F
-0.19 (v) 394.63 447.2 P
1 F
-0.19 ( =) 399.07 447.2 P
0 F
-0.19 (variety) 409.33 447.2 P
1 F
-0.19 (\050-128,127\051 and) 439.3 447.2 P
3 F
-0.19 (k) 500.82 447.2 P
1 F
-0.19 ( = 7;) 505.26 447.2 P
0.41 (however) 72 435.2 P
0.41 (,) 106.01 435.2 P
0 F
0.41 (make_nof_int) 111.42 435.2 P
1 F
0.41 ( can be used to make strings of any INTEGER V) 170.28 435.2 P
0.41 (ARIETY) 368.52 435.2 P
0.41 (; a the elements of a Unicode) 404.24 435.2 P
(string would be integers of size 16 bits.) 72 423.2 T
72 387.86 523.3 397.87 C
72 387.86 523.3 397.87 R
7 X
0 K
V
72 396.86 541.01 396.86 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 363.85 523.3 373.86 C
72 363.85 523.3 373.86 R
7 X
0 K
V
72 372.85 541.01 372.85 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(9.4) 72 378.53 T
(make_\337oating) 108 378.53 T
1 10 Q
0.93 (A \337oating constant uses a TDFSTRING which contains the ASCI characters of a expansion of the number to) 72 347.19 P
(some base in) 72 335.19 T
0 F
(make_\337oating) 126.13 335.19 T
1 F
( \050S5.14.42\051:) 186.66 335.19 T
3 F
(f) 138.44 313.19 T
1 F
(:) 141.22 313.19 T
(FLOA) 153 313.19 T
(TING_V) 177.99 313.19 T
(ARIETY) 212.78 313.19 T
3 F
(rm) 130.12 301.19 T
1 F
(:) 141.22 301.19 T
(ROUNDING_MODE) 153 301.19 T
3 F
(sign) 124.56 289.19 T
1 F
(:) 141.22 289.19 T
(BOOL) 153 289.19 T
3 F
(mantissa) 105.68 277.19 T
1 F
(:) 141.22 277.19 T
(TDFSTRING\050) 153 277.19 T
3 F
(k, n) 211.3 277.19 T
1 F
(\051) 225.73 277.19 T
3 F
(base) 122.9 265.19 T
1 F
(:) 141.22 265.19 T
(NA) 153 265.19 T
(T) 166.32 265.19 T
3 F
(exponent) 105.14 253.19 T
1 F
(:) 141.22 253.19 T
(SIGNED_NA) 153 253.19 T
(T) 207.96 253.19 T
2 F
(\256) 144 237.19 T
4 F
(EXP FLOA) 162 237.19 T
(TING\050) 210.14 237.19 T
7 F
(f) 237.35 237.19 T
4 F
(\051) 240.13 237.19 T
1 F
-0.01 (For a normal \337oating point number) 72 219.19 P
-0.01 (, each integer in) 212.29 219.19 P
3 F
-0.01 (mantissa) 278.57 219.19 P
1 F
-0.01 ( is either the ASCI \324.\325-symbol or the ASCI represen-) 314.11 219.19 P
0.3 (tation of a digit of the representation in the given) 72 207.19 P
3 F
0.3 (base) 273.18 207.19 P
1 F
0.3 (; i.e. if c is the ASCI symbol, the digit value is c-\3250\325. The) 291.5 207.19 P
0.03 (resulting \337oating point number has SHAPE FLOA) 72 195.19 P
0.03 (TING\050f\051 and value) 273.75 195.19 P
3 F
0.03 (mantissa) 351.27 195.19 P
1 F
0.03 ( *) 386.81 195.19 P
3 F
0.03 ( base) 394.34 195.19 P
3 8 Q
0.03 ( exponent) 415.19 199.19 P
1 10 Q
0.03 ( rounded according) 446.08 195.19 P
0.25 (to) 72 183.19 P
3 F
0.25 (rm) 82.53 183.19 P
1 F
0.25 (. Usually the base will be 10 \050sometimes 2\051 and the rounding mode) 93.63 183.19 P
0 F
0.25 (to_near) 367.28 183.19 P
0.25 (est) 399.85 183.19 P
1 F
0.25 (. Any \337oating-point evalua-) 411.5 183.19 P
0.6 (tion of expressions done at translate-time will be done to an accuracy greater that implied by the FLOA) 72 171.19 P
0.6 (TING_) 494.43 171.19 P
(V) 72 159.19 T
(ARIETY involved, so that \337oating constants will be as accurate as the platform permits.) 77.93 159.19 T
FMENDPAGE
%%EndPage: "32" 38
%%Page: "33" 38
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 33) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(9.5) 72 750.56 T
(make_null_ptr) 108 750.56 T
(, make_null_local_lv) 195.34 750.56 T
(, make_null_pr) 317.41 750.56 T
(oc) 408.12 750.56 T
1 10 Q
0.57 (Constants are also provided to give unique null values for pointers, label values and procs i.e.:) 72 719.22 P
0 F
0.57 (make_null_ptr) 459.99 719.22 P
1 F
0.17 (\050S5.14.49\051,) 72 707.22 P
0 F
0.17 (make_null_local_lv) 119.37 707.22 P
1 F
0.17 ( \050S5.14.47\051and) 202.11 707.22 P
0 F
0.17 (make_null_pr) 264.08 707.22 P
0.17 (oc) 323.88 707.22 P
1 F
0.17 ( \050S5.14.48\051. Any signi\336cant use of these values) 333.32 707.22 P
0.37 (\050e.g. taking the contents of a null pointer\051 is unde\336ned, but they can be assigned and used in tests in the normal) 72 695.22 P
(way) 72 683.22 T
(.) 88 683.22 T
FMENDPAGE
%%EndPage: "33" 39
%%Page: "34" 39
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 34) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(10) 72 741.88 T
(T) 99 741.88 T
(okens and APIs) 112.79 741.88 T
1 10 Q
-0.24 (All of the examples of the use of T) 72 665.19 P
-0.24 (OKENs so far given have really been as abbreviations for commonly used con-) 209.23 665.19 P
0.23 (structs, e.g. the EXP OFFSETS for \336elds of structures. However) 72 653.19 P
0.23 (, the real justi\336cation for T) 331.53 653.19 P
0.23 (OKENs are their use) 439.63 653.19 P
(as abstractions for things de\336ned in libraries or application program interfaces \050APIs\051.) 72 641.19 T
72 605.84 523.3 615.85 C
72 605.84 523.3 615.85 R
7 X
0 K
V
72 614.84 541.01 614.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 581.84 523.3 591.84 C
72 581.84 523.3 591.84 R
7 X
0 K
V
72 590.84 541.01 590.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(10.1) 72 596.51 T
(Application pr) 108 596.51 T
(ogramming interfaces) 195.21 596.51 T
1 10 Q
0.12 (APIs usually do not give complete language de\336nitions of the operations and values that they contain; generally) 72 565.17 P
0.12 (,) 520.8 565.17 P
0.88 (they are de\336ned informally in English giving relationships between the entities within them. An API designer) 72 553.17 P
0.12 (should allow implementors the opportunity of choosing actual de\336nitions which \336t their hardware and the possi-) 72 541.17 P
(bility of changing them as better algorithms or representations become available.) 72 529.17 T
0.44 (The most commonly quoted example is the representation of the type FILE and its related operations in C. The) 72 507.17 P
1.6 (ANSI C de\336nition gives no common representation for FILE; its implementation is de\336ned to be platform-) 72 495.17 P
0.27 (dependent. A TDF producer can assume nothing about FILE; not even that it is a structure. The only things that) 72 483.17 P
0.24 (can alter or create FILEs are also entities in the Ansi-C API and they will always refer to FILEs via a C pointer) 72 471.17 P
0.24 (.) 520.8 471.17 P
0.29 (Thus TDF abstracts FILE as a SHAPE T) 72 459.17 P
0.29 (OKEN with no parameters,) 236.82 459.17 P
0 F
0.29 (make_tok) 349.84 459.17 P
1 F
0.29 (\050T_FILE\051 say) 392.04 459.17 P
0.29 (. Any program that) 446.36 459.17 P
(uses FILE would have to include a T) 72 447.17 T
(OKDEC introducing T_FILE:) 219.22 447.17 T
0 F
(make_tokdec) 108 425.17 T
4 F
(\050T_FILE,) 164.63 425.17 T
0 F
(shape) 206.29 425.17 T
4 F
(\050\051\051) 230.72 425.17 T
1 F
(and anywhere that it wished to refer to the SHAPE of FILE it would do:) 72 410.17 T
0 F
(shape_apply_token) 108 388.17 T
4 F
(\050) 190.2 388.17 T
0 F
(make_tok) 193.52 388.17 T
4 F
(\050T_FILE\051, \050\051\051) 235.72 388.17 T
1 F
0.37 (Before this program is translated on a given platform, the actual SHAPE of FILE must be supplied. This would) 72 373.17 P
-0.1 (be done by linking a TDF CAPSULE which supplies the T) 72 361.17 P
-0.1 (OKDEF for the SHAPE of FILE which is particular to) 306.26 361.17 P
(the tar) 72 349.17 T
(get platform.) 97.08 349.17 T
0.31 (Many of the C operations which use FILEs are explicitly allowed to be expanded as either procedure calls or as) 72 327.17 P
1.27 (macros. For example, putc\050c,f\051 may be implemented either as a procedure call or as the expansion of macro) 72 315.17 P
1 (which uses the \336elds of f directly) 72 303.17 P
1 (. Thus, it is quite natural for putc\050c, f\051 to be represented in TDF as an EXP) 210.03 303.17 P
0.32 (T) 72 291.17 P
0.32 (OKEN with two EXP parameters which allows it to be expanded in either way) 77.93 291.17 P
0.32 (. Of course, this would be quite) 395.91 291.17 P
0.69 (distinct from the use of putc as a value \050as a proc parameter of a procedure for example\051 which would require) 72 279.17 P
0.37 (some other representation. One such representation that comes to mind might be to simply to make a T) 72 267.17 P
0.37 (AGDEC) 488.87 267.17 P
0.52 (for the putc value, supplying its T) 72 255.17 P
0.52 (AGDEF in the Ansi API CAPSULE for the platform. This might prove to be) 209.51 255.17 P
0.07 (rather short-sighted, since it denies us the possibility that the putc value itself might be expanded from other val-) 72 243.17 P
0.13 (ues and hence it would be better as another parameterless T) 72 231.17 P
0.13 (OKEN. I have not come across an actual API expan-) 311.22 231.17 P
(sion for the putc value as other than a simple T) 72 219.17 T
(AG; however the FILE* value stdin is sometimes expressed as:) 258.85 219.17 T
4 F
(#de\336ne stdin &_iob[0]) 108 197.17 T
1 F
0.51 (which illustrates the point. It is better to have all of the interface of an API expressed as T) 72 182.17 P
0.51 (OKENs to give both) 439.87 182.17 P
(generality and \337exibility across dif) 72 170.17 T
(ferent platforms.) 211.17 170.17 T
FMENDPAGE
%%EndPage: "34" 40
%%Page: "35" 40
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 35) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(10.2) 72 750.56 T
(Linking to APIs) 108 750.56 T
1 10 Q
-0.12 (In general, each API requires platform-dependent de\336nitions to be supplied by a combination of TDF linking and) 72 719.22 P
-0.2 (system linking for that platform. This is illustrated in the following diagram giving the various phases involved in) 72 707.22 P
(producing a runnable program.) 72 695.22 T
0.3 (There will be CAPSULEs for each API on each platform giving the expansions for the T) 72 301.22 P
0.3 (OKENs involved, usu-) 431.36 301.22 P
-0.14 (ally as uses of identi\336ers which will be supplied by system linking from some libraries. These CAPSULEs would) 72 289.22 P
0.1 (be derived from the header \336les on the platform for the API in question, usually using some automatic tools. For) 72 277.22 P
1.04 (example, there will be a TDF CAPSULE \050derived from <stdio.h>\051 which de\336nes the T) 72 265.22 P
1.04 (OKEN T_FILE as the) 432.19 265.22 P
-0.17 (SHAPE for FILE, together with de\336nitions for the T) 72 253.22 P
-0.17 (OKENs for putc, stdin, etc., in terms of identi\336ers which will) 280.1 253.22 P
(be found in the library libc.a.) 72 241.22 T
0 F
(10.2.1) 72 215.22 T
(T) 108 215.22 T
(arget independent headers, unique_extern) 113.75 215.22 T
1 F
2.27 (Any producer which uses an API will use system independent information to give the common interface) 72 198.22 P
0.2 (T) 72 186.22 P
0.2 (OKENs for this API. In the C producer) 77.93 186.22 P
0.2 (, this is provided by header \336les using pragmas, which tell the producer) 235.5 186.22 P
0.02 (which T) 72 174.22 P
0.02 (OKENs to use for the particular constructs of the API . In any tar) 104.87 174.22 P
0.02 (get-independent CAPSULE which uses) 365.29 174.22 P
-0.24 (the API, these T) 72 162.22 P
-0.24 (OKENs would be introduced as T) 136.06 162.22 P
-0.24 (OKDECs and made globally accessible by using) 270.41 162.22 P
0 F
-0.24 (make_linkex-) 465.55 162.22 P
0.53 (tern) 72 150.22 P
1 F
0.53 ( \050S5.21.1\051. For a world-wide standard API, the EXTERNAL\050S5.15\051 \322name\323 for a T) 89.76 150.22 P
0.53 (OKEN used by) 429.83 150.22 P
0 F
0.53 (make_) 494.98 150.22 P
-0.25 (linkextern) 72 138.22 P
1 F
-0.25 ( should be provided by an application of) 115.87 138.22 P
0 F
-0.25 (unique_extern) 277.67 138.22 P
-0.25 (\050S5.15.2\051) 341.56 138.22 P
1 F
-0.25 (on a UNIQUE drawn from a central) 381.01 138.22 P
-0.04 (repository of names for entities in standard APIs; this repository would form a kind of super) 72 126.22 P
-0.04 (-standard for naming) 439.55 126.22 P
-0.1 (conventions in all possible APIs. The mechanism for controlling this super) 72 114.22 P
-0.1 (-standard has yet to be set up, so at the) 369.83 114.22 P
(moment all EXTERN names are created by) 72 102.22 T
0 F
(string_extern) 248.25 102.22 T
1 F
( \050S5.15.1\051.) 305.43 102.22 T
72 72 523.3 769.9 C
72 319.88 523.3 669.88 C
71.58 319.88 523.72 669.88 R
7 X
0 K
V
73 325.6 516.58 659.88 R
V
0.5 H
2 Z
0 X
N
76.58 513.46 138.72 548.46 C
76.58 513.46 138.72 548.46 R
7 X
0 K
V
90 450 29.29 14.64 108.72 530.96 G
0.5 H
2 Z
0 X
90 450 29.29 14.64 108.72 530.96 A
1 10 Q
(PRODUCER) 84.43 527.74 T
72 319.88 523.3 669.88 C
207.29 507.03 270.15 554.88 C
207.29 507.03 270.15 554.88 R
7 X
0 K
V
90 450 30 22.14 238.72 531.31 G
0.5 H
2 Z
0 X
90 450 30 22.14 238.72 531.31 A
1 10 Q
(LINKAGE) 216.58 521.31 T
(TDF) 230.15 538.46 T
275.04 534.62 286.58 531.31 275.04 528 275.04 531.31 4 Y
V
272.29 531.31 275.04 531.31 2 L
N
72 319.88 523.3 669.88 C
326.58 504.88 403.01 559.88 C
326.58 504.88 403.01 559.88 R
7 X
0 K
V
90 450 37.5 22.14 364.08 532.03 G
0.5 H
2 Z
0 X
90 450 37.5 22.14 364.08 532.03 A
1 10 Q
(TRANSLA) 333.01 533.46 T
(T) 377.98 533.46 T
(OR) 383.91 533.46 T
(FOR) 335.86 522.03 T
0 F
(P) 364.43 522.03 T
72 319.88 523.3 669.88 C
442.29 512.74 503.72 550.6 C
442.29 512.74 503.72 550.6 R
7 X
0 K
V
90 450 28.57 17.14 474.43 531.31 G
0.5 H
2 Z
0 X
90 450 28.57 17.14 474.43 531.31 A
1 10 Q
(SYSTEM) 450.15 534.17 T
(LINKAGE) 450.15 524.17 T
72 319.88 523.3 669.88 C
75.15 438.46 137.29 474.17 C
75.15 438.46 137.29 474.17 R
7 X
0 K
V
76.58 442.03 135.15 470.6 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(LANGUAGE) 79.43 461.31 T
(TEXT) 88.72 447.74 T
72 319.88 523.3 669.88 C
75.15 584.88 155.86 632.03 C
75.15 584.88 155.86 632.03 R
7 X
0 K
V
77.29 588.46 153.72 630.6 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(T) 80.86 621.31 T
(ARGET) 86.17 621.31 T
(INDEPENDENT) 80.86 611.31 T
(API \322headers\323) 83.72 598.46 T
72 319.88 523.3 669.88 C
107.94 554.93 104.43 543.46 101.33 555.05 104.64 554.99 4 Y
0 X
0 K
V
105.15 583.46 104.64 554.99 2 L
0.5 H
2 Z
N
102.55 503.35 105.86 514.88 109.17 503.35 105.86 503.35 4 Y
V
105.86 474.17 105.86 503.35 2 L
N
197.2 532.55 208.72 529.17 197.16 525.94 197.18 529.25 4 Y
V
141.79 529.6 197.18 529.24 2 L
N
311.52 535.51 323 532.03 311.42 528.9 311.47 532.21 4 Y
V
276.58 532.74 311.47 532.2 2 L
N
435.76 536.05 447.29 532.74 435.76 529.43 435.76 532.74 4 Y
V
401.58 532.74 435.76 532.74 2 L
N
1 10 Q
(CAPSULE) 150.86 535.6 T
158.01 424.88 222.29 468.46 C
158.01 424.88 222.29 468.46 R
7 X
0 K
V
159.43 427.74 220.15 466.31 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(Other tar) 165.86 456.31 T
(get-) 201.48 456.31 T
(independent) 165.86 446.31 T
(CAPSULEs) 165.86 436.31 T
72 319.88 523.3 669.88 C
238.01 656.46 237.14 559.31 2 L
3 H
2 Z
0 X
0 K
N
239.43 506.45 239.43 390.6 2 L
N
268.01 589.17 334.43 637.03 C
268.01 589.17 334.43 637.03 R
7 X
0 K
V
272.29 591.31 330.15 631.31 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(CAPSULES) 278.01 618.46 T
(speci\336c to) 279.43 607.74 T
(platform) 278.72 596.31 T
0 F
(P) 315.64 596.31 T
72 319.88 523.3 669.88 C
259.95 557.8 249.42 552.03 255.29 562.5 257.62 560.15 4 Y
0 X
0 K
V
283.01 585.6 257.63 560.14 2 L
0.5 H
2 Z
N
1 10 Q
(Linked) 277.29 538.46 T
(CAPSULE) 278.01 520.6 T
(.o \336le) 413.01 537.03 T
472.74 562.85 469.43 551.31 466.13 562.85 469.43 562.85 4 Y
V
469.43 586.31 469.43 562.85 2 L
N
440.86 437.74 508.01 473.46 C
440.86 437.74 508.01 473.46 R
7 X
0 K
V
445.15 442.03 503.72 471.31 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(RUNNABLE) 448.01 460.6 T
(PROGRAM) 448.01 450.6 T
72 319.88 523.3 669.88 C
475.6 483.28 472.29 471.74 468.98 483.28 472.29 483.28 4 Y
0 X
0 K
V
472.29 511.31 472.29 483.28 2 L
0.5 H
2 Z
N
441.58 586.31 508.01 632.03 C
441.58 586.31 508.01 632.03 R
7 X
0 K
V
446.58 588.46 501.58 629.17 R
V
0.5 H
2 Z
0 X
N
1 10 Q
(Other .o and) 450.15 617.74 T
(.a \336les) 450.15 607.74 T
(e.g libc.a) 450.15 597.74 T
72 319.88 523.3 669.88 C
214.57 505.2 224.43 512.03 219.69 501.01 217.13 503.1 4 Y
0 X
0 K
V
190.15 469.88 217.13 503.1 2 L
0.5 H
2 Z
N
3 10 Q
(T) 166.58 622.74 T
(OKEN decs) 171.95 622.74 T
(with defs in) 166.58 612.74 T
1 F
( ...) 212.67 612.74 T
3 F
(... often using names) 338.01 619.88 T
(de\336ned in ...) 348.01 606.31 T
(=) 158.72 623.46 T
252.95 619.81 264.43 616.31 252.84 613.19 252.9 616.5 4 Y
4 X
V
220.15 617.03 252.9 616.5 2 L
N
437.18 613.91 448.72 610.6 437.18 607.29 437.18 610.6 4 Y
V
394.64 610.6 437.18 610.6 2 L
N
6 12 Q
0 X
(PLA) 434.43 395.6 T
(TFORM P) 456.43 395.6 T
(ON) 458.72 409.88 T
(ON ANY PLA) 84.43 395.6 T
(TFORM) 153.73 395.6 T
245.15 382.03 417.29 417.74 C
245.15 382.03 417.29 417.74 R
7 X
0 K
V
6 12 Q
0 X
(ON ANY PLA) 253.72 406.31 T
(TFORM WITH) 323.02 406.31 T
(P SPECIFIC API LINKAGES) 253.72 394.31 T
72 319.88 523.3 669.88 C
0 10 Q
0 X
0 K
(TDF PRODUCTION, LINKING AND TRANSLA) 180.15 354.17 T
(TING) 394.01 354.17 T
423.01 658.46 422.14 549.31 2 L
3 H
2 Z
N
423.72 529.17 423.72 394.31 2 L
N
1 F
(API) 448.72 571.31 T
(Linkages) 474.43 571.31 T
72 72 523.3 769.9 C
0 0 595.3 841.9 C
FMENDPAGE
%%EndPage: "35" 41
%%Page: "36" 41
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 36) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.65 (An interesting example in the use of T) 72 763.23 P
0.65 (OKENs comes in abstracting \336eld names. Often, an API will say some-) 229.91 763.23 P
0.43 (thing like \322the type W) 72 751.23 P
0.43 (idget is a structure with \336elds alpha, beta ...\323 without specifying the order of the \336elds or) 162.16 751.23 P
0.64 (whether the list of \336elds is complete. The \336eld selection operations for W) 72 739.23 P
0.64 (idget should then be expressed using) 373.25 739.23 P
-0.05 (EXP OFFSET T) 72 727.23 P
-0.05 (OKENs; each \336eld would have its own T) 137.8 727.23 P
-0.05 (OKEN giving its of) 301.89 727.23 P
-0.05 (fset which will be \336lled in when the) 380.12 727.23 P
-0.07 (tar) 72 715.23 P
-0.07 (get is known. This gives implementors on a particular platform the opportunity to reorder \336elds or add to them) 82.36 715.23 P
(as they like; it also allows for extension of the standard in the same way) 72 703.23 T
(.) 358.93 703.23 T
-0.03 (The most common SOR) 72 681.23 P
-0.03 (T) 168.21 681.23 P
-0.03 (s of T) 173.62 681.23 P
-0.03 (OKENs used for APIs are SHAPEs to represent types, and EXPs to represent val-) 196.7 681.23 P
0.19 (ues, including procedures and constants. NA) 72 669.23 P
0.19 (T) 250.33 669.23 P
0.19 (s and V) 255.73 669.23 P
0.19 (ARIETYs are also sometimes used where the API does not) 285.36 669.23 P
0.28 (specify the types of integers involved. The other SOR) 72 657.23 P
0.28 (T) 288.76 657.23 P
0.28 (s are rarely used in APIs; indeed it is dif) 294.17 657.23 P
0.28 (\336cult to imagine) 457.21 657.23 P
3 F
0.6 (any) 72 645.23 P
1 F
0.6 ( realistic use of T) 86.43 645.23 P
0.6 (OKENs of SOR) 158.06 645.23 P
0.6 (T BOOL. However) 223.07 645.23 P
0.6 (, the criterion for choosing which SOR) 301.32 645.23 P
0.6 (T) 459.51 645.23 P
0.6 (s are available) 464.92 645.23 P
0.47 (for T) 72 633.23 P
0.47 (OKENisation is not their immediate utility) 92.54 633.23 P
0.47 (, but that the structural integrity and simplicity of TDF is main-) 264.97 633.23 P
(tained. It is fairly obvious that having BOOL T) 72 621.23 T
(OKENs will cause no problems, so we may as well allow them.) 260.32 621.23 T
72 585.89 523.3 595.9 C
72 585.89 523.3 595.9 R
7 X
0 K
V
72 594.89 541.01 594.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 561.88 523.3 571.89 C
72 561.88 523.3 571.89 R
7 X
0 K
V
72 570.88 541.01 570.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(10.3) 72 576.56 T
(Language pr) 108 576.56 T
(ogramming interfaces) 184.33 576.56 T
1 10 Q
0.53 (So far) 72 545.22 P
0.53 (, I have been speaking as though a T) 96.27 545.22 P
0.53 (OKENised API could only be some library interface, built on top of) 246.02 545.22 P
0.35 (some language, like xpg3, posix, X etc. on top of C. However) 72 533.22 P
0.35 (, it is possible to consider the constructions of the) 322.49 533.22 P
0.78 (language itself as ideal candidates for T) 72 521.22 P
0.78 (OKENisation. For example, the C for) 235.27 521.22 P
0.78 (-statement could be expressed as) 389.16 521.22 P
0.07 (T) 72 509.22 P
0.07 (OKEN with four parameters) 77.93 509.22 P
1 8 Q
0.06 (1) 191.66 513.22 P
1 10 Q
0.07 (. This T) 195.66 509.22 P
0.07 (OKEN could be expanded in TDF in several dif) 226.99 509.22 P
0.07 (ferent ways, all giving the) 418.92 509.22 P
0.17 (correct semantics of a for) 72 497.22 P
0.17 (-statement. A translator \050or other tools\051 could choose the expansion it wants depending) 174.04 497.22 P
1 (on context and the properties of the parameters. The C producer could give a default expansion which a lazy) 72 485.22 P
0.14 (translator writer could use, but others might use expansions which might be more advantageous. This idea could) 72 473.22 P
0.12 (be extended to virtually all the constructions of the language, giving what is in ef) 72 461.22 P
0.12 (fect a C-language API; perhaps) 397.38 461.22 P
0.29 (this might be called more properly a language programming interface \050LPI\051. Thus, we would have T) 72 449.22 P
0.29 (OKENs for) 477.21 449.22 P
(C for) 72 437.22 T
(-statements, C conditionals, C procedure calls, C procedure de\336nitions etc.) 92.62 437.22 T
1 8 Q
(2) 391.58 441.22 T
1 10 Q
(.) 395.58 437.22 T
0.61 (The notion of a producer for any language working to an LPI speci\336c to the constructs of the language is very) 72 415.22 P
0.64 (attractive. It could use dif) 72 403.22 P
0.64 (ferent T) 176.8 403.22 P
0.64 (OKENs to re\337ect the subtle dif) 209.17 403.22 P
0.64 (ferences between uses of similar constructs in) 336.27 403.22 P
-0.07 (dif) 72 391.22 P
-0.07 (ferent languages which might be dif) 82.92 391.22 P
-0.07 (\336cult or impossible to detect from their expansions, but which could allow) 226.46 391.22 P
0.1 (better optimisations in the object code. For example, Fortran procedures are slightly dif) 72 379.22 P
0.1 (ferent from C procedures) 422.25 379.22 P
0.13 (in that they do not allow aliasing between parameters and globals. While application of the standard TDF proce-) 72 367.22 P
0.15 (dure calls would be semantically correct, knowledge of that the non-aliasing rule applies would allow some pro-) 72 355.22 P
0.56 (cedures to be translated to more ef) 72 343.22 P
0.56 (\336cient code. A translator without knowledge of the semantics implicit in the) 212.86 343.22 P
-0.19 (T) 72 331.22 P
-0.19 (OKENs involved would still produce correct code, but one which knew about them could take advantage of that) 77.93 331.22 P
(knowledge.) 72 319.22 T
0.55 (I also think that LPIs would be a very useful tool for crystalising ideas on how languages should be translated,) 72 297.22 P
0.88 (allowing one to experiment with expansions not thought of by the producer writer) 72 285.22 P
0.88 (. This decoupling is also an) 409.53 285.22 P
0.9 (escape clause allowing the producer writer to defer the implementation of a construct completely to translate-) 72 273.22 P
-0.17 (time or link-time, as is done at the moment in C for of) 72 261.22 P
-0.17 (f-stack allocation. As such it also serves as a useful test-bed) 286.02 261.22 P
(for T) 72 249.22 T
(OKEN constructions which may in future become new constructors of core TDF) 92.08 249.22 T
(.) 414.09 249.22 T
72 92 523.3 106.98 C
72 92 523.3 106.98 R
7 X
0 K
V
81 104.96 225 104.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. Exercise for the reader: what are the SOR) 90 86.67 T
(T) 230.96 86.67 T
(s of these parameters?) 235.28 86.67 T
(2. The current C producer does this for some of the constructs, but not in any systematic manner; perhaps it will change.) 90 76.67 T
FMENDPAGE
%%EndPage: "36" 42
%%Page: "37" 42
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 37) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(1) 72 741.88 T
(1) 82.67 741.88 T
(TDF transformations) 99 741.88 T
1 10 Q
-0.02 (TDF to TDF transformations form the basis of most of the tools of TDF) 72 665.19 P
-0.02 (, including translators. TDF has a rich set) 358.27 665.19 P
1.05 (of easily performed transformations; this is mainly due to its algebraic nature, the liberality of its sequencing) 72 653.19 P
0.88 (rules, and the ease with which one can introduce new names over limited scopes. For example, a translator is) 72 641.19 P
(always free to transform:) 72 629.19 T
0 F
(assign) 108 607.19 T
4 F
(\050e1, e2\051) 134.11 607.19 T
1 F
(to:) 72 592.19 T
0 F
(identify) 108 570.19 T
4 F
(\050empty) 140.76 570.19 T
(, new_tag, e1,) 170.57 570.19 T
0 F
(assign) 236.13 570.19 T
4 F
(\050) 262.23 570.19 T
0 F
(obtain_tag) 265.56 570.19 T
4 F
(\050new_tag\051, e2\051\051) 311.1 570.19 T
1 F
0.25 (i.e. identify the evaluation of the left-hand side of the assignment with a new T) 72 555.19 P
0.25 (AG and use that T) 389.98 555.19 P
0.25 (AG as the left-) 463.44 555.19 P
0.32 (hand operand of a new assignment in the body of the identi\336cation. Note that the reverse transformation is only) 72 543.19 P
0.17 (valid if the evaluation of e1 does not side-ef) 72 531.19 P
0.17 (fect the evaluation of e2. A producer would have had to use the sec-) 249.13 531.19 P
-0.06 (ond form if it wished to evaluate e1 before e2. The de\336nition of) 72 519.19 P
0 F
-0.06 (assign) 328.31 519.19 P
1 F
-0.06 ( allows its operands to be evaluated in any) 354.42 519.19 P
1.03 (order while) 72 507.19 P
0 F
1.03 (identify) 122.36 507.19 P
1 F
1.03 ( insists that the evaluation of its) 155.13 507.19 P
3 F
1.03 (de\336nition) 291.47 507.19 P
1 F
1.03 ( is conceptually complete before starting on its) 329.23 507.19 P
3 F
(body) 72 495.19 T
1 F
(.) 90.78 495.19 T
1.22 (Why would a translator wish to make the more complicated form from the simpler one? This would usually) 72 473.19 P
-0.08 (depend on the particular forms of e1 and e2 as well as the machine idioms available for implementing the assign-) 72 461.19 P
-0.08 (ment. If, for example, the joint evaluation of e1 and e2 used more evaluation registers than is available, the trans-) 72 449.19 P
0.99 (formation is probably a good idea. It would not necessarily commit one to putting the new tag value into the) 72 437.19 P
-0.16 (stack; some other more global criteria might lead one to allocate it into a register disjoint from the evaluation reg-) 72 425.19 P
0.92 (isters. In general, this kind of transformation is used to modify the operands of TDF constructions so that the) 72 413.19 P
0.21 (code-production phase of the translator can just \322churn the handle\323 knowing that the operands are already in the) 72 401.19 P
(correct form for the machine idioms.) 72 389.19 T
-0.03 (T) 72 367.19 P
-0.03 (ransformations like this are also used to give optimisations which are lar) 77.76 367.19 P
-0.03 (gely independent of the tar) 366.8 367.19 P
-0.03 (get architec-) 473.65 367.19 P
0.03 (ture. In general, provided that the sequencing rules are not violated, any EXP construction, F\050X\051, say) 72 355.19 P
0.03 (, where X is) 474.9 355.19 P
(some inner EXP) 72 343.19 T
(, can be replaced by:) 136.4 343.19 T
0 F
(identify) 110.78 321.19 T
4 F
(\050empty) 143.54 321.19 T
(, new_tag, X, F\050) 173.34 321.19 T
0 F
(obtain_tag) 243.9 321.19 T
4 F
(\050new_tag\051\051\051.) 289.43 321.19 T
1 F
-0.21 (This includes the extraction of expressions which are constant over a loop; if F was some) 72 306.19 P
0 F
-0.21 (r) 427.86 306.19 P
-0.21 (epeat) 432.11 306.19 P
1 F
-0.21 ( construction and) 454.87 306.19 P
(one can show that the EXP X is invariant over the repeat, the transformation does the constant extraction.) 72 294.19 T
0.01 (Most of the transformations performed by translators are of the above form, but there are many others. Particular) 72 272.19 P
0.08 (machine idioms might lead to transformations like changing a test \050i>=1\051 to \050i>0\051 because the test against zero is) 72 260.19 P
-0.07 (faster; replacing multiplication by a constant integer by shifts and adds because multiplication is slow; and so on.) 72 248.19 P
0.38 (T) 72 236.19 P
0.38 (ar) 77.41 236.19 P
0.38 (get independent transformations include things like procedure inlining and loop unrolling. Often these tar) 84.99 236.19 P
0.38 (get) 511.08 236.19 P
-0.12 (independent transformations can be pro\336tably done in terms of the T) 72 224.19 P
-0.12 (OKENs of an LPI; loop unrolling is an obvi-) 345.45 224.19 P
(ous example.) 72 212.19 T
72 176.84 523.3 186.85 C
72 176.84 523.3 186.85 R
7 X
0 K
V
72 185.85 541.01 185.85 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 152.84 523.3 162.85 C
72 152.84 523.3 162.85 R
7 X
0 K
V
72 161.84 541.01 161.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(1) 72 167.51 T
(1.1) 78.23 167.51 T
(T) 108 167.51 T
(ransformations as de\336nitions) 116.3 167.51 T
1 10 Q
0.58 (As well being a vehicle for expressing optimisation, TDF transformations can be used as the basis for de\336ning) 72 136.17 P
0.33 (TDF) 72 124.17 P
0.33 (. In principle, if we were to de\336ne all of the allowable transformations of the TDF constructions, we would) 90.08 124.17 P
0.29 (have a complete de\336nition of TDF as the initial model of the TDF algebra. This would be a fairly impracticable) 72 112.17 P
1.17 (project, since the totality of the rules including all the simple constructs would be very unwieldy) 72 100.17 P
1.17 (, dif) 474.21 100.17 P
1.17 (\336cult to) 491.3 100.17 P
-0.07 (check for inconsistencies and would not add much illumination to the de\336nition. However) 72 88.17 P
-0.07 (, knowledge of allowa-) 431.36 88.17 P
-0.09 (ble transformations of TDF can often answer questions of the meaning of diverse constructs by relating them to a) 72 76.17 P
FMENDPAGE
%%EndPage: "37" 43
%%Page: "38" 43
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 38) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.54 (single construct. What follows is an alphabet of generic transformations which can often help to answer knotty) 72 763.23 P
(questions. Here, E[X \134 Y] denotes an EXP E with all internal occurrences of X replaced by Y) 72 751.23 T
(.) 442.92 751.23 T
4 F
({A}) 90 729.23 T
-0.55 (If F is any non order-specifying) 117 729.23 P
4 8 Q
-0.44 (1) 250.92 733.23 P
4 10 Q
-0.55 ( EXP constructor and E is one of the EXP operands of F) 255.37 729.23 P
-0.55 (, then:) 496.05 729.23 P
(F\050... , E, ...\051) 126 714.23 T
2 14 Q
(\336) 178.77 714.23 T
0 10 Q
( identify) 192.58 714.23 T
4 F
(\050empty) 227.84 714.23 T
(, newtag, E, F\050... ,) 257.65 714.23 T
0 F
(obtain_tag) 339.31 714.23 T
4 F
(\050newtag\051, ...\051\051) 384.85 714.23 T
({B}) 90 699.23 T
(If E is a non side-ef) 117 699.23 T
(fecting) 202.37 699.23 T
4 8 Q
(2) 231.82 703.23 T
4 10 Q
( EXP and none of the variables used in E are assigned to in B:) 236.26 699.23 T
0 F
(identify) 126 684.23 T
4 F
(\050v) 158.76 684.23 T
(, tag, E, B\051) 166.35 684.23 T
2 14 Q
(\336) 216.35 684.23 T
4 10 Q
( B[) 230.16 684.23 T
0 F
(obtain_tag) 242.38 684.23 T
4 F
(\050tag\051 \134 E]) 287.92 684.23 T
({C}) 90 669.23 T
(If all uses of tg in B are of the form) 117 669.23 T
0 F
(contents) 271.99 669.23 T
4 F
(\050shape\050E\051,) 307.52 669.23 T
0 F
(obtain_tag) 356.96 669.23 T
4 F
(\050tg\051\051:) 402.49 669.23 T
0 F
(variable) 126 654.23 T
4 F
(\050v) 160.98 654.23 T
(, tg, E, B\051) 168.57 654.23 T
2 14 Q
(\336) 126 639.23 T
0 10 Q
(identify) 142.59 639.23 T
4 F
(\050v) 175.35 639.23 T
(, nt, E, B) 182.94 639.23 T
0 F
([contents) 221.28 639.23 T
4 F
(\050shape\050E\051,) 260.13 639.23 T
0 F
(obtain_tag) 309.57 639.23 T
4 F
(\050tg\051\051 \134) 355.1 639.23 T
0 F
(obtain_tag) 381.76 639.23 T
4 F
(\050nt\051]\051) 427.29 639.23 T
({D}) 90 624.23 T
0 F
(sequence) 117 624.23 T
4 F
(\050\050S) 155.31 624.23 T
4 8 Q
(1) 168.63 621.73 T
4 10 Q
(, ... , S) 173.08 624.23 T
4 8 Q
(n) 201.97 621.73 T
4 10 Q
(\051,) 206.42 624.23 T
0 F
(sequence) 215.3 624.23 T
4 F
(\050\050P) 253.61 624.23 T
4 8 Q
(1) 266.93 621.73 T
4 10 Q
(, ..., P) 271.38 624.23 T
4 8 Q
(m) 297.49 621.73 T
4 10 Q
(\051, R\051) 304.15 624.23 T
2 14 Q
(\333) 126 609.23 T
0 10 Q
( sequence) 140.58 609.23 T
4 F
(\050\050S) 181.39 609.23 T
4 8 Q
(1) 194.71 606.73 T
4 10 Q
(, ..., S) 199.16 609.23 T
4 8 Q
(n) 225.27 606.73 T
4 10 Q
(, P) 229.72 609.23 T
4 8 Q
(1) 241.94 606.73 T
4 10 Q
(, ..., P) 246.39 609.23 T
4 8 Q
(m) 272.5 606.73 T
4 10 Q
(\051, R\051) 279.16 609.23 T
({E}) 90 594.23 T
(If S) 117 594.23 T
4 8 Q
(i) 132 591.73 T
4 10 Q
( =) 133.78 594.23 T
0 F
( sequence) 142.39 594.23 T
4 F
(\050\050P) 183.2 594.23 T
4 8 Q
(1) 196.52 591.73 T
4 10 Q
(, ..., P) 200.97 594.23 T
4 8 Q
(m) 227.08 591.73 T
4 10 Q
(\051, R\051 :) 233.74 594.23 T
0 F
(sequence) 126 579.23 T
4 F
(\050\050S) 164.31 579.23 T
4 8 Q
(1) 177.63 576.73 T
4 10 Q
(, ... , S) 182.08 579.23 T
4 8 Q
(n) 210.97 576.73 T
4 10 Q
(\051, T\051) 215.42 579.23 T
2 14 Q
(\333) 126 564.23 T
0 10 Q
( sequence) 140.58 564.23 T
4 F
(\050\050S) 181.39 564.23 T
4 8 Q
(1) 194.71 561.73 T
4 10 Q
(, ..., S) 199.16 564.23 T
4 8 Q
(i-1) 225.27 561.73 T
4 10 Q
(, P) 234.15 564.23 T
4 8 Q
(1) 246.38 561.73 T
4 10 Q
(, ..., P) 250.82 564.23 T
4 8 Q
(m) 276.94 561.73 T
4 10 Q
(, R, S) 283.6 564.23 T
4 8 Q
(i+1) 308.6 561.73 T
4 10 Q
(, ..., S) 319.49 564.23 T
4 8 Q
(n) 345.6 561.73 T
4 10 Q
(\051, T\051) 350.05 564.23 T
({F}) 90 549.23 T
(E) 117 549.23 T
2 14 Q
(\333) 126.44 549.23 T
0 10 Q
(sequence) 143.8 549.23 T
4 F
(\050\050 \051, E\051) 182.11 549.23 T
({G}) 90 534.23 T
(If D is either) 117 534.23 T
0 F
(identify) 173.1 534.23 T
4 F
( or) 205.86 534.23 T
0 F
(variable) 220.3 534.23 T
4 F
(:) 255.28 534.23 T
(D\050v) 126 519.23 T
(, tag,) 140.8 519.23 T
0 F
(sequence) 165.81 519.23 T
4 F
(\050\050S) 204.12 519.23 T
4 8 Q
(1) 217.44 516.73 T
4 10 Q
(, ..., S) 221.88 519.23 T
4 8 Q
(n) 248 516.73 T
4 10 Q
(\051, R\051, B\051) 252.45 519.23 T
2 14 Q
(\336) 290.21 519.23 T
0 10 Q
(sequence) 306.8 519.23 T
4 F
(\050\050S) 345.1 519.23 T
4 8 Q
(1) 358.43 516.73 T
4 10 Q
(, ..., S) 362.87 519.23 T
4 8 Q
(n) 388.99 516.73 T
4 10 Q
(\051, D\050v) 393.43 519.23 T
(, tag, R, B\051 \051) 417.12 519.23 T
({H}) 90 504.23 T
(If S) 117 504.23 T
4 8 Q
(i) 132 501.73 T
4 10 Q
( is an EXP BOTT) 133.78 504.23 T
(OM , then:) 209.7 504.23 T
0 F
(sequence) 126 489.23 T
4 F
(\050\050S) 164.31 489.23 T
4 8 Q
(1) 177.63 486.73 T
4 10 Q
(, S) 182.08 489.23 T
4 8 Q
(2) 194.3 486.73 T
4 10 Q
(, ... S) 198.75 489.23 T
4 8 Q
(n) 222.08 486.73 T
4 10 Q
(\051, R\051) 226.53 489.23 T
2 14 Q
(\336) 248.74 489.23 T
0 10 Q
(sequence) 265.33 489.23 T
4 F
(\050\050S) 303.63 489.23 T
4 8 Q
(1) 316.96 486.73 T
4 10 Q
(, ... S) 321.4 489.23 T
4 8 Q
(i-1) 344.74 486.73 T
4 10 Q
(\051, S) 353.62 489.23 T
4 8 Q
(i) 369.17 486.73 T
4 10 Q
(\051) 370.95 489.23 T
({I}) 90 474.23 T
(If E is an EXP BOTT) 117 474.23 T
(OM, and if D is either) 207.92 474.23 T
0 F
(identify) 304.57 474.23 T
4 F
( or) 337.33 474.23 T
0 F
(variable) 351.77 474.23 T
4 F
(:) 386.75 474.23 T
(D\050v) 126 459.23 T
(, tag, E, B\051) 140.8 459.23 T
2 14 Q
(\336) 190.8 459.23 T
4 10 Q
( E) 204.62 459.23 T
({J}) 90 444.23 T
(If S) 117 444.23 T
4 8 Q
(i) 132 441.73 T
4 10 Q
( is) 133.78 444.23 T
0 F
(make_top) 146.55 444.23 T
4 F
(\050\051, then:) 188.75 444.23 T
0 F
(sequence) 126 429.23 T
4 F
(\050\050S) 164.31 429.23 T
4 8 Q
(1) 177.63 426.73 T
4 10 Q
(, S) 182.08 429.23 T
4 8 Q
(2) 194.3 426.73 T
4 10 Q
(, ... S) 198.75 429.23 T
4 8 Q
(n) 222.08 426.73 T
4 10 Q
(\051, R\051) 226.53 429.23 T
2 14 Q
(\333) 248.74 429.23 T
0 10 Q
( sequence) 263.32 429.23 T
4 F
(\050\050S) 304.12 429.23 T
4 8 Q
(1) 317.45 426.73 T
4 10 Q
(, ... S) 321.89 429.23 T
4 8 Q
(i-1) 345.23 426.73 T
4 10 Q
(, S) 354.11 429.23 T
4 8 Q
(i+1) 366.34 426.73 T
4 10 Q
(, ...S) 377.23 429.23 T
4 8 Q
(n) 397.79 426.73 T
4 10 Q
(\051, R\051) 402.23 429.23 T
({K}) 90 414.23 T
(If S) 117 414.23 T
4 8 Q
(n) 132 411.73 T
4 10 Q
( is an EXP T) 136.45 414.23 T
(OP:) 191.82 414.23 T
0 F
(sequence) 126 399.23 T
4 F
(\050\050S) 164.31 399.23 T
4 8 Q
(1) 177.63 396.73 T
4 10 Q
(, ... S) 182.08 399.23 T
4 8 Q
(n) 205.41 396.73 T
4 10 Q
(\051,) 209.86 399.23 T
0 F
( make_top) 215.97 399.23 T
4 F
(\050\051\051) 260.66 399.23 T
2 14 Q
(\333) 273.42 399.23 T
0 10 Q
(sequence) 290.78 399.23 T
4 F
(\050\050S) 329.09 399.23 T
4 8 Q
(1) 342.42 396.73 T
4 10 Q
(, ..., S) 346.86 399.23 T
4 8 Q
(n-1) 372.98 396.73 T
4 10 Q
(\051, S) 384.53 399.23 T
4 8 Q
(n) 400.08 396.73 T
4 10 Q
(\051) 404.53 399.23 T
({L}) 90 384.23 T
(If E is an EXP T) 117 384.23 T
(OP and E is not side-ef) 187.37 384.23 T
(fecting then) 289.96 384.23 T
(E) 126 369.23 T
2 14 Q
(\336) 135.45 369.23 T
0 10 Q
(make_top) 152.03 369.23 T
4 F
(\050\051) 194.23 369.23 T
({M}) 90 354.23 T
0.46 (If C is some non order-specifying and non side-ef) 117 354.23 P
0.46 (fecting constructor) 338.24 354.23 P
0.46 (, and S) 419.8 354.23 P
4 8 Q
0.37 (i) 452.39 351.73 P
4 10 Q
0.46 ( is C\050P) 454.17 354.23 P
4 8 Q
0.37 (1) 485.07 351.73 P
4 10 Q
0.46 (,..., P) 489.51 354.23 P
4 8 Q
0.37 (m) 513.31 351.73 P
4 10 Q
0.46 (\051) 519.97 354.23 P
(where P) 117 342.23 T
4 8 Q
(1..m) 153.66 339.73 T
4 10 Q
( are the EXP operands of C:) 169.21 342.23 T
0 F
(sequence) 126 327.23 T
4 F
(\050\050S) 164.31 327.23 T
4 8 Q
(1) 177.63 324.73 T
4 10 Q
(, ..., S) 182.08 327.23 T
4 8 Q
(n) 208.19 324.73 T
4 10 Q
(\051, R\051) 212.64 327.23 T
2 14 Q
(\336) 234.85 327.23 T
0 10 Q
(sequence) 248.66 327.23 T
4 F
(\050\050S) 286.97 327.23 T
4 8 Q
(1) 300.29 324.73 T
4 10 Q
(, ..., S) 304.73 327.23 T
4 8 Q
(i-1) 330.85 324.73 T
4 10 Q
(, P) 339.73 327.23 T
4 8 Q
(1) 351.96 324.73 T
4 10 Q
(, ..., P) 356.4 327.23 T
4 8 Q
(m) 382.52 324.73 T
4 10 Q
(, S) 389.18 327.23 T
4 8 Q
(i+1) 401.4 324.73 T
4 10 Q
(, ..., S) 412.29 327.23 T
4 8 Q
(n) 438.41 324.73 T
4 10 Q
(\051, R\051) 442.85 327.23 T
({N}) 90 312.23 T
(If none of the S) 117 312.23 T
4 8 Q
(i) 184.79 309.73 T
4 10 Q
( use the label L:) 186.57 312.23 T
0 F
(conditional) 126 297.23 T
4 F
(\050L,) 173.76 297.23 T
0 F
(sequence) 188.21 297.23 T
4 F
(\050\050S) 226.51 297.23 T
4 8 Q
(1) 239.84 294.73 T
4 10 Q
(, ..., S) 244.28 297.23 T
4 8 Q
(n) 270.4 294.73 T
4 10 Q
(\051, R\051, A\051) 274.84 297.23 T
2 14 Q
(\336) 126 282.23 T
0 10 Q
(sequence) 142.59 282.23 T
4 F
(\050\050S) 180.9 282.23 T
4 8 Q
(1) 194.22 279.73 T
4 10 Q
(, ..., S) 198.67 282.23 T
4 8 Q
(n) 224.78 279.73 T
4 10 Q
(\051,) 229.23 282.23 T
0 F
(conditional) 238.11 282.23 T
4 F
(\050L, R, A\051\051) 285.88 282.23 T
({O}) 90 267.23 T
(If there are no uses of L in X) 117 267.23 T
4 8 Q
(3) 242.56 271.23 T
4 10 Q
(:) 247.01 267.23 T
0 F
(conditional) 126 252.23 T
4 F
(\050L, X, Y\051) 173.76 252.23 T
2 14 Q
(\336) 213.2 252.23 T
4 10 Q
( X) 227.01 252.23 T
({P}) 90 237.23 T
0 F
(conditional) 117 237.23 T
4 F
(\050L, E ,) 164.76 237.23 T
0 F
(goto) 194.21 237.23 T
4 F
(\050Z\051\051) 212.53 237.23 T
2 14 Q
(\336) 231.4 237.23 T
4 10 Q
( E[L \134 Z]) 245.21 237.23 T
({Q}) 90 222.23 T
(If EXP X contains no use of the LABEL L:) 117 222.23 T
0 F
(conditional) 126 207.23 T
4 F
(\050L,) 173.76 207.23 T
0 F
(conditional) 188.21 207.23 T
4 F
(\050M, X, Y\051, Z\051) 235.97 207.23 T
2 14 Q
(\336) 126 192.23 T
0 10 Q
(conditional) 142.59 192.23 T
4 F
(\050M, X,) 190.35 192.23 T
0 F
(conditional) 219.79 192.23 T
4 F
(\050L, Y) 267.55 192.23 T
(, Z\051\051) 287.37 192.23 T
72 112 523.3 126.98 C
72 112 523.3 126.98 R
7 X
0 K
V
81 124.96 225 124.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. The order) 90 106.67 T
(-specifying constructors are conditional, identify) 129.14 106.67 T
(, repeat, labelled, sequence and variable) 284.29 106.67 T
-0.04 (2. A suf) 90 96.67 P
-0.04 (\336cient condition for not side-ef) 115.32 96.67 P
-0.04 (fecting in this sense is that there are no apply_procs or local_allocs in E; that any assignments) 214.51 96.67 P
(in E are to variables de\336ned in E; and that any branches in E are to labels de\336ned in conditionals in E) 90 86.67 T
(3. There are analogous rules for labelled and repeat with unused LABELs.) 90 76.67 T
FMENDPAGE
%%EndPage: "38" 44
%%Page: "39" 44
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 39) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
4 F
0 X
({R}) 90 763.23 T
0 F
(r) 117 763.23 T
(epeat) 121.26 763.23 T
4 F
(\050L, I, E\051) 144.01 763.23 T
2 14 Q
(\336) 179.57 763.23 T
0 10 Q
(sequence) 196.15 763.23 T
4 F
(\050 \050I\051,) 234.46 763.23 T
0 F
(r) 255.56 763.23 T
(epeat) 259.82 763.23 T
4 F
(\050L,) 282.58 763.23 T
0 F
(make_top) 297.02 763.23 T
4 F
(\050\051, E\051\051) 339.22 763.23 T
({S}) 90 748.23 T
0 F
(r) 117 748.23 T
(epeat) 121.26 748.23 T
4 F
(\050L,) 144.01 748.23 T
0 F
(make_top) 158.46 748.23 T
4 F
(\050\051, E\051) 200.65 748.23 T
2 14 Q
(\336) 225.64 748.23 T
0 10 Q
(conditional) 242.23 748.23 T
4 F
(\050Z, E[L \134 Z],) 289.99 748.23 T
0 F
(r) 342.76 748.23 T
(epeat) 347.02 748.23 T
4 F
(\050L,) 369.78 748.23 T
0 F
(make_top) 384.22 748.23 T
4 F
(\050\051, E\051\051) 426.42 748.23 T
({T}) 90 733.23 T
(If there are no uses of L in E:) 117 733.23 T
0 F
(r) 126 718.23 T
(epeat) 130.26 718.23 T
4 F
(\050L,) 153.01 718.23 T
0 F
(make_top) 167.46 718.23 T
4 F
(\050\051,) 209.65 718.23 T
0 F
(sequence) 221.87 718.23 T
4 F
(\050\050S, E\051,) 260.18 718.23 T
0 F
(make_top) 294.61 718.23 T
4 F
(\050\051\051) 336.8 718.23 T
2 14 Q
(\336) 126 703.23 T
0 10 Q
(conditional) 142.59 703.23 T
4 F
(\050Z, S[L \134 Z],) 190.35 703.23 T
0 F
(r) 153 688.23 T
(epeat) 157.26 688.23 T
4 F
(\050L,) 180.01 688.23 T
0 F
(make_top) 194.46 688.23 T
4 F
(\050\051,) 236.65 688.23 T
0 F
(sequence) 248.87 688.23 T
4 F
(\050\050E, S\051,) 287.18 688.23 T
0 F
(make_top) 321.61 688.23 T
4 F
(\050\051\051 \051 \051) 363.8 688.23 T
({U}) 90 673.23 T
(If f is a procedure de\336ned) 117 673.23 T
4 8 Q
(1) 229.78 677.23 T
4 10 Q
( as:) 234.22 673.23 T
0 F
(make_pr) 126 658.23 T
(oc) 164.13 658.23 T
4 F
(\050rshape, formal) 173.56 658.23 T
4 8 Q
(1..n) 240.77 655.73 T
4 10 Q
(, vtg , B\050) 254.1 658.23 T
0 F
(r) 291.32 658.23 T
(eturn) 295.58 658.23 T
4 F
( R) 318.9 658.23 T
4 8 Q
(1) 328.89 655.73 T
4 10 Q
(, ...,) 333.34 658.23 T
0 F
(r) 352.79 658.23 T
(eturn) 357.05 658.23 T
4 F
( R) 380.36 658.23 T
4 8 Q
(m) 390.36 655.73 T
4 10 Q
(\051\051) 397.02 658.23 T
(where:) 126 643.23 T
(formal) 126 628.23 T
4 8 Q
(i) 153.76 625.73 T
4 10 Q
( =) 155.54 628.23 T
0 F
(make_tagshacc) 166.93 628.23 T
4 F
(\050s) 231.89 628.23 T
4 8 Q
(i) 240.21 625.73 T
4 10 Q
(, v) 241.99 628.23 T
4 8 Q
(i) 252.54 625.73 T
4 10 Q
(, tg) 254.32 628.23 T
4 8 Q
(i) 268.21 625.73 T
4 10 Q
(\051) 269.98 628.23 T
(and B is an EXP with all of its internal) 126 613.23 T
0 F
(r) 294.32 613.23 T
(eturn) 298.58 613.23 T
4 F
( constructors indicated parametrically) 321.89 613.23 T
(then, if A) 126 598.23 T
4 8 Q
(i) 165.45 595.73 T
4 10 Q
( has SHAPE s) 167.22 598.23 T
4 8 Q
(i) 230.55 595.73 T
0 10 Q
(apply_pr) 126 583.23 T
(oc) 164.7 583.23 T
4 F
(\050rshape, f, \050A) 174.13 583.23 T
4 8 Q
(1) 231.9 580.73 T
4 10 Q
(, ... , A) 236.35 583.23 T
4 8 Q
(n) 265.24 580.73 T
4 10 Q
(\051, V\051) 269.69 583.23 T
2 14 Q
(\336) 126 568.23 T
0 10 Q
(variable) 142.59 568.23 T
4 F
(\050 empty) 177.57 568.23 T
(, newtag,) 210.15 568.23 T
0 F
(make_value) 253.49 568.23 T
4 F
(\050\050rshape=BOTT) 304.57 568.23 T
(OM\051? T) 374.09 568.23 T
(OP: rshape\051,) 407.78 568.23 T
0 F
(labelled) 153 553.23 T
4 F
(\050 \050L\051,) 186.32 553.23 T
0 F
(variable) 180 538.23 T
4 F
(\050v) 214.98 538.23 T
4 8 Q
(1) 223.31 535.73 T
4 10 Q
(, tg) 227.75 538.23 T
4 8 Q
(1) 241.64 535.73 T
4 10 Q
(, A) 246.09 538.23 T
4 8 Q
(1) 258.31 535.73 T
4 10 Q
(, ... ,) 262.76 538.23 T
0 F
(variable) 284.99 538.23 T
4 F
(\050v) 319.97 538.23 T
4 8 Q
(n) 328.29 535.73 T
4 10 Q
(, tg) 332.74 538.23 T
4 8 Q
(n) 346.63 535.73 T
4 10 Q
(, A) 351.08 538.23 T
4 8 Q
(n) 363.3 535.73 T
4 10 Q
(,) 367.74 538.23 T
0 F
(variable) 207 523.23 T
4 F
(\050empty) 241.98 523.23 T
(, vtg, V) 271.78 523.23 T
(,) 301.98 523.23 T
(B\050) 234 508.23 T
0 F
(sequence) 243.99 508.23 T
4 F
(\050) 282.3 508.23 T
0 F
(assign) 288.41 508.23 T
4 F
(\050) 314.52 508.23 T
0 F
(obtain_tag) 317.84 508.23 T
4 F
(\050newtag\051, R) 363.38 508.23 T
4 8 Q
(1) 415.03 505.73 T
4 10 Q
(\051,) 419.48 508.23 T
0 F
(goto) 428.36 508.23 T
4 F
(\050L\051\051 , ... ,) 446.68 508.23 T
0 F
(sequence) 261 493.23 T
4 F
(\050) 299.31 493.23 T
0 F
(assign) 305.42 493.23 T
4 F
(\050) 331.52 493.23 T
0 F
(obtain_tag) 334.85 493.23 T
4 F
(\050newtag\051, R) 380.38 493.23 T
4 8 Q
(m) 432.04 490.73 T
4 10 Q
(\051,) 438.7 493.23 T
0 F
(goto) 447.58 493.23 T
4 F
(\050L\051\051) 465.9 493.23 T
(\051) 234 478.23 T
(\051) 207 463.23 T
(\051,) 180 448.23 T
0 F
(contents) 180 433.23 T
4 F
(\050rshape,) 215.53 433.23 T
0 F
(obtain_tag) 254.97 433.23 T
4 F
(\050newtag\051\051) 300.5 433.23 T
(\051) 153 418.23 T
(\051) 142.67 403.23 T
({V}) 90 388.23 T
0 F
(assign) 117 388.23 T
4 F
(\050E,) 143.11 388.23 T
0 F
(make_top) 158.66 388.23 T
4 F
(\050\051\051) 200.85 388.23 T
2 14 Q
(\336) 213.62 388.23 T
0 10 Q
(sequence) 230.21 388.23 T
4 F
(\050 \050E\051,) 268.52 388.23 T
0 F
(make_top) 293.5 388.23 T
4 F
(\050\051\051) 335.7 388.23 T
({W}) 90 373.23 T
0 F
(contents) 117 373.23 T
4 F
(\050T) 152.53 373.23 T
(OP) 161.79 373.23 T
(, E\051) 174.94 373.23 T
2 14 Q
(\336) 193.27 373.23 T
0 10 Q
(sequence) 209.86 373.23 T
4 F
(\050\050E\051,) 248.17 373.23 T
0 F
(make_top) 270.37 373.23 T
4 F
(\050\051\051) 312.57 373.23 T
({X}) 90 358.23 T
0 F
(make_value) 117 358.23 T
4 F
(\050T) 168.08 358.23 T
(OP\051) 177.34 358.23 T
2 14 Q
(\336) 197.89 358.23 T
0 10 Q
(make_top) 214.47 358.23 T
4 F
(\050\051) 256.67 358.23 T
({Y}) 90 328.23 T
0 F
(component) 117 328.23 T
4 F
(\050s,) 164.19 328.23 T
0 F
(contents) 178.08 328.23 T
4 F
(\050COMPOUND\050S\051, E\051, D\051) 213.61 328.23 T
2 14 Q
(\336) 126 313.23 T
0 10 Q
(contents) 142.59 313.23 T
4 F
(\050s,) 178.12 313.23 T
0 F
(add_to_ptr) 192 313.23 T
4 F
(\050E, D\051\051) 239.76 313.23 T
({Z}) 90 298.23 T
0 F
(make_compound) 117 298.23 T
4 F
(\050S, \050\050E) 190.3 298.23 T
4 8 Q
(1) 219.17 295.73 T
4 10 Q
(, D) 223.62 298.23 T
4 8 Q
(1) 236.39 295.73 T
4 10 Q
(\051, ..., \050E) 240.84 298.23 T
4 8 Q
(n) 273.61 295.73 T
4 10 Q
(, D) 278.05 298.23 T
4 8 Q
(n) 290.83 295.73 T
4 10 Q
(\051\051 \051) 295.27 298.23 T
2 14 Q
(\336) 126 283.23 T
0 10 Q
(variable) 142.59 283.23 T
4 F
(\050empty) 177.57 283.23 T
(, nt,) 207.37 283.23 T
0 F
(make_value) 226.82 283.23 T
4 F
(\050COMPOUND\050S\051\051,) 277.9 283.23 T
0 F
(sequence) 153 268.23 T
4 F
(\050) 191.31 268.23 T
(\050) 180 253.23 T
0 F
(assign) 186.11 253.23 T
4 F
(\050) 212.21 253.23 T
0 F
(add_to_ptr) 215.54 253.23 T
4 F
(\050) 263.29 253.23 T
0 F
(obtain_tag) 266.62 253.23 T
4 F
(\050nt\051, D) 312.16 253.23 T
4 8 Q
(1) 339.92 250.73 T
4 10 Q
(\051, E) 344.37 253.23 T
4 8 Q
(1) 359.92 250.73 T
4 10 Q
(\051,) 364.36 253.23 T
(... ,) 193.89 238.23 T
0 F
(assign) 192.49 223.23 T
4 F
(\050) 218.6 223.23 T
0 F
(add_to_ptr) 221.93 223.23 T
4 F
(\050) 269.68 223.23 T
0 F
(obtain_tag) 273.01 223.23 T
4 F
(\050nt\051, D) 318.54 223.23 T
4 8 Q
(n) 346.31 220.73 T
4 10 Q
(\051, E) 350.75 223.23 T
4 8 Q
(n) 366.31 220.73 T
4 10 Q
(\051 \051,) 370.75 223.23 T
0 F
(contents) 180 208.23 T
4 F
(\050S,) 215.53 208.23 T
0 F
(obtain_tag) 231.08 208.23 T
4 F
(\050nt\051\051) 276.62 208.23 T
(\051) 153 193.23 T
(\051) 139.89 178.23 T
0 F
(1) 72 152.23 T
(1.1.1) 76.45 152.23 T
(Examples of transformations) 108 152.23 T
1 F
1.01 (Any of these transformations may be performed by the TDF translators. The most important is probably {A}) 72 135.23 P
0.03 (which allows one to reduce all of the EXP operands of suitable constructors to) 72 123.23 P
0 F
0.03 (obtain_tag) 388.29 123.23 P
1 F
0.03 (s. The expansion rules) 433.83 123.23 P
0.38 (for identi\336cation, {G}, {H} and {I}, gives de\336nition to complicated operands as well as strangely formed ones,) 72 111.23 P
72 82 523.3 96.98 C
72 82 523.3 96.98 R
7 X
0 K
V
81 94.96 225 94.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. This has to be modi\336ed if B contains any uses of local_free_all or last_local.) 90 76.67 T
FMENDPAGE
%%EndPage: "39" 45
%%Page: "40" 45
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 40) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.13 (e.g.) 72 763.23 P
0 F
0.13 (r) 89.06 763.23 P
0.13 (eturn) 93.32 763.23 P
1 F
0.13 (\050...) 116.64 763.23 P
0 F
0.13 (r) 130.09 763.23 P
0.13 (eturn) 134.35 763.23 P
1 F
0.13 (\050X\051...\051. Rule {A} also illustrates neatly the lack of ordering constraints on the evaluation of) 157.67 763.23 P
(operands. For example,) 72 751.23 T
0 F
(mult) 168.32 751.23 T
1 F
(\050et, exp1, exp2\051 could be expanded by applications of {A} to either:) 188.31 751.23 T
0 F
(identify) 108 729.23 T
4 F
(\050empty) 140.76 729.23 T
(, t1, exp1,) 170.57 729.23 T
0 F
(identify) 128.78 714.23 T
4 F
(\050empty) 161.54 714.23 T
(, t2, exp2,) 191.34 714.23 T
0 F
(mult) 238.02 714.23 T
4 F
(\050et,) 258.01 714.23 T
0 F
(obtain_tag) 275.23 714.23 T
4 F
(\050t1\051,) 320.76 714.23 T
0 F
(obtain_tag) 341.31 714.23 T
4 F
(\050t2\051\051\051 \051) 386.85 714.23 T
1 F
(or:) 72 699.23 T
0 F
(identify) 108 677.23 T
4 F
(\050empty) 140.76 677.23 T
(, t2, exp2,) 170.57 677.23 T
0 F
(identify) 128.78 662.23 T
4 F
(\050empty) 161.54 662.23 T
(, t1, exp1,) 191.34 662.23 T
0 F
(mult) 238.02 662.23 T
4 F
(\050et,) 258.01 662.23 T
0 F
(obtain_tag) 275.23 662.23 T
4 F
(\050t1\051,) 320.76 662.23 T
0 F
(obtain_tag) 341.31 662.23 T
4 F
(\050t2\051\051\051 \051) 386.85 662.23 T
1 F
0.25 (Both orderings of the evaluations of exp1 and exp2 are acceptable, regardless of any side-ef) 72 647.23 P
0.25 (fects in them. There) 442.59 647.23 P
0.38 (is no requirement that both expansions should produce the same answer for the multiplications; the only person) 72 635.23 P
(who can say whether either result is \322wrong\323 is the person who speci\336ed the program.) 72 623.23 T
-0.21 (Many of these transformations often only come into play when some previous transformation reveals some other-) 72 601.23 P
0.08 (wise hidden information. For example, after procedure in-lining given by {U} or loop un-rolling given by {S}, a) 72 589.23 P
-0.11 (translator can often deduce the behaviour of a) 72 577.23 P
0 F
-0.11 (_test) 256.51 577.23 P
1 F
-0.11 ( constructor) 276.49 577.23 P
-0.11 (, replacing it by either a) 323.44 577.23 P
0 F
-0.11 (make_top) 420.2 577.23 P
1 F
-0.11 (or a) 464.78 577.23 P
0 F
-0.11 (goto) 482.32 577.23 P
1 F
-0.11 (. This) 500.64 577.23 P
-0.16 (may allow one to apply either {J} or {H} to eliminate dead code in sequences and in turn {N} or {P} to eliminate) 72 565.23 P
(entire conditions and so on.) 72 553.23 T
0.9 (Application of transformations can also give expansions which are rather pathological in the sense that a pro-) 72 531.23 P
0.58 (ducer is very unlikely to form them. For example, a procedure which returns no result would have result state-) 72 519.23 P
(ments of the form) 72 507.23 T
0 F
(r) 145.84 507.23 T
(eturn) 150.1 507.23 T
1 F
(\050) 173.41 507.23 T
0 F
(make_top) 176.74 507.23 T
1 F
(\050\051\051. In-lining such a procedure by {U} would have a form like:) 218.94 507.23 T
0 F
(variable) 108 485.23 T
4 F
(\050empty) 142.98 485.23 T
(, nt,) 172.78 485.23 T
0 F
(make_shape) 192.23 485.23 T
4 F
(\050T) 244.99 485.23 T
(OP\051,) 254.24 485.23 T
0 F
(labelled) 126 470.23 T
4 F
(\050 \050L\051,) 159.32 470.23 T
(...) 126 455.23 T
0 F
(sequence) 137.11 455.23 T
4 F
(\050\050) 175.42 455.23 T
0 F
(assign) 182.08 455.23 T
4 F
(\050) 208.18 455.23 T
0 F
(obtain_tag) 211.51 455.23 T
4 F
(\050nt\051,) 257.05 455.23 T
0 F
(make_top) 277.6 455.23 T
4 F
(\050\051\051\051,) 319.79 455.23 T
0 F
(goto) 338.66 455.23 T
4 F
(\050L\051\051 ...) 356.98 455.23 T
0 F
(contents) 126 440.23 T
4 F
(\050T) 161.53 440.23 T
(OP) 170.79 440.23 T
(,) 183.94 440.23 T
0 F
(obtain_tag) 189.49 440.23 T
4 F
(\050nt\051\051) 235.03 440.23 T
(\051) 126 425.23 T
(\051) 108 410.23 T
1 F
(The rules {V}, {W} and {X} allow this to be replaced by:) 72 395.23 T
0 F
(variable) 108 373.23 T
4 F
(\050empty) 142.98 373.23 T
(, nt,) 172.78 373.23 T
0 F
(make_top\050\051) 192.23 373.23 T
4 F
(,) 241.09 373.23 T
0 F
(labelled) 126 358.23 T
4 F
(\050 \050L\051,) 159.32 358.23 T
(...) 126 343.23 T
0 F
(sequence) 137.11 343.23 T
4 F
(\050\050) 175.42 343.23 T
0 F
(obtain_tag) 182.08 343.23 T
4 F
(\050nt\051\051,) 227.61 343.23 T
0 F
(goto) 251.49 343.23 T
4 F
(\050L\051\051 ...) 269.81 343.23 T
0 F
(sequence) 126 328.23 T
4 F
(\050\050) 164.31 328.23 T
0 F
(obtain_tag) 170.96 328.23 T
4 F
(\050nt\051\051,) 216.5 328.23 T
0 F
( make_top) 237.6 328.23 T
4 F
(\050\051\051) 282.29 328.23 T
(\051) 126 313.23 T
(\051) 108 298.23 T
1 F
0.49 (The) 72 283.23 P
0 F
0.49 (obtain_tag) 90.53 283.23 P
1 F
0.49 (s can be eliminated by rule {M} and then the) 136.07 283.23 P
0 F
0.49 (sequence) 323.21 283.23 P
1 F
0.49 (s by {F}. Sucessive applications of {C}) 361.52 283.23 P
(and {B} then give:) 72 271.23 T
0 F
(labelled) 108 249.23 T
4 F
(\050 \050L\051,) 141.32 249.23 T
(...) 126 234.23 T
0 F
(goto) 137.11 234.23 T
4 F
(\050L\051 ...) 155.43 234.23 T
0 F
(make_top) 126 219.23 T
4 F
(\050\051) 168.2 219.23 T
(\051) 126 204.23 T
0 F
(1) 72 163.23 T
(1.1.2) 76.45 163.23 T
(Pr) 108 163.23 T
(ograms with unde\336ned values) 118.36 163.23 T
1 F
0.5 (The de\336nitions of most of the constructors in the TDF speci\336cation are predicated by some conditions; if these) 72 146.23 P
-0.09 (conditions are not met the ef) 72 134.23 P
-0.09 (fect and result of the constructor is not de\336ned for all possible platforms) 185.47 134.23 P
1 8 Q
-0.07 (1) 473.12 138.23 P
1 10 Q
-0.09 (. Any value) 477.11 134.23 P
0.21 (which is dependent on the ef) 72 122.23 P
0.21 (fect or result of an unde\336ned construction is also unde\336ned. This is not the same as) 187.53 122.23 P
72 102 523.3 116.98 C
72 102 523.3 116.98 R
7 X
0 K
V
81 114.96 225 114.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. However) 90 96.67 T
(, we may \336nd that the mapping of a constraint allows extra relationships for a class of architectures which do not hold in) 126.98 96.67 T
-0.13 (all generality; this may mean that some constructions are de\336ned on this class while still being unde\336ned in others. \050see section 12 on) 90 86.67 P
(page 44\051) 90 76.67 T
FMENDPAGE
%%EndPage: "40" 46
%%Page: "41" 46
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 41) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.11 (saying that a program is unde\336ned if it can construct an unde\336ned value - the dynamics of the program might be) 72 763.23 P
(such that the of) 72 751.23 T
(fending construction is never obeyed.) 133.17 751.23 T
FMENDPAGE
%%EndPage: "41" 47
%%Page: "42" 47
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 42) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(12) 72 741.88 T
(TDF expansions of offsets) 99 741.88 T
1 10 Q
(Consider the C structure de\336ned by:) 72 665.19 T
4 F
(typedef struct{ int i; double d; char c;} mystruct;) 108 643.19 T
1 F
0.78 (Given that sh_int, sh_char and sh_double are the SHAPEs for int, char and double, the SHAPE of) 72 628.19 P
3 F
0.78 (mystruct) 478.93 628.19 P
1 F
0.78 ( is) 513.35 628.19 P
(constructed by:) 72 616.19 T
4 F
(SH_mystruct =) 108 594.19 T
0 F
(compound) 176.59 594.19 T
4 F
(\050S_c\051) 221.58 594.19 T
(where:) 108 579.19 T
(S_c =) 108 564.19 T
0 F
(offset_add) 136.61 564.19 T
4 F
(\050O_c,) 181.03 564.19 T
0 F
(shape_offset) 208.24 564.19 T
4 F
(\050sh_char\051\051) 260.99 564.19 T
(where:) 108 549.19 T
(O_c =) 108 534.19 T
0 F
(offset_pad) 137.72 534.19 T
4 F
(\050) 182.14 534.19 T
0 F
(alignment) 185.47 534.19 T
4 F
(\050sh_char\051, S_d\051) 228.22 534.19 T
(where:) 108 519.19 T
(S_d =) 108 504.19 T
0 F
(offset_add) 137.17 504.19 T
4 F
(\050O_d,) 181.59 504.19 T
0 F
(shape_offset) 209.36 504.19 T
4 F
(\050sh_double\051\051) 262.11 504.19 T
(where:) 108 489.19 T
(O_d =) 108 474.19 T
0 F
(offset_pad) 138.28 474.19 T
4 F
(\050) 182.7 474.19 T
0 F
(alignment) 186.03 474.19 T
4 F
(\050sh_double\051, S_i\051) 228.78 474.19 T
(where) 108 459.19 T
4 8 Q
(1) 135.21 463.19 T
4 10 Q
(:) 139.66 459.19 T
(S_i =) 108 444.19 T
0 F
(offset_add) 133.84 444.19 T
4 F
(\050O_i,) 178.25 444.19 T
0 F
(shape_offset) 202.69 444.19 T
4 F
(\050sh_int\051\051) 255.43 444.19 T
(and:) 108 429.19 T
(O_i =) 108 414.19 T
0 F
(offset_zer) 134.95 414.19 T
(o) 176.38 414.19 T
4 F
(\050) 181.38 414.19 T
0 F
(alignment) 184.71 414.19 T
4 F
(\050sh_int\051\051) 227.46 414.19 T
1 F
0.02 (Each of S_c, S_d and S_i gives the minimum \322size\323 of the space required to upto and including the \336eld c, d and) 72 399.19 P
-0.21 (i respectively) 72 387.19 P
-0.21 (. Each of O_c, O_d and O_i gives the OFFSET \322displacement\323 from a pointer to a) 124.71 387.19 P
3 F
-0.21 (mystruct) 453.29 387.19 P
1 F
-0.21 ( required) 487.71 387.19 P
(to select the \336elds c, d and i respectively) 72 375.19 T
(. The C program fragment:) 233.18 375.19 T
4 F
(mystruct s;) 108 353.19 T
(.... s.d = 1.0; ...) 108 338.19 T
1 F
(would translate to something like:) 72 323.19 T
0 F
(variable) 108 301.19 T
4 F
(\050empty) 142.98 301.19 T
(, tag_s,) 172.78 301.19 T
0 F
(make_value) 208.35 301.19 T
4 F
(\050) 259.43 301.19 T
0 F
(compound) 262.76 301.19 T
4 F
(\050S_c\051\051,) 307.74 301.19 T
0 F
(sequence) 126 286.19 T
4 F
(\050 ...) 164.31 286.19 T
0 F
( assign) 126 271.19 T
4 F
(\050) 154.6 271.19 T
0 F
(add_to_ptr) 157.93 271.19 T
4 F
(\050) 205.69 271.19 T
0 F
(obtain_tag) 209.01 271.19 T
4 F
(\050tag_s\051, O_d\051, 1.0\051) 254.55 271.19 T
( ...) 126 256.19 T
(\051) 126 241.19 T
(\051) 108 226.19 T
1 F
0.31 (Each of the OFFSET expressions above are ideal candidates for tokenisation; a producer would probably de\336ne) 72 196.19 P
(tokens for each of them and use) 72 184.19 T
0 F
(exp_apply_token) 201.62 184.19 T
1 F
( to expand them at each of their uses.) 274.37 184.19 T
(From the de\336nition, we \336nd that:) 72 162.19 T
4 F
(S_c =) 108 140.19 T
0 F
(shape_offset) 136.61 140.19 T
4 F
(\050SH_mystruct\051) 189.35 140.19 T
(i.e. an OFFSET\050) 108 125.19 T
0 F
(alignment) 180.76 125.19 T
4 F
(\050sh_int\051) 223.52 125.19 T
2 14 Q
( \310) 256.84 125.19 T
0 10 Q
( alignment) 271.08 125.19 T
4 F
(\050sh_char\051) 316.34 125.19 T
2 14 Q
( \310) 358.54 125.19 T
0 10 Q
( alignment) 372.79 125.19 T
4 F
(\050sh_double\051, {}\051) 418.04 125.19 T
72 92 523.3 106.98 C
72 92 523.3 106.98 R
7 X
0 K
V
81 104.96 225 104.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
-0.17 (1. I could equally have given simply shape_of) 90 86.67 P
-0.17 (fset\050sh_int\051 for S_i, but the above formulation is more uniform with respect to selection) 236.15 86.67 P
(OFFSET) 90 76.67 T
(s.) 118.32 76.67 T
FMENDPAGE
%%EndPage: "42" 48
%%Page: "43" 48
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 43) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.5 (This would not be the OFFSET required to describe) 72 763.23 P
3 F
0.5 (sizeof\050mystruct\051) 286.66 763.23 P
1 F
0.5 (in C, since this is de\336ned to be the dif) 353.51 763.23 P
0.5 (fer-) 508.87 763.23 P
-0.05 (ence between successive elements an array of) 72 751.23 P
3 F
-0.05 (mystruct) 256.77 751.23 P
1 F
-0.05 (s. The) 291.19 751.23 P
3 F
-0.05 (sizeof) 318.02 751.23 P
1 F
-0.05 ( OFFSET would have to pad S_c to the align-) 340.78 751.23 P
(ment of SH_mystruct:) 72 739.23 T
0 F
(offset_pad) 108 717.23 T
4 F
(\050) 152.42 717.23 T
0 F
(alignment) 155.74 717.23 T
4 F
(\050SH_mystruct\051, S_c\051) 198.5 717.23 T
1 F
-0.12 (This is the OFFSET that one would use to compute the displacement of an element of an array of) 72 702.23 P
3 F
-0.12 (mystruct) 460.95 702.23 P
1 F
-0.12 (s using) 495.37 702.23 P
0 F
(offset_mult) 72 690.23 T
1 F
( with the index.) 120.29 690.23 T
1.01 (The most common use of OFFSET) 72 668.23 P
1.01 (s is in) 216.54 668.23 P
0 F
1.01 (add_to_ptr) 245.38 668.23 P
1 F
1.01 ( to compute the address of a structure or array element.) 293.13 668.23 P
(Looking again at its signature in a slightly dif) 72 656.23 T
(ferent form:) 253.94 656.23 T
3 F
(ar) 122.71 634.23 T
(g1) 131.23 634.23 T
1 F
(:) 141.22 634.23 T
(EXP POINTER\050) 153 634.23 T
3 F
(y) 219.9 634.23 T
2 14 Q
(\310) 226.84 634.23 T
3 10 Q
( A) 237.59 634.23 T
1 F
(\051) 246.19 634.23 T
3 F
(ar) 122.71 622.23 T
(g2) 131.23 622.23 T
1 F
(:) 141.22 622.23 T
(EXP OFFSET\050) 153 622.23 T
3 F
(y) 213.81 622.23 T
(, z) 217.69 622.23 T
1 F
(\051) 226.58 622.23 T
2 F
(\256) 144 606.23 T
4 F
(EXP POINTER\050) 162 606.23 T
7 F
(z) 232.53 606.23 T
4 F
(\051) 237.53 606.23 T
(... for any ALIGNMENT) 126 588.23 T
7 F
(A) 231.53 588.23 T
1 F
0.46 (one sees that) 72 573.23 P
3 F
0.46 (ar) 126.95 573.23 P
0.46 (g2) 135.47 573.23 P
1 F
0.46 ( can measure an OFFSET from a value of a \322smaller\323 alignment than the value pointed at by) 145.46 573.23 P
3 F
-0.19 (ar) 72 561.23 P
-0.19 (g1) 80.51 561.23 P
1 F
-0.19 (. If) 90.51 561.23 P
3 F
-0.19 (ar) 104.27 561.23 P
-0.19 (g2) 112.79 561.23 P
1 F
-0.19 ( were O_d, for example, then) 122.78 561.23 P
3 F
-0.19 (ar) 240.96 561.23 P
-0.19 (g1) 249.47 561.23 P
1 F
-0.19 ( could be a pointer to any structure of the form struct {int i, double) 259.46 561.23 P
-0.14 (d,...} not just) 72 549.23 P
3 F
-0.14 (mystruct) 126.08 549.23 P
1 F
-0.14 (. The general principle is that an OFFSET to a \336eld constructed in this manner is independ-) 160.5 549.23 P
0.54 (ent of any \336elds after it, corresponding to normal usage in both languages and machines. A producer for a lan-) 72 537.23 P
1.47 (guage which con\337icts with this would have to produce less obvious TDF) 72 525.23 P
1.47 (, perhaps by re-ordering the \336elds,) 378.56 525.23 P
(padding the of) 72 513.23 T
(fsets by later alignments or taking maxima of the sizes of the \336elds.) 129.56 513.23 T
FMENDPAGE
%%EndPage: "43" 49
%%Page: "44" 49
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 44) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(13) 72 741.88 T
(Models of the TDF algebra) 99 741.88 T
1 10 Q
0.01 (TDF is a multi-sorted abstract algebra. Any implementation of TDF is a model of this algebra, formed by a map-) 72 665.19 P
0.11 (ping of the algebra into a concrete machine. An algebraic mapping gives a concrete representation to each of the) 72 653.19 P
0.2 (SOR) 72 641.19 P
0.2 (T) 90.84 641.19 P
0.2 (s in such a way that the representation of any construction of TDF is independent of context; it is a homo-) 96.25 641.19 P
-0.25 (morphism. In other words if we de\336ne the mapping of a TDF constructor) 72 629.19 P
-0.25 (, C, as MAP[C] and the representation of) 360.96 629.19 P
(a SOR) 72 617.19 T
(T) 97.78 617.19 T
(, S, as REPR[S] then:) 103.14 617.19 T
4 F
(REPR[ C\050P) 108 595.19 T
4 8 Q
(1) 158.53 592.69 T
4 10 Q
( ,..., P) 162.98 595.19 T
4 8 Q
(n) 189.09 592.69 T
4 10 Q
(\051 ] = MAP[C]\050 REPR\050P) 193.54 595.19 T
4 8 Q
(1) 292.11 592.69 T
4 10 Q
(\051 ,..., REPR\050P) 296.56 595.19 T
4 8 Q
(n) 357.1 592.69 T
4 10 Q
(\051\051) 361.54 595.19 T
1 F
0.16 (Any mapping has to preserve the equivalences of the abstract algebra, such as those exempli\336ed by the transfor-) 72 580.19 P
0.69 (mations {A} - {Z} in section 10.1 on page 37. Similarly) 72 568.19 P
0.69 (, the mappings of any predicates on the constructions,) 302.9 568.19 P
(such as those giving \322well-formed\323 conditions, must be satis\336ed in terms of the mapped representations.) 72 556.19 T
0.73 (In common with most homomorphisms, the mappings of constructions can exhibit more equivalences than are) 72 534.19 P
0.86 (given by the abstract algebra. The use of these extra equivalences is the basis of most of the tar) 72 522.19 P
0.86 (get-dependent) 466.68 522.19 P
0.74 (optimisations in a TDF translator; it can make use of \322idioms\323 of the tar) 72 510.19 P
0.74 (get architecture to produce equivalent) 369.34 510.19 P
0.34 (constructions which may work faster than the \322obvious\323 translation. In addition, we may \336nd that may \336nd that) 72 498.19 P
0.39 (more predicates are satis\336ed in a mapping than would be in the abstract algebra. A particular concrete mapping) 72 486.19 P
0.12 (might allow more constructions to be well-formed than are permitted in the abstract; a producer can use this fact) 72 474.19 P
-0.1 (to tar) 72 462.19 P
-0.1 (get its output to a particular class of architectures. In this case, the producer should produce TDF so that any) 92.53 462.19 P
(translator not tar) 72 450.19 T
(geted to this class can fail gracefully) 137.88 450.19 T
(.) 283.23 450.19 T
-0.19 (Giving a complete mapping for a particular architecture here is tantamount to writing a complete translator) 72 428.19 P
-0.19 (. How-) 495.73 428.19 P
0.46 (ever) 72 416.19 P
0.46 (, the mappings for the small but important sub-algebra concerned with OFFSET) 88.8 416.19 P
0.46 (s and ALIGNMENT) 412.96 416.19 P
0.46 (s illus-) 495.9 416.19 P
1.04 (trates many of the main principles. What follows is two sets of mappings for disparate architectures; the \336rst) 72 404.19 P
(gives a more or less standard meaning to ALIGNMENT) 72 392.19 T
(s but the second may be less familiar) 296.14 392.19 T
(.) 442.99 392.19 T
72 356.84 523.3 366.85 C
72 356.84 523.3 366.85 R
7 X
0 K
V
72 365.84 541.01 365.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 332.84 523.3 342.84 C
72 332.84 523.3 342.84 R
7 X
0 K
V
72 341.84 541.01 341.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(13.1) 72 347.51 T
(Model for a 32-bit standard ar) 108 347.51 T
(chitectur) 290.03 347.51 T
(e) 343.39 347.51 T
1 10 Q
-0.13 (Almost all current architectures use a \322\337at-store\323 model of memory) 72 316.17 P
-0.13 (. There is no enforced segregation of one kind) 340.29 316.17 P
-0.08 (of data from another - in general, one can access one unit of memory as a linear of) 72 304.17 P
-0.08 (fset from any other) 399.62 304.17 P
-0.08 (. Here, TDF) 475.16 304.17 P
0.5 (ALIGNMENT) 72 292.17 P
0.5 (s are a re\337ection of constraints for the ef) 130.7 292.17 P
0.5 (\336cient access of dif) 296.07 292.17 P
0.5 (ferent kinds of data objects - usually) 374.83 292.17 P
(one \336nds that 32-bit integers are most ef) 72 280.17 T
(\336ciently accessed if they start at 32 bit boundaries and so on.) 233.1 280.17 T
0 F
(13.1.1) 72 254.17 T
(Alignment model) 108 254.17 T
1 F
(The representation of ALIGNMENT in a typical standard architecture is a single integer where:) 72 237.17 T
4 F
(REPR [ { } ] = 1) 108 215.17 T
(REPR[ {bit\336eld} ] = 1) 108 200.17 T
(REPR[ {char_variety} ] = 8) 108 185.17 T
(REPR[ {short_variety} ] = 16) 108 170.17 T
1 F
(Otherwise, for all other primitive ALIGNMENTS a:) 72 155.17 T
4 F
(REPR [ {a} ] = 32) 108 133.17 T
1 F
(The representation of a compound ALIGNMENT is given by:) 72 118.17 T
4 F
(REPR [ A) 108 96.17 T
2 14 Q
(\310) 153.54 96.17 T
4 10 Q
( B ] = Max\050REPR[ A ] , REPR[ B ]\051) 164.29 96.17 T
(i.e. MAP[ unite_alignment] = Max) 108 81.17 T
FMENDPAGE
%%EndPage: "44" 50
%%Page: "45" 50
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 45) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
(while the ALIGNMENT inclusion predicate is given by:) 72 763.23 T
4 F
(REPR[ A) 108 741.23 T
2 14 Q
(\311) 150.77 741.23 T
4 10 Q
( B ]= REPR[ A ]) 160.74 741.23 T
2 14 Q
(\263) 232.68 741.23 T
4 10 Q
( REPR[ B }) 240.37 741.23 T
1 F
0.15 (All the constructions which make ALIGNMENT) 72 711.23 P
0.15 (s are represented here and they will always reduce to an integer) 268.29 711.23 P
1.53 (known at translate-time. Note that the mappings for) 72 699.23 P
2 14 Q
2.14 (\310) 293.27 699.23 P
1 10 Q
1.53 ( and) 304.01 699.23 P
2 14 Q
2.14 (\311) 326.5 699.23 P
1 10 Q
1.53 ( must preserve the basic algebraic properties) 336.48 699.23 P
0.75 (derived from sets; for example the mapping of) 72 687.23 P
2 14 Q
1.04 (\310) 266.17 687.23 P
1 10 Q
0.75 ( must be idempotent, commutative and associative, which is) 276.92 687.23 P
(true for Max.) 72 675.23 T
0 F
(13.1.2) 72 649.23 T
(Offset and pointer model) 108 649.23 T
1 F
0.05 (Most standard architectures use byte addressing; to address bits requires more complication. Hence, a value with) 72 632.23 P
1.52 (SHAPE POINTER\050A\051 where REPR\050A\051) 72 620.23 P
2 14 Q
2.13 (\271) 239.08 620.23 P
1 10 Q
1.52 ( 1 is represented by a 32-bit byte address. However) 246.76 620.23 P
1.52 (, a value with) 464.88 620.23 P
-0.09 (SHAPE POINTER\050A\051 where REPR\050A\051 = 1 \050i.e. a pointer to a bit\336eld\051 is represented by a pair consisting of a 32-) 72 608.23 P
(bit byte address and a 32-bit bit-displacement. Denote this pair by:) 72 596.23 T
4 F
(\050a: byte_address, d: bit_displacement\051) 108 574.23 T
1 F
(A value with SHAPE OFFSET\050A, B\051 where REPR\050A\051) 72 559.23 T
2 14 Q
(\271) 292.7 559.23 T
1 10 Q
( 1 is represented by a 32-bit byte-of) 300.38 559.23 T
(fset.) 442.59 559.23 T
(A value with SHAPE OFFSET\050A, B\051 where REPR\050A\051 = 1 is represented by a 32-bit bit-of) 72 537.23 T
(fset.) 433.89 537.23 T
0 F
(13.1.3) 72 511.23 T
(Size model) 108 511.23 T
1 F
1.3 (In principle, the representation of a SHAPE is a pair of an ALIGNMENT and a size, given by shape_of) 72 494.23 P
1.3 (fset) 508.86 494.23 P
0.55 (applied to the SHAPE. This pair is constant which can be evaluated at translate time. The construction, shape_) 72 482.23 P
(of) 72 470.23 T
(fset\050S\051, has SHAPE OFFSET\050alignment\050s\051, { } \051 and hence is represented by a bit-of) 80.15 470.23 T
(fset:) 419.05 470.23 T
4 F
(REPR[) 108 448.23 T
0 F
(shape_offset) 141.32 448.23 T
4 F
(\050) 194.06 448.23 T
0 F
(integer) 197.39 448.23 T
4 F
(\050char_variety\051\051 ] = 8) 227.36 448.23 T
(REPR[) 108 433.23 T
0 F
(shape_offset) 141.32 433.23 T
4 F
(\050) 194.06 433.23 T
0 F
(integer) 197.39 433.23 T
4 F
(\050short_variety\051\051 ] = 16) 227.36 433.23 T
(.... etc. for other numeric varieties) 108 418.23 T
(REPR[) 108 403.23 T
0 F
(shape_offset\050ointer) 141.32 403.23 T
4 F
(\050A\051\051 ]= \050REPR[ A ] = 1\051? 64 : 32) 222.93 403.23 T
(REPR[) 108 388.23 T
0 F
(shape_offset) 141.32 388.23 T
4 F
(\050) 194.06 388.23 T
0 F
(compound) 197.39 388.23 T
4 F
(\050E\051\051 ] = REPR[ E ]) 242.38 388.23 T
(REPR[) 108 373.23 T
0 F
(shape_offset) 141.32 373.23 T
4 F
(\050) 194.06 373.23 T
0 F
(bit\336eld) 197.39 373.23 T
4 F
(\050) 227.38 373.23 T
0 F
(bfvar_bits) 230.71 373.23 T
4 F
(\050b, N\051\051\051 ] = N) 274.58 373.23 T
(REPR[) 108 358.23 T
0 F
(shape_offset) 141.32 358.23 T
4 F
(\050nof\050N, S\051\051 ] = N * REPR[) 194.06 358.23 T
0 F
(offset_pad) 307.64 358.23 T
4 F
(\050) 352.06 358.23 T
0 F
(alignment) 355.38 358.23 T
4 F
(\050S\051,) 398.14 358.23 T
0 F
(shape_offset) 417.02 358.23 T
4 F
(\050S\051\051 ]) 469.76 358.23 T
(REPR[) 108 343.23 T
0 F
(shape_offset) 141.32 343.23 T
4 F
(\050) 194.06 343.23 T
0 F
(top) 197.39 343.23 T
4 F
(\050\051\051 ] = 0) 211.27 343.23 T
0 F
(13.1.4) 72 302.23 T
(Offset arithmetic) 108 302.23 T
1 F
-0.06 (Using the notation X: S to mean that X is an EXP of SHAPE S, the mappings of the other of) 72 285.23 P
-0.06 (fset constructors are:) 440.15 285.23 P
4 F
(REPR [) 108 263.23 T
0 F
(offset_zer) 144.1 263.23 T
(o) 185.54 263.23 T
4 F
(\050A\051 ] = 0) 190.54 263.23 T
(for all A) 262.48 263.23 T
(REPR[) 108 233.23 T
0 F
(offset_add) 141.32 233.23 T
4 F
(\050X: OFFSET\050A, C\051, Y) 185.74 233.23 T
(:OFFSET\050D, B\051\051] = 8*REPR[ X ] + REPR[ Y ]) 278.49 233.23 T
(if REPR[ C ]) 126 218.23 T
2 14 Q
(\271) 185.43 218.23 T
4 10 Q
( 1) 193.11 218.23 T
2 14 Q
(\331) 204.22 218.23 T
4 10 Q
( REPR[ B ] = 1) 212.66 218.23 T
(Otherwise:) 108 203.23 T
(REPR[) 108 188.23 T
0 F
(offset_add) 141.32 188.23 T
4 F
(\050X, Y \051] = REPR[ X ] + REPR[ Y ]) 185.74 188.23 T
(REPR[) 108 151.23 T
0 F
(offset_pad) 141.32 151.23 T
4 F
(\050A, X: OFFSET\050B, C\051\051 ] = 8*REPR[ X ]) 185.74 151.23 T
(if REPR[ A ]= 1) 126 136.23 T
2 14 Q
(\331) 196.27 136.23 T
4 10 Q
( REPR[ C ]) 204.71 136.23 T
2 14 Q
(\271) 256.36 136.23 T
4 10 Q
( 1) 264.04 136.23 T
(Otherwise:) 108 121.23 T
(REPR[) 108 106.23 T
0 F
(offset_pad) 141.32 106.23 T
4 F
(\050A, X: OFFSET\050B, C\051\051 ] = \050REPR[ X ] + REPR[ A ] -1\051 / REPR[ A ]) 185.74 106.23 T
FMENDPAGE
%%EndPage: "45" 51
%%Page: "46" 51
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 46) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
4 F
0 X
(REPR[) 108 741.23 T
0 F
(offset_max) 141.32 741.23 T
4 F
(\050X: OFFSET\050A, B\051, Y) 187.95 741.23 T
(: OFFSET\050C, D\051\051]) 280.14 741.23 T
(= Max\050REPR[ X ], 8*REPR[ Y ]) 126 726.23 T
(if REPR[ B ] = 1) 126 711.23 T
2 14 Q
(\331) 199.05 711.23 T
4 10 Q
( REPR[D ]) 207.49 711.23 T
2 14 Q
(\271) 256.36 711.23 T
4 10 Q
( 1) 264.04 711.23 T
(REPR[) 108 696.23 T
0 F
(offset_max) 141.32 696.23 T
4 F
(\050X: OFFSET\050A, B\051, Y) 187.95 696.23 T
(: OFFSET\050C, D\051\051]) 280.14 696.23 T
(= Max\0508*REPR[ X ], REPR[ Y ]) 126 681.23 T
(if REPR[ D ] = 1) 126 666.23 T
2 14 Q
(\331) 199.6 666.23 T
4 10 Q
( REPR[ B ]) 208.04 666.23 T
2 14 Q
(\271) 259.14 666.23 T
4 10 Q
( 1) 266.82 666.23 T
(Otherwise:) 108 651.23 T
(REPR[) 108 636.23 T
0 F
(offset_max) 141.32 636.23 T
4 F
(\050X, Y\051 ] = Max\050 REPR[ X ], REPR[ Y ]\051) 187.95 636.23 T
1 F
(The other OFFSET constructors map straightforwardly as in:) 72 621.23 T
4 F
(REPR[) 108 599.23 T
0 F
(offset_mult) 138.54 599.23 T
4 F
(\050X, E\051 ] = REPR[ X ] * REPR[ E ]) 186.84 599.23 T
1 F
(The mapping of add_to_ptr is given by:) 72 584.23 T
4 F
(REPR[) 108 562.23 T
0 F
(add_to_ptr) 141.32 562.23 T
4 F
(\050 E: POINTER A, X: OFFSET\050B, C\051\051 ] = REPR[ E ] + REPR[ X ]) 189.07 562.23 T
(if REPR[ A ]) 144 547.23 T
2 14 Q
(\271) 200.1 547.23 T
4 10 Q
( 1) 207.78 547.23 T
2 14 Q
(\331) 218.9 547.23 T
4 10 Q
( REPR[ C ]) 227.33 547.23 T
2 14 Q
(\271) 278.98 547.23 T
4 10 Q
( 1) 286.67 547.23 T
(REPR[ add_to_ptr\050 E: POINTER A, X: OFFSET\050B, C\051\051 ]) 108 532.23 T
(= \050a: REPR[ E ], d: REPR[ X ]\051) 126 517.23 T
(if REPR[ A ]) 126 502.23 T
2 14 Q
(\271) 182.1 502.23 T
4 10 Q
( 1) 189.78 502.23 T
2 14 Q
(\331) 200.9 502.23 T
4 10 Q
( REPR[ C ] = 1) 209.33 502.23 T
(REPR[ add_to_ptr\050 E: POINTER A, X: OFFSET\050B, C\051\051 ]) 108 487.23 T
(= \050a: REPR[ E ].a, d: REPR[ E ].d + REPR[ X ]\051) 126 472.23 T
(if REPR[ A ] = 1) 126 457.23 T
2 14 Q
(\331) 199.05 457.23 T
4 10 Q
( REPR[ C ] = 1) 207.49 457.23 T
1 F
1.13 (A translator working to this model maps ALIGNMENT) 72 427.23 P
1.13 (s into the integers and their inclusion constraints into) 302.69 427.23 P
0.39 (numerical comparisons. As a result, it will correctly allow many OFFSET) 72 415.23 P
0.39 (s which are disallowed in general; for) 370.54 415.23 P
1.04 (example, OFFSET\050{pointer}, {char_variety}\051 is allowed since REPR[ {pointer} ]) 72 403.23 P
2 14 Q
1.45 (\263) 411.31 403.23 P
1 10 Q
1.04 ( REPR[ {char_variety} ].) 418.99 403.23 P
(Rather fewer of these extra relationships are allowed in the next model considered.) 72 391.23 T
72 355.89 523.3 365.9 C
72 355.89 523.3 365.9 R
7 X
0 K
V
72 364.89 541.01 364.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 331.88 523.3 341.89 C
72 331.88 523.3 341.89 R
7 X
0 K
V
72 340.88 541.01 340.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(13.2) 72 346.56 T
(Model for machines like the iAPX-432) 108 346.56 T
1 10 Q
0.97 (The iAPX-432 does not have a linear model of store. The address of a word in store is a pair consisting of a) 72 315.22 P
0.26 (block-address and a displacement within that block. In order to take full advantage of the protection facilities of) 72 303.22 P
1.56 (the machine, block-addresses are strictly segregated from scalar data like integers, \337oats, displacements etc.) 72 291.22 P
0.33 (There are at least two dif) 72 279.22 P
0.33 (ferent kind of blocks, one which can only contain block-addresses and the other which) 173.12 279.22 P
1.46 (contains only scalar data. There are clearly dif) 72 267.22 P
1.46 (\336culties here in describing data-structures which contain both) 266.87 267.22 P
(pointers and scalar data.) 72 255.22 T
1.22 (Let us assume that the machine has bit-addressing to avoid the bit complications already covered in the \336rst) 72 233.22 P
0.45 (model. Also assume that instruction blocks are just scalar blocks and that block addresses are aligned on 32-bit) 72 221.22 P
(boundaries.) 72 209.22 T
0 F
(13.2.1) 72 183.22 T
(Alignment model) 108 183.22 T
1 F
0.17 (An ALIGNMENT is represented by a pair consisting of an integer) 72 166.22 P
0.17 (, giving the natural alignments for scalar data,) 338.64 166.22 P
(and boolean to indicate the presence of a block-address. Denote this by:) 72 154.22 T
4 F
(\050s: alignment_of_scalars, b: has_blocks\051) 126 132.22 T
FMENDPAGE
%%EndPage: "46" 52
%%Page: "47" 52
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 47) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
(W) 72 763.23 T
(e then have:) 80.64 763.23 T
4 F
(REPR[) 108 741.23 T
0 F
(alignment) 141.32 741.23 T
4 F
(\050{ }\051 ] = \050s: 1, b: F) 184.08 741.23 T
(ALSE\051) 258.81 741.23 T
(REPR[) 108 726.23 T
0 F
(alignment) 141.32 726.23 T
4 F
(\050{char_variety}\051 = \050s: 8, b:F) 184.08 726.23 T
(ALSE\051) 302.12 726.23 T
(... etc. for other numerical and bit\336eld varieties.) 108 711.23 T
(REPR[) 108 696.23 T
0 F
(alignment) 141.32 696.23 T
4 F
(\050{pointer}\051 ] = \050s: 32, b: TRUE\051) 184.08 696.23 T
(REPR[) 108 681.23 T
0 F
(alignment) 141.32 681.23 T
4 F
(\050{proc}\051 ] = \050s: 32, b: TRUE\051) 184.08 681.23 T
(REPR[) 108 666.23 T
0 F
(alignment) 141.32 666.23 T
4 F
(\050{local_label_value}\051 ] = \050s: 32, b: TRUE\051) 184.08 666.23 T
1 F
(The representation of a compound ALIGNMENT is given by:) 72 651.23 T
4 F
(REPR[ A) 108 629.23 T
2 14 Q
(\310) 150.77 629.23 T
4 10 Q
( B ] = \050s: Max\050REPR[ A ].s, REPR[ B ].s\051, b: REPR[ A ].b) 161.51 629.23 T
2 14 Q
( \332) 410.08 629.23 T
4 10 Q
( REPR[ B ].b \051) 422.01 629.23 T
1 F
(and their inclusion relationship is given by:) 72 614.23 T
4 F
(REPR[ A) 108 592.23 T
2 14 Q
(\311) 150.77 592.23 T
4 10 Q
( B ] = \050REPR[ A ].s) 160.74 592.23 T
2 14 Q
(\263) 246.57 592.23 T
4 10 Q
( REPR[ B ].s\051) 254.25 592.23 T
2 14 Q
(\331) 316.45 592.23 T
4 10 Q
( \050REPR[ A ].b) 324.89 592.23 T
2 14 Q
( \332) 384.88 592.23 T
(\330) 399.59 592.23 T
4 10 Q
( REPR[ B ].b\051) 409.57 592.23 T
0 F
(13.2.2) 72 566.23 T
(Offset and pointer model) 108 566.23 T
1 F
0.2 (A value with SHAPE POINTER A where) 72 549.23 P
2 14 Q
0.28 (\330) 243.02 549.23 P
1 10 Q
0.2 ( REPR[ A ].b is represented by a pair consisting of a block-address) 253 549.23 P
(of a scalar block and an integer bit-displacement within that block. Denote this by:) 72 537.23 T
4 F
(\050sb: scalar_block_address, sd: bit_displacement\051) 108 515.23 T
1 F
0.46 (A value with SHAPE POINTER A where REPR[ A ].b is represented by a quad word consisting of two block-) 72 500.23 P
0.96 (addresses and two bit-displacements within these blocks. One of these block addresses will contain the scalar) 72 488.23 P
0.26 (information pointed at by one of the bit-displacements; similarly) 72 476.23 P
0.26 (, the other pair will point at the block addresses) 331.62 476.23 P
(in the data are held. Denote this by:) 72 464.23 T
4 F
(\050sb: scalar_block_address, ab: address_block_address,) 108 442.23 T
(sd: scalar_displacement, ad: address_displacement \051) 113.56 427.23 T
1 F
(A value with SHAPE OFFSET\050A, B\051 where) 72 390.23 T
2 14 Q
(\330) 251.33 390.23 T
1 10 Q
( REPR[ A ].b is represented by an integer bit-displacement.) 261.31 390.23 T
0.07 (A value with SHAPE OFFSET\050A, B\051 where REPR[ A ].b is represented by a pair of bit-displacements, one rela-) 72 368.23 P
(tive to a scalar) 72 356.23 T
(-block and the other to an address-block. Denote this by:) 129.81 356.23 T
4 F
(\050 sd: scalar_displacement, ad: address_displacement \051) 108 334.23 T
0 F
(13.2.3) 72 308.23 T
(Size model) 108 308.23 T
1 F
(The sizes given by shape_of) 72 291.23 T
(fset are now:) 185.07 291.23 T
4 F
(REPR[) 108 269.23 T
0 F
(shape_offset) 138.54 269.23 T
4 F
(\050) 191.28 269.23 T
0 F
(integer) 194.61 269.23 T
4 F
(\050char_variety\051\051 ] = 8) 224.59 269.23 T
(... etc. for other numerical and bit\336eld varieties.) 108 254.23 T
(REPR[) 108 239.23 T
0 F
(shape_offset) 141.32 239.23 T
4 F
(\050) 194.06 239.23 T
0 F
(pointer) 197.39 239.23 T
4 F
(\050A\051\051 ] = \050 REPR[ A ].b \051 ? \050sd: 64, ad: 64\051 : \050sd: 32, ad: 32\051) 228.48 239.23 T
(REPR[) 108 224.23 T
0 F
(shape_offset) 141.32 224.23 T
4 F
(\050) 194.06 224.23 T
0 F
(offset) 197.39 224.23 T
4 F
(\050A, B\051\051 ] = \050REPR[ A ].b\051 ? 64 : 32\051) 220.7 224.23 T
(REPR[) 108 209.23 T
0 F
(shape_offset) 141.32 209.23 T
4 F
(\050) 194.06 209.23 T
0 F
(pr) 197.39 209.23 T
(oc) 207.21 209.23 T
4 F
(\051 ] = \050sd: 32, ad: 32\051) 216.64 209.23 T
(REPR[) 108 194.23 T
0 F
(shape_offset) 141.32 194.23 T
4 F
(\050) 194.06 194.23 T
0 F
(compound) 197.39 194.23 T
4 F
(\050E\051\051 ] = REPR[ E ]) 242.38 194.23 T
(REPR[) 108 179.23 T
0 F
(shape_offset) 141.32 179.23 T
4 F
(\050) 194.06 179.23 T
0 F
(nof) 197.39 179.23 T
4 F
(\050N, S\051\051 ]) 211.27 179.23 T
(= N* REPR[) 177.46 164.23 T
0 F
(offset_pad) 233.28 164.23 T
4 F
(\050) 277.7 164.23 T
0 F
(alignment) 281.02 164.23 T
4 F
(\050S\051\051,) 323.78 164.23 T
0 F
(shape_offset) 345.99 164.23 T
4 F
(\050S\051\051 ]) 398.73 164.23 T
(REPR[) 108 149.23 T
0 F
(shape_offset) 141.32 149.23 T
4 F
(\050top\051 ] = 0) 194.06 149.23 T
FMENDPAGE
%%EndPage: "47" 53
%%Page: "48" 53
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 48) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 F
0 X
(13.2.4) 72 763.23 T
(Offset arithmetic) 108 763.23 T
1 F
(The other OFFSET constructors are given by:) 72 746.23 T
4 F
(REPR[) 108 724.23 T
0 F
(offset_zer) 141.32 724.23 T
(o) 182.76 724.23 T
4 F
(\050A\051 ] = 0) 187.76 724.23 T
(if) 295.83 724.23 T
2 14 Q
(\330) 306.38 724.23 T
4 10 Q
( REPR[ A ].b) 316.36 724.23 T
(REPR[) 108 709.23 T
0 F
(offset_zer) 141.32 709.23 T
(o) 182.76 709.23 T
4 F
(\050A\051 ] = \050sd: 0, ad: 0\051) 187.76 709.23 T
(if REPR[ A ].b) 296.37 709.23 T
(REPR[) 108 679.23 T
0 F
(offset_add) 141.32 679.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 185.74 679.23 T
(: OFFSET\050C, D\051\051 ] = REPR[ X ] + REPR[ Y ]) 275.16 679.23 T
(if) 126 664.23 T
2 14 Q
(\330) 133.78 664.23 T
4 10 Q
( REPR[ A ].b) 143.75 664.23 T
2 14 Q
( \331 \330) 200.41 664.23 T
4 10 Q
( REPR[ C ].b) 225.82 664.23 T
(REPR[) 108 649.23 T
0 F
(offset_add) 141.32 649.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 185.74 649.23 T
(: OFFSET\050C, D\051\051 ]) 275.16 649.23 T
(= \050 sd: REPR[ X ].sd + REPR[ Y ].sd, ad: REPR[ X ].ad + REPR[ Y ].ad\051) 171.9 634.23 T
(if REPR[ A ].b) 126 619.23 T
2 14 Q
( \331) 187.66 619.23 T
4 10 Q
( REPR[ C ].b) 199.59 619.23 T
(REPR[) 108 604.23 T
0 F
(offset_add) 141.32 604.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 185.74 604.23 T
(: OFFSET\050C, D\051\051 ]) 275.16 604.23 T
(= \050 sd: REPR[ X ].sd + REPR[ Y ], ad:REPR[ X ].ad \051) 171.9 589.23 T
(if REPR[ A ].b) 126 574.23 T
2 14 Q
( \331) 187.66 574.23 T
(\330) 202.37 574.23 T
4 10 Q
( REPR[ C ].b) 212.35 574.23 T
(REPR[) 108 544.23 T
0 F
(offset_pad) 141.32 544.23 T
4 F
(\050A, Y) 185.74 544.23 T
(: OFFSET\050C, D\051\051 ] = \050REPR[Y ] + REPR[A ].s - 1\051/REPR[ A ].s) 207.4 544.23 T
(if) 126 529.23 T
2 14 Q
(\330) 133.78 529.23 T
4 10 Q
( REPR[ A ].b) 143.75 529.23 T
2 14 Q
( \331 \330) 200.41 529.23 T
4 10 Q
( REPR[ C ].b) 225.82 529.23 T
(REPR[) 108 514.23 T
0 F
(offset_pad) 141.32 514.23 T
4 F
(\050A, Y) 185.74 514.23 T
(: OFFSET\050C, D\051\051 ]) 207.4 514.23 T
(= \050 sd: \050REPR[Y ] + REPR[A ].s - 1\051/REPR[ A ].s, ad: REPR[ Y ].ad\051) 171.9 499.23 T
(if REPR[ C ].b) 126 484.23 T
(REPR[) 108 469.23 T
0 F
(offset_pad) 141.32 469.23 T
4 F
(\050A, Y) 185.74 469.23 T
(: OFFSET\050C, D\051\051 ]) 207.4 469.23 T
(= \050 sd: \050REPR[Y]+REPR[A].s-1\051/REPR[A].s, ad: 0\051) 171.9 454.23 T
(if REPR[ A ].b) 126 439.23 T
2 14 Q
( \331) 187.66 439.23 T
(\330) 202.37 439.23 T
4 10 Q
( REPR[ C ].b) 212.35 439.23 T
(REPR[) 108 424.23 T
0 F
(offset_max) 141.32 424.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 187.95 424.23 T
(: OFFSET\050C, D\051\051 ]) 277.37 424.23 T
(= Max\050REPR[ X ], REPR[ Y ]\051) 174.68 409.23 T
(if) 126 394.23 T
2 14 Q
(\330) 133.78 394.23 T
4 10 Q
( REPR[ A ].b) 143.75 394.23 T
2 14 Q
( \331 \330) 200.41 394.23 T
4 10 Q
( REPR[ C ].b) 225.82 394.23 T
(REPR[) 108 379.23 T
0 F
(offset_max) 141.32 379.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 187.95 379.23 T
(: OFFSET\050C, D\051\051 ]) 277.37 379.23 T
(= \050 sd: Max\050REPR[ X ].sd, REPR[ Y ].sd\051,) 171.9 364.23 T
(ad: Max\050REPR[ X ].a, REPR[ Y ].ad\051 \051) 188.58 349.23 T
(if REPR[ A ].b) 126 334.23 T
2 14 Q
( \331) 187.66 334.23 T
4 10 Q
( REPR[ C ].b) 199.59 334.23 T
(REPR[) 108 319.23 T
0 F
(offset_max) 141.32 319.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 187.95 319.23 T
(: OFFSET\050C, D\051\051 ]) 277.37 319.23 T
(= \050 sd: Max\050REPR[ X ].sd, REPR[ Y ]\051, ad:REPR[ X ].ad \051) 171.9 304.23 T
(if REPR[ A ].b) 126 289.23 T
2 14 Q
( \331) 187.66 289.23 T
(\330) 202.37 289.23 T
4 10 Q
( REPR[ C ].b) 212.35 289.23 T
(REPR[) 108 274.23 T
0 F
(offset_max) 141.32 274.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 187.95 274.23 T
(: OFFSET\050C, D\051\051 ]) 277.37 274.23 T
(= \050 sd: Max\050REPR[Y ].sd, REPR[ X]\051, ad: REPR[Y ].ad \051) 171.9 259.23 T
(if REPR[C ].b) 126 244.23 T
2 14 Q
( \331) 185.43 244.23 T
(\330) 200.14 244.23 T
4 10 Q
( REPR[ A ].b) 210.12 244.23 T
(REPR[) 108 214.23 T
0 F
(offset_subtract) 141.32 214.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 205.16 214.23 T
(: OFFSET\050C, D\051\051 ]) 294.58 214.23 T
(= REPR[ X ]- REPR[ Y ]) 171.9 199.23 T
(if) 126 184.23 T
2 14 Q
(\330) 133.78 184.23 T
4 10 Q
( REPR[ A ].b) 143.75 184.23 T
2 14 Q
( \331 \330) 200.41 184.23 T
4 10 Q
( REPR[ C ].b) 225.82 184.23 T
(REPR[) 108 169.23 T
0 F
(offset_subtract) 141.32 169.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 205.16 169.23 T
(: OFFSET\050C, D\051\051 ]) 294.58 169.23 T
(= \050 sd: REPR[ X ].sd - REPR[ Y ].sd, ad:REPR[ X ].ad - REPR[ Y ].ad\051) 171.9 154.23 T
(if REPR[ A ].b) 126 139.23 T
2 14 Q
( \331) 187.66 139.23 T
4 10 Q
( REPR[ C ].b) 199.59 139.23 T
(REPR[) 108 124.23 T
0 F
(offset_add) 141.32 124.23 T
4 F
(\050X: OFFSET\050A,B\051, Y) 185.74 124.23 T
(: OFFSET\050C, D\051\051 ]) 275.16 124.23 T
(= REPR[ X ].sd - REPR[ Y ]) 171.9 109.23 T
(if REPR[ A ].b) 126 94.23 T
2 14 Q
( \331) 187.66 94.23 T
(\330) 202.37 94.23 T
4 10 Q
( REPR[ C ].b) 212.35 94.23 T
(.... and so on.) 108 79.23 T
FMENDPAGE
%%EndPage: "48" 54
%%Page: "49" 54
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 49) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.2 (Unlike the previous one, this model of ALIGNMENT) 72 741.23 P
0.2 (s would reject OFFSET) 288.08 741.23 P
0.2 (s such as OFFSET\050{long_variety},) 382.64 741.23 P
({pointer}\051 but not OFFSET\050 {pointer}, {long_variety}\051 since:) 72 729.23 T
4 F
( REPR [ {long_variety}) 108 707.23 T
2 14 Q
(\311) 210.21 707.23 T
4 10 Q
( {pointer} ] = F) 220.19 707.23 T
(ALSE) 282.71 707.23 T
(but:) 108 692.23 T
( REPR [ {pointer}) 108 677.23 T
2 14 Q
(\311) 186.89 677.23 T
4 10 Q
( {long_variety} ] = TRUE) 196.86 677.23 T
1 F
0.22 (This just re\337ects the fact that there is no way that one can extract a block-address necessary for a pointer from a) 72 647.23 P
0.6 (scalar) 72 635.23 P
0.6 (-block, but since the representation of a pointer includes a scalar displacement, one can always retrieve a) 95.11 635.23 P
(scalar from a pointer to a pointer) 72 623.23 T
(.) 202.46 623.23 T
FMENDPAGE
%%EndPage: "49" 55
%%Page: "50" 55
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 50) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(14) 72 741.88 T
(Conclusion) 99 741.88 T
1 10 Q
-0.23 (This commentary is not complete. I have tended to go into considerable detail into aspects which I consider might) 72 665.19 P
0.35 (be unfamiliar and skip over others which occur in most compiling systems. I also have a tendency to say things) 72 653.19 P
(more than once, albeit in dif) 72 641.19 T
(ferent words; however if something is worth saying, it is worth saying twice.) 184.52 641.19 T
0.67 (I shall continue tracking further revisions of the TDF speci\336cation in later releases or appendices to this docu-) 72 619.19 P
(ment.) 72 607.19 T
FMENDPAGE
%%EndPage: "50" 56
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%Pages: 55 1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Symbol
%%+ Times-Italic
%%+ Helvetica
%%+ Helvetica-Bold
%%+ Times-BoldItalic
%%+ Helvetica-Oblique
%%+ Helvetica-BoldOblique
