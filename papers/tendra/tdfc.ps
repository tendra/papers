%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 595.3 841.9 0 1 16 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Helvetica FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
3 0 /Helvetica-Oblique FMFONTDEFINE
4 0 /Helvetica-BoldOblique FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Courier-Bold FMFONTDEFINE
7 0 /Courier-Oblique FMFONTDEFINE
8 0 /Courier-BoldOblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
0 24 Q
0 X
0 K
(The C to TDF Producer) 260.78 633.9 T
0 14 Q
(Issue 2.1.0 \050June 1993\051) 370.34 542.57 T
1 12 Q
(Defence Research Agency) 379.35 177.9 T
(St Andrews Rd) 442.02 162.9 T
(Malvern) 479.35 147.9 T
(W) 441.58 132.9 T
(orcestershire) 452.69 132.9 T
(WR14 3PS) 462.68 117.9 T
(United Kingdom) 436.68 102.9 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
99 776.9 540 786.9 C
99 785.9 567 785.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 790.23 T
(, Issue 2.1.0 \050June 1993\051) 182.31 790.23 T
0 12 Q
(Notice to Readers) 99 743.9 T
1 10 Q
0.77 (TDF is a portability technology and an architecture neutral format for expressing software applica-) 99 721.23 P
1.05 (tions which was developed by the United Kingdom's Defence Research Agency \050DRA\051. DRA has) 99 709.23 P
2.37 (demonstrated that the TDF technology can support ANSI C on MIPS) 99 697.23 P
2 14 Q
2.98 (\322) 425.44 697.23 P
1 10 Q
2.37 (, Intel 386) 436.5 697.23 P
2 14 Q
2.98 (\324) 485.13 697.23 P
1 10 Q
2.37 (, V) 497.58 697.23 P
2.37 (AX) 511.43 697.23 P
2 14 Q
2.98 (\324) 524.77 697.23 P
1 10 Q
2.37 (,) 537.22 697.23 P
(SP) 99 685.23 T
(ARC) 111.59 685.23 T
2 14 Q
(\324) 132.69 685.23 T
1 10 Q
( and Motorola) 145.15 685.23 T
2 14 Q
(\322) 206.25 685.23 T
1 10 Q
( 680x0.) 217.3 685.23 T
(Requests for information about TDF should be directed to:) 99 663.23 T
(    Dr) 99 641.23 T
(. N E Peeling) 120.11 641.23 T
(    Defence Research Agency) 99 629.23 T
(    St. Andrews Road) 99 617.23 T
(    Malvern) 99 605.23 T
(    W) 99 593.23 T
(orcestershire) 119.37 593.23 T
(    United Kingdom WR14 3PS) 99 581.23 T
(    T) 99 557.23 T
(el. +44 684 895314) 115.11 557.23 T
(    Fax +44 684 894303) 99 545.23 T
(    Internet peeling%hermes.mod.uk) 99 521.23 T
3 F
(@) 256.76 521.23 T
1 F
(relay) 266.91 521.23 T
(.mod.uk) 287.83 521.23 T
0.55 (While every attempt has been made to ensure the accuracy of all the information in this document) 99 497.23 P
0.29 (the Defence Research Agency assumes no liability to any party for loss or damage, whether direct,) 99 485.23 P
0.33 (indirect, incidental, or consequential, caused by errors or omissions or by statements of any kind in) 99 473.23 P
0.49 (this document, or for the use of any product or system described herein. The reader shall bear the) 99 461.23 P
(sole responsibility for his/her actions taken in reliance on the information in this document.) 99 449.23 T
0.53 (This document is for advanced information. It is not necessarily to be regarded as a \336nal or of) 99 427.23 P
0.53 (\336cial) 520.01 427.23 P
(statement by the Defence Research Agency) 99 415.23 T
(.) 293.8 415.23 T
(June 1993) 99 393.23 T
(Intel 386 is a registered trademark of Intel Corporation) 99 349.23 T
(MIPS is a registered trade mark of Mips Computer Systems Inc.) 99 327.23 T
(V) 99 305.23 T
(AX is a registered trademark of Digital Equipment Corporation) 104.93 305.23 T
(SP) 99 283.23 T
(ARC is a registered trademark of SP) 111.59 283.23 T
(ARC International, Inc.) 272.48 283.23 T
(Motorola is a registered trade mark of Motorola Inc.) 99 261.23 T
2 14 Q
(\323) 99 195.23 T
1 10 Q
( Crown Copyright 1993) 110.05 195.23 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
99 749.9 540 759.9 C
99 758.9 567 758.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 763.23 T
(, Issue 2.1.0 \050June 1993\051) 182.31 763.23 T
(3) 525.44 763.23 T
99 701.9 540 713.9 C
99 712.9 567 712.9 2 L
1 H
2 Z
0 X
0 K
N
99 709.9 567 709.9 2 L
N
0 0 595.3 841.9 C
99 665.9 540 677.9 C
99 676.9 567 676.9 2 L
1 H
2 Z
0 X
0 K
N
99 673.9 567 673.9 2 L
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(CONTENTS) 253.54 685.9 T
1 10 Q
(1) 99 583.23 T
(Introduction) 117 583.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 172.26 583.23 T
(7) 525.44 583.23 T
(1.1) 106.2 566.23 T
(Error detection) 135 566.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 205.61 566.23 T
(7) 525.44 566.23 T
(1.1.1) 113.4 553.23 T
(External Error detection) 153 553.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 261.18 553.23 T
(7) 525.44 553.23 T
(1.1.2) 113.4 540.23 T
(Internal Error detection) 153 540.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 258.4 540.23 T
(7) 525.44 540.23 T
(1.1.3) 113.4 527.23 T
(Programming Error detection) 153 527.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 286.18 527.23 T
(7) 525.44 527.23 T
(1.2) 106.2 510.23 T
(Levels of Portability) 135 510.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 225.06 510.23 T
(7) 525.44 510.23 T
(1.3) 106.2 493.23 T
(ANSI C Compatibility) 135 493.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 233.39 493.23 T
(8) 525.44 493.23 T
(1.4) 106.2 476.23 T
(Implementation details) 135 476.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 238.95 476.23 T
(8) 525.44 476.23 T
(1.4.1) 113.4 463.23 T
3 F
(Startup) 153 463.23 T
1 F
( and) 185.22 463.23 T
3 F
(Termination) 207.45 463.23 T
1 F
( files) 260.21 463.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 286.18 463.23 T
(8) 525.44 463.23 T
(1.4.2) 113.4 450.23 T
(Error Messages) 153 450.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.84 450.23 T
(8) 525.44 450.23 T
(1.5) 106.2 433.23 T
(Typing convention) 135 433.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 219.5 433.23 T
(9) 525.44 433.23 T
(1.6) 106.2 416.23 T
(Prior Knowledge) 135 416.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 211.16 416.23 T
(9) 525.44 416.23 T
(2) 99 398.23 T
(Program Construct Tokens) 117 398.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 241.73 398.23 T
(10) 519.89 398.23 T
(2.1) 106.2 381.23 T
(Interfaces and Tokens) 135 381.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 238.95 381.23 T
(10) 519.89 381.23 T
(2.2) 106.2 364.23 T
(Construction phases) 135 364.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 230.61 364.23 T
(11) 519.89 364.23 T
(2.3) 106.2 347.23 T
(The token syntax) 135 347.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 213.94 347.23 T
(11) 519.89 347.23 T
(2.4) 106.2 330.23 T
(Token Identification) 135 330.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 225.06 330.23 T
(12) 519.89 330.23 T
(2.4.1) 113.4 317.23 T
(Internal token identification) 153 317.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 275.07 317.23 T
(12) 519.89 317.23 T
(2.4.2) 113.4 304.23 T
(External token identification) 153 304.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 280.63 304.23 T
(13) 519.89 304.23 T
(2.5) 106.2 287.23 T
(Kinds of token) 135 287.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 202.83 287.23 T
(13) 519.89 287.23 T
(2.6) 106.2 270.23 T
(The Expression token) 135 270.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 236.17 270.23 T
(13) 519.89 270.23 T
(2.6.1) 113.4 257.23 T
(Expression Designations) 153 257.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 266.73 257.23 T
(14) 519.89 257.23 T
(2.6.2) 113.4 244.23 T
(General Expression Introduction) 153 244.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 300.08 244.23 T
(14) 519.89 244.23 T
(2.6.3) 113.4 231.23 T
(Constant Expression Introduction) 153 231.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 305.63 231.23 T
(14) 519.89 231.23 T
(2.6.4) 113.4 218.23 T
(Name Spaces) 153 218.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 219.5 218.23 T
(14) 519.89 218.23 T
(2.6.5) 113.4 205.23 T
(Using expression tokens) 153 205.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 266.73 205.23 T
(15) 519.89 205.23 T
(2.6.6) 113.4 192.23 T
(Defining expression tokens) 153 192.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 277.85 192.23 T
(15) 519.89 192.23 T
(2.6.7) 113.4 179.23 T
(Defining Expressions with Externals) 153 179.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 316.75 179.23 T
(18) 519.89 179.23 T
(2.7) 106.2 162.23 T
(The Statement Token) 135 162.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 236.17 162.23 T
(18) 519.89 162.23 T
(2.7.1) 113.4 149.23 T
(Name Spaces) 153 149.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 219.5 149.23 T
(19) 519.89 149.23 T
(2.7.2) 113.4 136.23 T
(Using statement tokens) 153 136.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 261.18 136.23 T
(19) 519.89 136.23 T
(2.7.3) 113.4 123.23 T
(Defining statement tokens) 153 123.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 272.29 123.23 T
(19) 519.89 123.23 T
(2.8) 106.2 106.23 T
(Type tokens) 135 106.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 194.49 106.23 T
(20) 519.89 106.23 T
(2.8.1) 113.4 93.23 T
(General type tokens) 153 93.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 247.28 93.23 T
(20) 519.89 93.23 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
99 749.9 540 759.9 C
99 758.9 567 758.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 763.23 T
(, Issue 2.1.0 \050June 1993\051) 182.31 763.23 T
(4) 525.44 763.23 T
(2.8.2) 113.4 709.23 T
(Derived Declarator types) 153 709.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 266.73 709.23 T
(22) 519.89 709.23 T
(2.8.3) 113.4 696.23 T
(Integral type tokens) 153 696.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 244.51 696.23 T
(22) 519.89 696.23 T
(2.8.4) 113.4 683.23 T
(Floating type tokens) 153 683.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 247.28 683.23 T
(23) 519.89 683.23 T
(2.8.5) 113.4 670.23 T
(Arithmetic type tokens) 153 670.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 255.62 670.23 T
(23) 519.89 670.23 T
(2.8.6) 113.4 657.23 T
(Compound type tokens) 153 657.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 261.18 657.23 T
(23) 519.89 657.23 T
(2.8.7) 113.4 644.23 T
(Type token compatibility) 153 644.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 263.95 644.23 T
(24) 519.89 644.23 T
(2.8.8) 113.4 631.23 T
(Defining type tokens) 153 631.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 247.28 631.23 T
(24) 519.89 631.23 T
(2.9) 106.2 614.23 T
(Selector Tokens) 135 614.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 211.16 614.23 T
(25) 519.89 614.23 T
(2.9.1) 113.4 601.23 T
(Member Selector Ordering) 153 601.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 275.07 601.23 T
(25) 519.89 601.23 T
(2.9.2) 113.4 588.23 T
(Name Spaces) 153 588.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 219.5 588.23 T
(26) 519.89 588.23 T
(2.9.3) 113.4 575.23 T
(The use of selector tokens) 153 575.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 275.07 575.23 T
(26) 519.89 575.23 T
(2.9.4) 113.4 562.23 T
(Defining token selectors) 153 562.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 263.95 562.23 T
(26) 519.89 562.23 T
(2.10) 106.2 545.23 T
(Procedure tokens) 135 545.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 216.72 545.23 T
(28) 519.89 545.23 T
(2.10.1) 113.4 532.23 T
(General Procedure Introduction) 153 532.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 297.3 532.23 T
(28) 519.89 532.23 T
(2.10.2) 113.4 519.23 T
(Simple procedure tokens) 153 519.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 266.73 519.23 T
(31) 519.89 519.23 T
(2.10.3) 113.4 506.23 T
(Function procedure tokens) 153 506.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 275.07 506.23 T
(32) 519.89 506.23 T
(2.10.4) 113.4 493.23 T
(Defining procedure tokens) 153 493.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 275.07 493.23 T
(33) 519.89 493.23 T
(2.11) 106.2 476.23 T
(Token definition states) 135 476.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 238.95 476.23 T
(35) 519.89 476.23 T
(2.11.1) 113.4 463.23 T
(The token operators) 153 463.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 247.28 463.23 T
(36) 519.89 463.23 T
(2.11.2) 113.4 450.23 T
(The interface operators) 153 450.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 261.18 450.23 T
(36) 519.89 450.23 T
(3) 99 432.23 T
(Portability Checks) 117 432.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 200.05 432.23 T
(38) 519.89 432.23 T
(3.1) 106.2 415.23 T
(Introduction) 135 415.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 191.71 415.23 T
(38) 519.89 415.23 T
(3.2) 106.2 398.23 T
(The portability table) 135 398.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 225.06 398.23 T
(38) 519.89 398.23 T
(3.2.1) 113.4 385.23 T
(Integer sizes) 153 385.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 213.94 385.23 T
(38) 519.89 385.23 T
(3.2.2) 113.4 372.23 T
(Integer ranges) 153 372.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 222.28 372.23 T
(39) 519.89 372.23 T
(3.3) 106.2 355.23 T
(Integer Conversions) 135 355.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.84 355.23 T
(40) 519.89 355.23 T
(3.3.1) 113.4 342.23 T
(Conversions errors) 153 342.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 241.73 342.23 T
(41) 519.89 342.23 T
(3.4) 106.2 325.23 T
(Integer literals) 135 325.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 202.83 325.23 T
(41) 519.89 325.23 T
(3.4.1) 113.4 312.23 T
(The type computation specification) 153 312.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 311.19 312.23 T
(42) 519.89 312.23 T
(3.4.2) 113.4 299.23 T
(ANSI C Compliance) 153 299.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 247.28 299.23 T
(44) 519.89 299.23 T
(3.5) 106.2 282.23 T
(User defined conversions) 135 282.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 252.84 282.23 T
(44) 519.89 282.23 T
(4) 99 264.23 T
(C Variants) 117 264.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 166.71 264.23 T
(46) 519.89 264.23 T
(4.1) 106.2 247.23 T
(Integer Promotions) 135 247.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 222.28 247.23 T
(46) 519.89 247.23 T
(4.1.1) 113.4 234.23 T
(Literal Integer Promotion) 153 234.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 266.73 234.23 T
(47) 519.89 234.23 T
(4.1.2) 113.4 221.23 T
(Computed Promotions) 153 221.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 255.62 221.23 T
(47) 519.89 221.23 T
(4.2) 106.2 204.23 T
(Tag Name Classifications) 135 204.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 252.84 204.23 T
(48) 519.89 204.23 T
(4.3) 106.2 187.23 T
(Re-definition of types) 135 187.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 233.39 187.23 T
(48) 519.89 187.23 T
(4.4) 106.2 170.23 T
(Generic pointers) 135 170.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 211.16 170.23 T
(49) 519.89 170.23 T
(4.5) 106.2 153.23 T
(Parameter Compatibility) 135 153.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 244.51 153.23 T
(49) 519.89 153.23 T
(4.5.1) 113.4 140.23 T
(Type-type parameter compatibility) 153 140.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 308.41 140.23 T
(50) 519.89 140.23 T
(4.5.2) 113.4 127.23 T
(Type-ellipsis compatibility) 153 127.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 269.51 127.23 T
(50) 519.89 127.23 T
(4.5.3) 113.4 114.23 T
(Ellipsis compatibility) 153 114.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 247.28 114.23 T
(50) 519.89 114.23 T
(4.5.4) 113.4 101.23 T
(Examples) 153 101.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 200.05 101.23 T
(50) 519.89 101.23 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
99 749.9 540 759.9 C
99 758.9 567 758.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 763.23 T
(, Issue 2.1.0 \050June 1993\051) 182.31 763.23 T
(5) 525.44 763.23 T
(4.6) 106.2 709.23 T
(External Name Space) 135 709.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 236.17 709.23 T
(51) 519.89 709.23 T
(4.7) 106.2 692.23 T
(External Volatility) 135 692.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 216.72 692.23 T
(51) 519.89 692.23 T
(4.8) 106.2 675.23 T
(Enumeration Constants) 135 675.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 244.51 675.23 T
(51) 519.89 675.23 T
(4.9) 106.2 658.23 T
(Lvalue Conditionals) 135 658.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 225.06 658.23 T
(51) 519.89 658.23 T
(4.10) 106.2 641.23 T
(Syntactic Extensions) 135 641.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 230.61 641.23 T
(52) 519.89 641.23 T
(4.10.1) 113.4 628.23 T
(No external declarations) 153 628.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 263.95 628.23 T
(52) 519.89 628.23 T
(4.10.2) 113.4 615.23 T
(Extra Semi-colons) 153 615.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 238.95 615.23 T
(52) 519.89 615.23 T
(4.10.3) 113.4 602.23 T
(Unknown Escape Sequences) 153 602.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 288.96 602.23 T
(53) 519.89 602.23 T
(4.10.4) 113.4 589.23 T
(Macro Equality) 153 589.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 222.28 589.23 T
(53) 519.89 589.23 T
(4.10.5) 113.4 576.23 T
(Implicit integer type) 153 576.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 244.51 576.23 T
(53) 519.89 576.23 T
(4.11) 106.2 559.23 T
(Directive Control) 135 559.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 213.94 559.23 T
(53) 519.89 559.23 T
(4.11.1) 113.4 546.23 T
(Pragma Control) 153 546.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.84 546.23 T
(53) 519.89 546.23 T
(4.11.2) 113.4 533.23 T
(Extra directives) 153 533.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 225.06 533.23 T
(53) 519.89 533.23 T
(5) 99 515.23 T
(Correctness checking) 117 515.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 216.72 515.23 T
(55) 519.89 515.23 T
(5.1) 106.2 498.23 T
(Non-prototype checking) 135 498.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 244.51 498.23 T
(55) 519.89 498.23 T
(5.1.1) 113.4 485.23 T
(The weak prototype constructor) 153 485.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 297.3 485.23 T
(55) 519.89 485.23 T
(5.1.2) 113.4 472.23 T
(Argument checking) 153 472.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 241.73 472.23 T
(56) 519.89 472.23 T
(5.1.3) 113.4 459.23 T
(Weak Argument conversion) 153 459.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 280.63 459.23 T
(56) 519.89 459.23 T
(5.1.4) 113.4 446.23 T
(The type of a function definition) 153 446.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 297.3 446.23 T
(57) 519.89 446.23 T
(5.1.5) 113.4 433.23 T
(Function type compatibility) 153 433.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 275.07 433.23 T
(57) 519.89 433.23 T
(5.2) 106.2 416.23 T
(Implicit declarations) 135 416.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.84 416.23 T
(57) 519.89 416.23 T
(6) 99 398.23 T
(Implementation Defined Behaviour) 117 398.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 275.07 398.23 T
(58) 519.89 398.23 T
(6.1) 106.2 381.23 T
(Linkage Resolution) 135 381.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 225.06 381.23 T
(58) 519.89 381.23 T
(6.2) 106.2 364.23 T
(Static identifications) 135 364.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.84 364.23 T
(59) 519.89 364.23 T
(7) 99 346.23 T
(References) 117 346.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 172.26 346.23 T
(60) 519.89 346.23 T
(A) 99 328.23 T
(Pragma Syntax) 117 328.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 188.94 328.23 T
(61) 519.89 328.23 T
(A.1) 106.2 311.23 T
(Basic pragma syntax: # pragma) 135 311.23 T
3 F
(pragma-syntax) 278.31 311.23 T
1 F
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 347.31 311.23 T
(61) 519.89 311.23 T
(A.2) 106.2 294.23 T
(Token syntax) 135 294.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.27 294.23 T
(61) 519.89 294.23 T
(A.2.1) 113.4 281.23 T
(Expression token syntax) 153 281.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 266.73 281.23 T
(62) 519.89 281.23 T
(A.2.2) 113.4 268.23 T
(Statement token syntax) 153 268.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 261.18 268.23 T
(62) 519.89 268.23 T
(A.2.3) 113.4 255.23 T
(Type token syntax) 153 255.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 238.95 255.23 T
(62) 519.89 255.23 T
(A.2.4) 113.4 242.23 T
(Selector token syntax) 153 242.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 252.84 242.23 T
(62) 519.89 242.23 T
(A.2.5) 113.4 229.23 T
(Procedure token syntax) 153 229.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 261.18 229.23 T
(62) 519.89 229.23 T
(A.3) 106.2 212.23 T
(Definition Syntax) 135 212.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 213.94 212.23 T
(63) 519.89 212.23 T
(A.3.1) 113.4 199.23 T
(Member selector definition syntax) 153 199.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 305.63 199.23 T
(63) 519.89 199.23 T
(A.4) 106.2 182.23 T
(Token control) 135 182.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 200.05 182.23 T
(64) 519.89 182.23 T
(A.5) 106.2 165.23 T
(Syntax for Portability Checks) 135 165.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 266.73 165.23 T
(64) 519.89 165.23 T
(A.5.1) 113.4 152.23 T
(Conversion checks) 153 152.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 241.73 152.23 T
(64) 519.89 152.23 T
(A.5.2) 113.4 139.23 T
(Integer literal specifications) 153 139.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 277.85 139.23 T
(64) 519.89 139.23 T
(A.6) 106.2 122.23 T
(Syntax for C Variants) 135 122.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 233.39 122.23 T
(65) 519.89 122.23 T
(A.7) 106.2 105.23 T
(Correctness checks) 135 105.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.84 105.23 T
(67) 519.89 105.23 T
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
99 749.9 540 759.9 C
99 758.9 567 758.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 763.23 T
(, Issue 2.1.0 \050June 1993\051) 182.31 763.23 T
(6) 525.44 763.23 T
(A.8) 106.2 709.23 T
(Implementation Control) 135 709.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 241.73 709.23 T
(67) 519.89 709.23 T
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(7) 525.44 755.24 T
99 699.4 540 711.4 C
99 710.4 567 710.4 2 L
1 H
2 Z
0 X
0 K
N
99 707.4 567 707.4 2 L
N
0 0 595.3 841.9 C
99 663.4 540 675.4 C
99 674.4 567 674.4 2 L
1 H
2 Z
0 X
0 K
N
99 671.4 567 671.4 2 L
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(1) 99 683.4 T
(Introduction) 126 683.4 T
1 10 Q
0.2 (The C to TDF compiler has been designed spe-) 99 583.23 P
0 (ci\336cally to allow and aid the construction of port-) 99 571.23 P
0.47 (able software. There are two main areas where) 99 559.23 P
2.77 (programmers have to tackle the problems of) 99 547.23 P
0.26 (portability) 99 535.23 P
0.26 (, one) 141.03 535.23 P
3 F
0.26 (internal) 166.55 535.23 P
1 F
0.26 ( to the compiler the other) 199.32 535.23 P
3 F
(external) 99 523.23 T
1 F
(.) 134.55 523.23 T
3 F
4.71 (Internal) 99 501.23 P
1 F
4.71 ( portability considerations are where) 132.33 501.23 P
0.12 (there is room for the TDF produced by the com-) 99 489.23 P
-0.04 (piler to behave dif) 99 477.23 P
-0.04 (ferently on dif) 177.58 477.23 P
-0.04 (ferent machines.) 237.31 477.23 P
2.22 (This can occur if the TDF produced is unde-) 99 465.23 P
3.21 (\336ned, or implementation de\336ned, leaving the) 99 453.23 P
2.03 (possibility of dif) 99 441.23 P
2.03 (ferent installers installing them) 170.64 441.23 P
(dif) 99 429.23 T
(ferently) 109.37 429.23 T
(.) 141.41 429.23 T
3 F
-0.23 (External) 99 407.23 P
1 F
-0.23 ( portability considerations are where dif-) 135.66 407.23 P
2.03 (ferent programs are required to represent the) 99 395.23 P
5.73 (same application on dif) 99 383.23 P
5.73 (ferent systems/plat-) 218.22 383.23 P
0.76 (forms. This occurs, for example, when dif) 99 371.23 P
0.76 (ferent) 285.59 371.23 P
1.92 (algorithms are required for dif) 99 359.23 P
1.92 (ferent platforms,) 237.02 359.23 P
0.13 (or when the application has to interface with dif-) 99 347.23 P
2.77 (ferent software. In such cases, the program-) 99 335.23 P
2.08 (mers\325 aim is usually to write their software in) 99 323.23 P
0.2 (such a manner as to separate the portable from) 99 311.23 P
2.99 (the non-portable program. The most obvious) 99 299.23 P
1.29 (example of such a division is the writing of an) 99 287.23 P
2.63 (application sitting on top of an API, such as) 99 275.23 P
0.74 (POSIX. The basic idea is to use the same pro-) 99 263.23 P
2.96 (gram on all machines/systems with the non-) 99 251.23 P
4.1 (portable components being provided by the) 99 239.23 P
(implementations of the APIs on each system.) 99 227.23 T
99 191.9 311.15 201.9 C
99 200.9 567 200.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 167.9 311.15 177.9 C
99 176.9 567 176.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(1.1) 99 182.57 T
(Error detection) 135 182.57 T
1 10 Q
2.4 (The compiler cannot detect all programs that) 99 151.23 P
0.43 (are not portable; to do so, whilst still retaining a) 99 139.23 P
2.81 (suf) 99 127.23 P
2.81 (\336ciently general programming language, is) 112.15 127.23 P
(not possible.) 99 115.23 T
0 F
(1.1.1) 329.15 583.23 T
(External Error detection) 365.15 583.23 T
1 F
1.84 (The compiler) 329.15 566.23 P
1.84 (, by the explicit representation of) 388.2 566.23 P
2.3 (the interfaces between the portable and non-) 329.15 554.23 P
2.01 (portable parts of a program, is able to detect) 329.15 542.23 P
3 F
4.55 (external) 329.15 530.23 P
1 F
4.55 ( portability errors which are usually) 364.7 530.23 P
-0.1 (missed. The representation of APIs, using these) 329.15 518.23 P
1.66 (interfaces, provides a powerful mechanism for) 329.15 506.23 P
3.32 (detecting non-conformance of applications to) 329.15 494.23 P
5.21 (speci\336c APIs. It simultaneously provides a) 329.15 482.23 P
2.9 (mechanism for detecting non-conformance of) 329.15 470.23 P
2.21 (implementations of APIs. The description and) 329.15 458.23 P
1.18 (method of use of these interfaces is described) 329.15 446.23 P
(in Section 2.) 329.15 434.23 T
0 F
(1.1.2) 329.15 408.23 T
(Internal Error detection) 365.15 408.23 T
1 F
1.03 (The compiler is capable of performing a selec-) 329.15 391.23 P
0.94 (tion of checks to detect the use of C code that) 329.15 379.23 P
0.55 (will compile to produce unde\336ned or implemen-) 329.15 367.23 P
0.08 (tation de\336ned TDF) 329.15 355.23 P
0.08 (. These checks are controlled) 410.42 355.23 P
-0.17 (by the inclusion of pragmas which are described) 329.15 343.23 P
(in Section 3.) 329.15 331.23 T
0 F
(1.1.3) 329.15 305.23 T
(Programming Error detection) 365.15 305.23 T
1 F
0.55 (By the inclusion of pragmas as detailed in Sec-) 329.15 288.23 P
-0.22 (tion 5, the compiler is capable of detecting some) 329.15 276.23 P
3.22 (common programming errors. These are not) 329.15 264.23 P
4.07 (errors associated particularly with portability) 329.15 252.23 P
4.07 (,) 538.52 252.23 P
1.2 (more with general consistency of the program.) 329.15 240.23 P
1.29 (They can be thought of as being on the same) 329.15 228.23 P
1.03 (footing as Lint checks, but the checks are per-) 329.15 216.23 P
2.12 (formed during the compilation process by the) 329.15 204.23 P
(compiler) 329.15 192.23 T
(.) 366.36 192.23 T
329.15 156.9 541.3 166.9 C
329.15 165.9 797.15 165.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 132.9 541.3 142.9 C
329.15 141.9 797.15 141.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(1.2) 329.15 147.57 T
(Levels of Portability) 365.15 147.57 T
1 10 Q
-0.16 (Dif) 329.15 116.23 P
-0.16 (ferent programs can require dif) 341.18 116.23 P
-0.16 (ferent degrees) 477.01 116.23 P
0.64 (of portability) 329.15 104.23 P
0.64 (. For example it is reasonable for a) 382.93 104.23 P
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(8) 525.44 755.24 T
0 (program to be written so that it is portable to 32-) 99 709.23 P
2.99 (bit architectures, but not 16-bit architectures.) 99 697.23 P
-0.1 (The compiler allows the programmers to include) 99 685.23 P
4.44 (in their programs pragmas that control the) 99 673.23 P
5.1 (degree of portability against which internal) 99 661.23 P
(checks are made see Section 1.1.2.) 99 649.23 T
-0.06 (A typical use of dif) 99 627.23 P
-0.06 (ferent portability levels occurs) 179.69 627.23 P
1.58 (with the separation of a program into portable) 99 615.23 P
4.43 (and non-portable components. The portable) 99 603.23 P
0.67 (part of the program may be designed to run on) 99 591.23 P
1.9 (all machines which architectures of 16 bits or) 99 579.23 P
1.1 (greater) 99 567.23 P
1.1 (, whereas the non-portable part may be) 130.11 567.23 P
-0.22 (designed only to run on 32 bit architectures. The) 99 555.23 P
0.1 (separation of the compilation process described) 99 543.23 P
2.06 (in Section 2 allows the appropriate checks to) 99 531.23 P
(made on the dif) 99 519.23 T
(ferent parts of the program.) 167.71 519.23 T
99 483.9 311.15 493.9 C
99 492.9 567 492.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 459.9 311.15 469.9 C
99 468.9 567 468.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(1.3) 99 474.57 T
(ANSI C Compatibility) 135 474.57 T
1 10 Q
0.13 (The compiler) 99 443.23 P
0.13 (, except as detailed in Section 5, is) 156.34 443.23 P
1.35 (a strictly conforming ANSI C compiler) 99 431.23 P
1.35 (, Ref [1].) 270.68 431.23 P
1.26 (However) 99 419.23 P
1.26 (, by the use of pragmas, the compiler) 137.88 419.23 P
(has been extended to:) 99 407.23 T
(1.) 99 385.23 T
2.56 (allow program separation, as described in) 113.4 385.23 P
(Section 2.) 113.4 373.23 T
(2.) 99 351.23 T
1.11 ( to provide information for portability check-) 113.4 351.23 P
(ing, as described in Section 3.) 113.4 339.23 T
(3.) 99 317.23 T
1.27 (to instruct the compiler to accept other dia-) 113.4 317.23 P
(lects of C, as described in Section 4.) 113.4 305.23 T
(4.) 99 283.23 T
10.14 (to provide consistency checking, as) 113.4 283.23 P
(described in Section 5.) 113.4 271.23 T
2.46 (Many of the dialects of C can be viewed as) 99 249.23 P
4.53 (extensions of ANSI C, however) 99 237.23 P
4.53 (, some are) 254.88 237.23 P
1.03 (inconsistent with ANSI C. The compiler) 99 225.23 P
1.03 (, by the) 276.31 225.23 P
0.08 (use of pragmas, accommodates both classes of) 99 213.23 P
-0.19 (variant, with the possibility of providing warnings) 99 201.23 P
1.1 (whenever the use of a variant is required. The) 99 189.23 P
0.65 (details of the pragmas that ef) 99 177.23 P
0.65 (fect the non-ANSI) 230.96 177.23 P
(variants are described in Section 4.) 99 165.23 T
329.15 705.9 541.3 715.9 C
329.15 714.9 797.15 714.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 681.9 541.3 691.9 C
329.15 690.9 797.15 690.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(1.4) 329.15 696.57 T
(Implementation details) 365.15 696.57 T
0 10 Q
(1.4.1) 329.15 659.23 T
4 F
(Startup) 365.15 659.23 T
0 F
( and) 400.13 659.23 T
4 F
(T) 423.46 659.23 T
(ermination) 429.19 659.23 T
0 F
( \336les) 480.29 659.23 T
1 F
0.24 (The compiler is designed to be \337exible, that is it) 329.15 642.23 P
-0.25 (can be customised to meet a variety of needs as) 329.15 630.23 P
2.21 (introduced in the previous sections. However) 329.15 618.23 P
2.21 (,) 538.52 618.23 P
1.82 (most programmers would prefer to set up the) 329.15 606.23 P
2.86 (compiler once and use that setup thereafter) 329.15 594.23 P
2.86 (.) 538.52 594.23 P
0.39 (This is performed by using) 329.15 582.23 P
3 F
0.39 (startup) 451.08 582.23 P
1 F
0.39 ( and) 481.64 582.23 P
3 F
0.39 ( termina-) 501.48 582.23 P
(tion) 329.15 570.23 T
1 F
( \336les with) 345.26 570.23 T
3 F
(tcc) 389.14 570.23 T
1 F
( environments \050Ref [4]\051.) 401.91 570.23 T
-0.16 (A) 329.15 548.23 P
3 F
-0.16 (startup) 338.44 548.23 P
1 F
-0.16 ( \336le is a \336le that is included by the com-) 368.99 548.23 P
0.55 (piler prior to the compilation of the main source) 329.15 536.23 P
0.39 (\336le. It usually consists of pragmas for customis-) 329.15 524.23 P
1.82 (ing the compiler and is usually supplied auto-) 329.15 512.23 P
(matically by) 329.15 500.23 T
3 F
(tcc) 384.13 500.23 T
1 F
(.) 396.9 500.23 T
0.44 (A) 329.15 478.23 P
3 F
0.44 (termination) 339.03 478.23 P
1 F
0.44 ( \336le is a \336le that is included by the) 388.46 478.23 P
4.9 (compiler after the compilation of the main) 329.15 466.23 P
2.63 (source \336le. There is no standard use of this) 329.15 454.23 P
-0.05 (facility) 329.15 442.23 P
-0.05 (, but it can be used for uniformly providing) 356.17 442.23 P
1.29 (information about objects declared in the main) 329.15 430.23 P
2.91 (body) 329.15 418.23 P
2.91 (, for example identifying the initialization) 350.08 418.23 P
2.45 (function produced as a result of executing C) 329.15 406.23 P
(front on a C++ source \336le \050see Section 6.2\051.) 329.15 394.23 T
0 F
(1.4.2) 329.15 368.23 T
(Error Messages) 365.15 368.23 T
1 F
1.29 (The error messages produced by the compiler) 329.15 351.23 P
1.34 (have been designed to provide as much infor-) 329.15 339.23 P
1.24 (mation as is practical about the reason for the) 329.15 327.23 P
1.66 (message. T) 329.15 315.23 P
1.66 (o this end an error message often) 381.91 315.23 P
1 (consists of several sub-messages which corre-) 329.15 303.23 P
0.31 (spond to the conditions that exist to necessitate) 329.15 291.23 P
2.21 (the message. Associated with each sub-mes-) 329.15 279.23 P
1.65 (sage is a reference to the documentation that) 329.15 267.23 P
2.03 (provides a more complete explanation for the) 329.15 255.23 P
(message.) 329.15 243.23 T
2.31 (There are only two documents referenced by) 329.15 221.23 P
0.34 (these error messages, this one and the ANSI C) 329.15 209.23 P
3.53 (Standard, Ref [1]. In the case of the ANSI) 329.15 197.23 P
0.82 (Standard the precise section number has been) 329.15 185.23 P
-0.19 (identi\336ed, but, currently) 329.15 173.23 P
-0.19 (, in the case of this docu-) 431.35 173.23 P
(ment only the general sections are referred to.) 329.15 161.23 T
0.92 (The references included in the error messages) 329.15 139.23 P
(can be indenti\336ed thus:) 329.15 127.23 T
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(9) 525.44 755.24 T
(1.) 99 709.23 T
0 F
2.23 (ANSI[) 113.4 709.23 P
3 F
2.23 (section_no) 140.6 709.23 P
0 F
2.23 (]:) 188.94 709.23 P
1 F
2.23 (is a semantic error and) 200.6 709.23 P
3.49 (refers to the ANSI C standard with) 113.4 697.23 P
3 F
3.49 (sec-) 292.27 697.23 P
(tion_no) 113.4 685.23 T
1 F
( being the relevant section.) 146.18 685.23 T
(2.) 99 663.23 T
0 F
1.11 (Syntax:) 113.4 663.23 P
1 F
1.11 ( is a syntax error) 149.5 663.23 P
1.11 (, violating the syn-) 227.27 663.23 P
(tax as described in the ANSI C standard.) 113.4 651.23 T
(3.) 99 629.23 T
0 F
1.45 (Implementation:) 113.4 629.23 P
1 F
1.45 ( is a semantic error which) 190.59 629.23 P
(refers to Section 4 of this document.) 113.4 617.23 T
(4.) 99 595.23 T
0 F
0.65 (Portability:) 113.4 595.23 P
1 F
0.65 (is a semantic error which refers) 169.03 595.23 P
(to Section 3 of this document.) 113.4 583.23 T
(5.) 99 561.23 T
0 F
2.93 (T) 113.4 561.23 P
2.93 (okenisation:) 118.77 561.23 P
1 F
2.93 ( is an semantic error which) 177.63 561.23 P
(refers to Section 2 of this document.) 113.4 549.23 T
99 513.9 311.15 523.9 C
99 522.9 567 522.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 489.9 311.15 499.9 C
99 498.9 567 498.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(1.5) 99 504.57 T
(T) 135 504.57 T
(yping convention) 142.51 504.57 T
1 10 Q
1.52 (The only adoption of a typing convention is in) 99 473.23 P
1.02 (the description of syntax. The convention is as) 99 461.23 P
(follow:) 99 449.23 T
(1.) 99 427.23 T
(Italics refer to syntactic classes) 113.4 427.23 T
(2.) 99 405.23 T
7.56 (Bold italics refer to syntactic classes) 113.4 405.23 P
(described in the ANSI C standard \050Ref [1]\051.) 113.4 393.23 T
(3.) 99 371.23 T
2.32 (Straight bold letters and symbols are key-) 113.4 371.23 P
(words or basic symbols.) 113.4 359.23 T
99 323.9 311.15 333.9 C
99 332.9 567 332.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 299.9 311.15 309.9 C
99 308.9 567 308.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(1.6) 99 314.57 T
(Prior Knowledge) 135 314.57 T
1 10 Q
0.76 (The compiler is based upon the ANSI C stand-) 99 283.23 P
0.55 (ard \050Ref [1]\051 and many of the implemented fea-) 99 271.23 P
6.75 (tures are based on concepts which are) 99 259.23 P
-0.1 (introduced in the standard. Unless readers have) 99 247.23 P
0.61 (a sound knowledge of ANSI C or access to the) 99 235.23 P
1.26 (standard, they may \336nd parts of the document) 99 223.23 P
(dif) 99 211.23 T
(\336cult to comprehend.) 109.37 211.23 T
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(10) 519.89 755.24 T
99 699.4 540 711.4 C
99 710.4 567 710.4 2 L
1 H
2 Z
0 X
0 K
N
99 707.4 567 707.4 2 L
N
0 0 595.3 841.9 C
99 663.4 540 675.4 C
99 674.4 567 674.4 2 L
1 H
2 Z
0 X
0 K
N
99 671.4 567 671.4 2 L
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(2) 99 683.4 T
(Program Construct T) 126 683.4 T
(okens) 364.12 683.4 T
99 458.4 311.15 468.4 C
99 467.4 567 467.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 434.4 311.15 444.4 C
99 443.4 567 443.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.1) 99 449.07 T
(Interfaces and T) 135 449.07 T
(okens) 241.27 449.07 T
1 10 Q
2.15 (The major dif) 99 417.73 P
2.15 (ference between the program in) 161.44 417.73 P
1.2 (Figure) 99 405.73 P
1.2 (2.1 and conventional C programs is the) 130.1 405.73 P
1.18 (presence of the) 99 393.73 P
3 F
1.18 (pragma) 174.22 393.73 P
1 F
1.18 (s occurring on the \336rst) 208.1 393.73 P
1.34 (two lines. They) 99 381.73 P
1.34 (, by means of the) 167.58 381.73 P
3 F
1.34 (token syntax) 253.7 381.73 P
1 F
2.13 (\050see Section 2.3\051 introduce) 99 369.73 P
3 F
2.13 (tokens) 229.75 369.73 P
1 F
2.13 ( into the C) 259.19 369.73 P
(program.) 99 357.73 T
2.77 (In the same manner as a function prototype) 99 335.73 P
2.45 (introduces a reference to a function which is) 99 323.73 P
1.75 (de\336ned in a separate compilation module, the) 99 311.73 P
-0.25 (token syntax introduces a reference to a compo-) 99 299.73 P
2.03 (nent of the program that can be de\336ned in a) 99 287.73 P
0.27 (separate compilation module. These references) 99 275.73 P
4.53 (to program components are referred to as) 99 263.73 P
3 F
1.66 (tokens) 99 251.73 P
1 F
1.66 (, because they are a token for the pro-) 128.44 251.73 P
0.39 (gram which they reference. The token syntax is) 99 239.73 P
(said to specify a) 99 227.73 T
3 F
(token interface) 173.44 227.73 T
1 F
(.) 238.99 227.73 T
1.26 (The \336rst line, of Figure) 99 205.73 P
1.26 (2.1, introduces a token) 206.25 205.73 P
1.1 (for a type. This token being identi\336ed by) 99 193.73 P
3 F
1.1 (FILE) 287.26 193.73 P
1 F
1.1 (.) 308.37 193.73 P
0.07 (By using its identi\336er) 99 181.73 P
3 F
0.07 (FILE) 193.71 181.73 P
1 F
0.07 (, the token introduced) 214.82 181.73 P
0.38 (on the \336rst line can be used in the remainder of) 99 169.73 P
0.15 (the program wherever a type would normally be) 99 157.73 P
0.06 (used. This makes it possible to compile, to TDF) 99 145.73 P
0.06 (,) 308.37 145.73 P
2.7 (a program which makes use of a type even) 99 133.73 P
1.1 (though its de\336nition is unknown. This is funda-) 99 121.73 P
1.19 (mental to the construction of portable software) 99 109.73 P
0.64 (where the application developer does not know) 99 97.73 P
2.63 (the de\336nitions of many of the types that are) 328.5 461.73 P
1.78 (used because they are potentially dif) 328.5 449.73 P
1.78 (ferent on) 499.42 449.73 P
(each machine/system.) 328.5 437.73 T
0.87 (The second line is more complex. It introduces) 328.5 415.73 P
1.89 (a token for an expression identi\336ed by) 328.5 403.73 P
3 F
1.89 (stderr) 512.87 403.73 P
1 F
1.89 (.) 537.87 403.73 P
2.08 (However) 328.5 391.73 P
2.08 (, to make use of an expression, it is) 367.38 391.73 P
0.41 (necessary to know what its type is and whether) 328.5 379.73 P
0 (or not it is an) 328.5 367.73 P
3 F
0 (lvalue) 388.47 367.73 P
1 F
0 (, i.e. whether or not it can be) 414.58 367.73 P
0 (assigned to. But, as this example illustrates, it is) 328.5 355.73 P
0.55 (not necessary to know precisely the type of the) 328.5 343.73 P
0.78 (expression because it also can include a token) 328.5 331.73 P
(for a type.) 328.5 319.73 T
0.82 (The compiler makes no assumptions about the) 328.5 297.73 P
1.03 (de\336nitions that may be used to de\336ne a token,) 328.5 285.73 P
-0.21 (and exits with a constraint error whenever a pro-) 328.5 273.73 P
1.99 (gram requires information about an unde\336ned) 328.5 261.73 P
1.94 (token. This detects many external errors \050see) 328.5 249.73 P
-0.23 (Section 1.1.1\051 where applications have inadvert-) 328.5 237.73 P
0.3 (ently made use of a de\336nition that is present on) 328.5 225.73 P
2.45 (the system on which the application is being) 328.5 213.73 P
3.32 (developed. For example often the writers of) 328.5 201.73 P
0 (applications assume that the type) 328.5 189.73 P
3 F
0 (FILE) 479.57 189.73 P
1 F
0 ( is imple-) 500.68 189.73 P
-0.08 (mented by a structure type, but the ANSI Stand-) 328.5 177.73 P
0.27 (ard API permits) 328.5 165.73 P
3 F
0.27 (FILE) 400.97 165.73 P
1 F
0.27 ( to be implemented by any) 422.07 165.73 P
0.23 (type. The program in Figure) 328.5 153.73 P
0.23 (2.1 would not com-) 455.52 153.73 P
0 (pile if there was an attempt to access a member) 328.5 141.73 P
(of) 328.5 129.73 T
3 F
(stderr) 339.61 129.73 T
1 F
(.) 364.61 129.73 T
99 495.4 544.5 630.4 R
7 X
V
5 F
0 X
(#pragma token TYPE FILE#) 106.2 611.73 T
(#pragma token EXP rvalue:FILE*:stderr#) 106.2 599.73 T
(int fprintf\050FILE *, const char *, ...\051;) 106.2 575.73 T
(void f\050void\051{) 106.2 551.73 T
(fprintf\050stderr,\323hello world\134n\323\051;) 117 539.73 T
(}) 117 527.73 T
0 F
(Figure 2.1) 305.34 503.73 T
99 495.4 544.5 630.4 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(1) 520.63 755.24 T
(1) 525.44 755.24 T
99 629.4 311.15 639.4 C
99 638.4 567 638.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 605.4 311.15 615.4 C
99 614.4 567 614.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.2) 99 620.07 T
(Construction phases) 135 620.07 T
1 10 Q
1.33 (T) 99 588.73 P
1.33 (raditionally) 104.74 588.73 P
1.33 (, program construction using the C) 151.76 588.73 P
0.36 (language has two phases, compilation and link-) 99 576.73 P
(ing.) 99 564.73 T
0.66 (Compilation involves mapping source text, writ-) 99 542.73 P
0.18 (ten in the C language, to an object code format.) 99 530.73 P
2.53 (In general this is not an executable program) 99 518.73 P
0.63 (because it is incomplete. For example, the pro-) 99 506.73 P
0.41 (gram may use the function) 99 494.73 P
3 F
0.41 (fprintf) 221.58 494.73 P
1 F
0.41 ( but not de\336ne) 246.58 494.73 P
0.2 (it. In order to produce an executable program, it) 99 482.73 P
0.69 (is necessary to) 99 470.73 P
3 F
0.69 (link) 170.5 470.73 P
1 F
0.69 ( the object code format with) 185.49 470.73 P
4.88 (other program segments, expressed in the) 99 458.73 P
0.23 (same format, which provide the de\336nitions of all) 99 446.73 P
0.36 (the unde\336ned objects. This process allows sep-) 99 434.73 P
(aration in the compilation of a program.) 99 422.73 T
1.1 (Program construction using tokens requires an) 99 400.73 P
1.28 (extra phase where the unde\336ned tokens using) 99 388.73 P
0.27 (in one program segment are linked to their de\336-) 99 376.73 P
2.77 (nition in another) 99 364.73 P
2.77 (. TDF is fundamental to this) 175.1 364.73 P
0.31 (process because it possesses the ability to rep-) 99 352.73 P
3.01 (resent the tokens introduced into the C lan-) 99 340.73 P
(guage.) 99 328.73 T
0 (In consequence, program construction, via TDF) 99 306.73 P
0 (,) 308.37 306.73 P
(has four basic operations:) 99 294.73 T
(1.) 99 272.73 T
-0.08 (Source \336le compilation to TDF) 113.4 272.73 P
-0.08 (. The TDF pro-) 245.84 272.73 P
0 (duced may be incomplete in the sense that it) 113.4 260.73 P
(may use tokens that are not de\336ned.) 113.4 248.73 T
(2.) 99 226.73 T
1.11 (TDF linking. This is analogous to object \336le) 113.4 226.73 P
0.99 (linking, but is the linking of TDF and is per-) 113.4 214.73 P
-0.08 (formed to provide the de\336nitions of the unde-) 113.4 202.73 P
(\336ned tokens.) 113.4 190.73 T
(3.) 99 168.73 T
-0.08 (TDF translation. This is the conversion of the) 113.4 168.73 P
-0.21 (TDF into standard object \336le format for a par-) 113.4 156.73 P
(ticular machine/system) 113.4 144.73 T
(4.) 99 122.73 T
1.12 (Object \336le linking. This corresponds directly) 113.4 122.73 P
(to standard object \336le linking.) 113.4 110.73 T
0.43 (The program) 327.85 632.73 P
3 F
0.43 (tcc) 388.7 632.73 P
1 F
0.43 ( \050Ref [4]\051 is a harness for coor-) 401.47 632.73 P
-0.15 (dinating these phases in a similar fashion to that) 327.85 620.73 P
1.1 (of) 327.85 608.73 P
3 F
1.1 (cc) 340.07 608.73 P
1 F
1.1 (. Its documentation provides details on all) 350.06 608.73 P
-0.1 (the operations in the complete compilation proc-) 327.85 596.73 P
(ess.) 327.85 584.73 T
0.72 (In order for the TDF linker to operate, it is nec-) 327.85 562.73 P
2.58 (essary to associate identi\336ers with the unde-) 327.85 550.73 P
7.1 (\336ned tokens and their de\336nitions. These) 327.85 538.73 P
1.03 (identi\336ers perform a similar function to the glo-) 327.85 526.73 P
-0.07 (bal names of an object \336le format, that is, during) 327.85 514.73 P
0.11 (linking, tokens represented in dif) 327.85 502.73 P
0.11 (ferent pieces of) 471.44 502.73 P
0.83 (TDF with the same identi\336er are treated as the) 327.85 490.73 P
(same token.) 327.85 478.73 T
327.85 443.4 540 453.4 C
327.85 452.4 795.85 452.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
327.85 419.4 540 429.4 C
327.85 428.4 795.85 428.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.3) 327.85 434.07 T
(The token syntax) 363.85 434.07 T
1 10 Q
1.16 (The token syntax is an addition to the ANSI C) 327.85 402.73 P
1.34 (Standard language to allow tokens to be used) 327.85 390.73 P
1.29 (for program constructs. This section, \050i.e. Sec-) 327.85 378.73 P
1.23 (tion 2\051, gives details of all the various kinds of) 327.85 366.73 P
1.66 (program construct that can be represented as) 327.85 354.73 P
1.82 (tokens by the compiler) 327.85 342.73 P
1.82 (, and describes how to) 432.74 342.73 P
(introduce, use and de\336ne these tokens.) 327.85 330.73 T
1.74 (The basic token syntax is given in Figure) 327.85 308.73 P
1.74 (2.2.) 523.33 308.73 P
1.59 (The syntax is introduced as a pragma so that) 327.85 296.73 P
0.76 (other compilers can ignore it. In many cases, if) 327.85 284.73 P
1.5 (the pragmas are ignored, the program will not) 327.85 272.73 P
1.58 (compile, because they exist in place of de\336ni-) 327.85 260.73 P
2.38 (tions required by the compiler) 327.85 248.73 P
2.38 (. However) 467.89 248.73 P
2.38 (, it is) 514.7 248.73 P
0.62 (possible to have both tokens and de\336nitions. In) 327.85 236.73 P
0.41 (this case the tokens serve to check the correct-) 327.85 224.73 P
2.35 (ness of the use and de\336nition of the de\336ned) 327.85 212.73 P
3.32 (objects, and the pragma can then be legiti-) 327.85 200.73 P
0.73 (mately removed. There is, though, the possibil-) 327.85 188.73 P
-0.22 (ity that the program will have dif) 327.85 176.73 P
-0.22 (ferent semantics) 466.9 176.73 P
-0.09 (depending on whether or not the token introduc-) 327.85 164.73 P
0.07 (tion is present \050see Figure) 327.85 152.73 P
0.07 (2.51\051. This change in) 446.45 152.73 P
1.17 (semantics is to force a program to respect the) 327.85 140.73 P
1.29 (given token interface where it would otherwise) 327.85 128.73 P
(fail to do so.) 327.85 116.73 T
99 661.9 544.5 715.9 R
7 X
V
6 F
0 X
(# pragma token) 106.2 697.23 T
7 F
(token-introduction) 196.15 697.23 T
(token-identif) 310.09 697.23 T
(ication) 388.05 697.23 T
0 F
(Figure 2.2) 305.34 673.23 T
99 661.9 544.5 715.9 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(12) 519.89 755.24 T
3.54 (The) 99 578.73 P
3 F
3.54 (token-introduction) 122.54 578.73 P
1 F
3.54 ( introduces a token; it) 201.98 578.73 P
2.28 (de\336nes the kind of token, i.e. whether it is a) 99 566.73 P
1.59 (token for a type, an expression, etc., and any) 99 554.73 P
1.1 (additional information associated with that kind) 99 542.73 P
2.29 (of token \050for example an expression token is) 99 530.73 P
0.06 (characterised by its type and whether or not it is) 99 518.73 P
(an lvalue\051.) 99 506.73 T
3.21 (The) 99 484.73 P
3 F
3.21 (token-identi\336cation) 122.21 484.73 P
1 F
3.21 ( provides a means of) 205.53 484.73 P
(identi\336cation of the introduced token.) 99 472.73 T
99 437.4 311.15 447.4 C
99 446.4 567 446.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 413.4 311.15 423.4 C
99 422.4 567 422.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.4) 99 428.07 T
(T) 135 428.07 T
(oken Identi\336cation) 142.51 428.07 T
1 10 Q
3.74 (The) 99 396.73 P
3 F
3.74 (token-identi\336cation) 122.74 396.73 P
1 F
3.74 ( \050see Figure) 206.06 396.73 P
3.74 (2.3\051 pro-) 269.64 396.73 P
0.62 (vides the method of referring to the token, both) 99 384.73 P
0.1 (internally) 99 372.73 P
0.1 (, that is, within the program being com-) 138.25 372.73 P
0.36 (piled, and externally) 99 360.73 P
0.36 (, that is, for the purposes of) 187.87 360.73 P
(linking, as discussed in Section 2.2.) 99 348.73 T
0 F
(2.4.1) 99 322.73 T
(Internal token identi\336cation) 135 322.73 T
1 F
0.18 (The \336rst identi\336er of the) 99 305.73 P
3 F
0.18 (token-identi\336cation) 207.1 305.73 P
1 F
0.18 ( pro-) 290.42 305.73 P
0.07 (vides the internal identi\336cation of the token. The) 99 293.73 P
0.76 (optional) 99 281.73 P
3 F
0.76 (name-space) 137.54 281.73 P
1 F
0.76 ( that precedes the internal) 192.53 281.73 P
0.08 (identi\336cation, provides the name space in which) 99 269.73 P
(it resides.) 99 257.73 T
0 F
(2.4.1.1) 99 231.73 T
(Name spaces) 138.89 231.73 T
1 F
0.15 (The ANSI standard, Ref [1], identi\336es \336ve name) 99 214.73 P
(spaces. These are:) 99 202.73 T
(1.) 99 180.73 T
0.48 (The) 113.4 180.73 P
3 F
0.48 (label) 133.87 180.73 P
1 F
0.48 ( space, in which all label identi\336ers) 154.98 180.73 P
(reside.) 113.4 168.73 T
(2.) 99 146.73 T
0.23 (The) 113.4 146.73 P
3 F
0.23 (tag) 133.63 146.73 P
1 F
0.23 ( space, in which structure, union and) 147.53 146.73 P
(enumeration tags reside.) 113.4 134.73 T
(3.) 99 112.73 T
1.48 (The) 113.4 112.73 P
3 F
1.48 (member) 134.88 112.73 P
1 F
1.48 ( space, in which structure and) 171.53 112.73 P
(union member selectors reside.) 113.4 100.73 T
(4.) 329.15 578.73 T
0.32 (The) 343.55 578.73 P
3 F
0.32 (ordinary) 363.86 578.73 P
1 F
0.32 ( space, in which all other identi-) 399.96 578.73 P
(\336ers reside.) 343.55 566.73 T
(5.) 329.15 544.73 T
1.11 (The) 343.55 544.73 P
3 F
1.11 (macro) 364.66 544.73 P
1 F
1.11 ( name space, in which all macro) 392.42 544.73 P
(de\336nitions reside.) 343.55 532.73 T
1.66 (It is possible for a token identi\336er to reside in) 329.15 510.73 P
0.78 (any of these name spaces. However) 329.15 498.73 P
0.78 (, there are) 494.17 498.73 P
2.58 (speci\336c restrictions depending on the kind of) 329.15 486.73 P
2.77 (object that a token represents. For example,) 329.15 474.73 P
-0.17 (types cannot reside in the) 329.15 462.73 P
3 F
-0.17 (member) 444.98 462.73 P
1 F
-0.17 ( name space.) 481.63 462.73 P
0.3 (If a token identi\336er is placed in the) 329.15 440.73 P
3 F
0.3 (macro) 485.45 440.73 P
1 F
0.3 ( name) 513.22 440.73 P
-0.25 (space, then, unlike other macro names, not hav-) 329.15 428.73 P
0.75 (ing a de\336nition, it is not expanded. However) 329.15 416.73 P
0.75 (, in) 527.21 416.73 P
0.13 (all other respects it behaves like a macro identi-) 329.15 404.73 P
(\336er) 329.15 392.73 T
(, i.e.:) 342.48 392.73 T
(1.) 329.15 370.73 T
0.87 (The result of) 343.55 370.73 P
3 F
0.87 (de\336ned) 404.49 370.73 P
1 F
0.87 ( within a) 437.27 370.73 P
3 F
0.87 (#if) 479.32 370.73 P
1 F
0.87 (conditional) 493.52 370.73 P
0.46 (expression is) 343.55 358.73 P
3 F
0.46 (1) 405.57 358.73 P
1 F
0.46 (, with the corresponding con-) 411.13 358.73 P
(sequences for) 343.55 346.73 T
3 F
(#ifdef) 409.1 346.73 T
1 F
( and) 433.55 346.73 T
3 F
(#ifndef) 455.78 346.73 T
1 F
(.) 485.78 346.73 T
(2.) 329.15 324.73 T
1.66 (It is possible to terminate the scope of the) 343.55 324.73 P
(identi\336er with) 343.55 312.73 T
3 F
(#undef) 404.64 312.73 T
1 F
(.) 435.21 312.73 T
(3.) 329.15 290.73 T
2.22 (It hides all other declarations of the same) 343.55 290.73 P
(identi\336er in all other name spaces.) 343.55 278.73 T
0 (At present, it is only possible to explicitly require) 329.15 256.73 P
2.91 (that an identi\336er be placed in the) 329.15 244.73 P
3 F
2.91 (tag) 496.72 244.73 P
1 F
2.91 ( name) 510.61 244.73 P
1.98 (space. All other name spaces are entered by) 329.15 232.73 P
3.97 (using the default name space, see Section) 329.15 220.73 P
0.79 (2.4.1.2. It is anticipated that, in future, it will be) 329.15 208.73 P
3.25 (possible to specify all of the possible name) 329.15 196.73 P
(spaces.) 329.15 184.73 T
0 F
(2.4.1.2) 329.15 158.73 T
(Default name space) 369.04 158.73 T
1 F
0.3 (If there is no name space provided with a token) 329.15 141.73 P
0.39 (identi\336cation, then a default name space will be) 329.15 129.73 P
0.94 (assumed. This name space will depend on the) 329.15 117.73 P
1.02 (kind of token being introduced. For example, if) 329.15 105.73 P
0.31 (the token being introduced is for an expression,) 329.15 93.73 P
99 612.4 544.5 715.9 R
7 X
V
7 F
0 X
(token-identif) 106.2 697.23 T
(ication:) 184.16 697.23 T
(name-space) 117 685.23 T
7 8 Q
(opt) 176.97 682.73 T
8 10 Q
(identif) 197.36 685.23 T
(ier) 239.33 685.23 T
6 F
(#) 263.32 685.23 T
7 F
(ext-identif) 275.31 685.23 T
(ier) 341.28 685.23 T
7 8 Q
(opt) 359.27 682.73 T
5 10 Q
(name-space:) 106.2 661.23 T
6 F
(TAG) 117 649.23 T
0 F
(Figure 2.3) 305.34 625.23 T
99 612.4 544.5 715.9 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "12" 13
%%Page: "13" 13
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(13) 519.89 755.24 T
0.13 (then the default name space is the) 99 565.23 P
3 F
0.13 (macro) 255.48 565.23 P
1 F
0.13 ( name) 283.24 565.23 P
-0.06 (space; that is, it is as if the expression had been) 99 553.23 P
0.82 (introduced with) 99 541.23 P
3 F
0.82 (#de\336ne) 170.63 541.23 P
1 F
0.82 (. If the introduced token) 203.41 541.23 P
2.28 (was for a type, then the default name space) 99 529.23 P
2.35 (would be the) 99 517.23 P
3 F
2.35 (ordinary) 165.51 517.23 P
1 F
2.35 ( name space, as if the) 201.61 517.23 P
(type had been introduced with) 99 505.23 T
3 F
(typedef) 235.12 505.23 T
1 F
(.) 267.9 505.23 T
2.36 (With every kind of token which can be intro-) 99 483.23 P
-0.15 (duced, there is associated with it a default name) 99 471.23 P
0.9 (space. This name space is detailed in the sec-) 99 459.23 P
(tion describing the particular kind of token.) 99 447.23 T
0 F
(2.4.2) 99 421.23 T
(External token identi\336cation) 135 421.23 T
1 F
2.77 (The) 99 404.23 P
3 F
2.77 (ext-identi\336er) 121.77 404.23 P
1 F
2.77 ( in the) 176.2 404.23 P
3 F
2.77 (token-identi\336cation) 214.5 404.23 P
1 F
2.77 (, if) 297.83 404.23 P
2.21 (present, provides the external identi\336cation of) 99 392.23 P
1.17 (the token which is used for TDF linking. It can) 99 380.23 P
1.1 (be any sequence of characters except for new) 99 368.23 P
-0.25 (line. There is only one name space for the exter-) 99 356.23 P
1.13 (nal identi\336cation of tokens, and this is dif) 99 344.23 P
1.13 (ferent) 285.59 344.23 P
0.94 (from the external name space of functions and) 99 332.23 P
0.41 (objects. This means that, for example, it is pos-) 99 320.23 P
0.3 (sible to have a function and a token both identi-) 99 308.23 P
8.69 (\336ed externally by) 99 296.23 P
3 F
8.69 (putc) 202.85 296.23 P
1 F
8.69 (. If no external) 221.74 296.23 P
0 (identi\336cation is provided, then it is assumed that) 99 284.23 P
2.12 (the internal and external identi\336cation are the) 99 272.23 P
(same.) 99 260.23 T
99 224.9 311.15 234.9 C
99 233.9 567 233.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 200.9 311.15 210.9 C
99 209.9 567 209.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.5) 99 215.57 T
(Kinds of token) 135 215.57 T
1 10 Q
0.22 (There are, currently) 99 184.23 P
0.22 (, \336ve kinds of token. That is,) 185.91 184.23 P
2.24 (there are \336ve dif) 99 172.23 P
2.24 (ferent kinds of program con-) 177.2 172.23 P
0.07 (struct that can be represented by tokens. These) 99 160.23 P
-0.23 (kinds are Expression, Statement, T) 99 148.23 P
-0.23 (ype, Selector) 253.05 148.23 P
2.88 (and Procedure. These tokens are introduced) 99 136.23 P
11.65 (using the) 99 124.23 P
3 F
11.65 (token-introduction) 165.64 124.23 P
1 F
11.65 ( syntax of) 245.07 124.23 P
2.63 (Figure) 99 112.23 P
2.63 (2.2. They approximately correspond to) 130.1 112.23 P
3 F
5.42 (expression) 99 100.23 P
1 F
5.42 (,) 147.32 100.23 P
3 F
5.42 (statement) 158.3 100.23 P
1 F
5.42 (,) 202.18 100.23 P
3 F
5.42 (type-name) 213.16 100.23 P
1 F
5.42 (,) 260.37 100.23 P
3 F
5.42 (member) 271.35 100.23 P
5.42 (-) 307.82 100.23 P
0 (designator) 329.15 565.23 P
1 F
0 ( and) 375.81 565.23 P
3 F
0 (function-like macro) 398.02 565.23 P
1 F
0 ( as described) 481.88 565.23 P
0.7 (in the ANSI standard, Ref [1]. The introduction,) 329.15 553.23 P
2.84 (use and de\336nition of each of these kinds of) 329.15 541.23 P
0 (token will be described in the following sections.) 329.15 529.23 P
1.33 (It is known that this set of kinds of token, and) 329.15 507.23 P
0.71 (the ways of introducing them are not complete,) 329.15 495.23 P
2.28 (and it is intended to perform a review of the) 329.15 483.23 P
1.2 (existing syntax. However) 329.15 471.23 P
1.2 (, the set of constructs) 441.52 471.23 P
1.26 (permitted by the compiler at the moment have) 329.15 459.23 P
1.5 (allowed the expression of most of the existing) 329.15 447.23 P
(APIs, see Ref [3].) 329.15 435.23 T
329.15 399.9 541.3 409.9 C
329.15 408.9 797.15 408.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 375.9 541.3 385.9 C
329.15 384.9 797.15 384.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.6) 329.15 390.57 T
(The Expression token) 365.15 390.57 T
1 10 Q
3.55 (The following properties are associated with) 329.15 359.23 P
(expression tokens:) 329.15 347.23 T
(1.) 329.15 325.23 T
2.22 (Designation:) 343.55 325.23 P
3 F
2.22 (Designation) 404.1 325.23 P
1 F
2.22 ( is a classi\336cation) 456.87 325.23 P
4.53 (of the value delivered by evaluating an) 343.55 313.23 P
(expression, see Section 2.6.1.) 343.55 301.23 T
(2.) 329.15 279.23 T
3.12 (T) 343.55 279.23 P
3.12 (ype:) 349.11 279.23 P
3 F
3.12 (T) 373.89 279.23 P
3.12 (ype) 379.26 279.23 P
1 F
3.12 ( is the type of the expression) 395.37 279.23 P
(ignoring any type quali\336cation.) 343.55 267.23 T
(3.) 329.15 245.23 T
4.11 (Constancy:) 343.55 245.23 P
3 F
4.11 (Constancy) 400.43 245.23 P
1 F
4.11 ( is the property of) 447.64 245.23 P
0.55 (being a constant expression as described in) 343.55 233.23 P
(ANSI 3.4.) 343.55 221.23 T
2.68 (The validity of programs that use expression) 329.15 199.23 P
-0.11 (tokens can depend on the properties associated) 329.15 187.23 P
1.18 (with the expression. For example, the unary) 329.15 175.23 P
0 F
1.18 (&) 534.08 175.23 P
1 F
0.63 (operator is invalid on a value designation, such) 329.15 163.23 P
(as) 329.15 151.23 T
0 F
(\0503+4\051) 342.48 151.23 T
1 F
(.) 366.09 151.23 T
99 603.4 540 715.9 R
7 X
V
7 F
0 X
(token-introduction) 106.2 697.23 T
5 F
(:) 214.14 697.23 T
7 F
(exp-token) 117 685.23 T
(statement-token) 117 673.23 T
(type-token) 117 661.23 T
(selector-token) 117 649.23 T
(procedure-token) 117 637.23 T
0 F
(Figure 2.4) 303.09 613.23 T
99 603.4 540 715.9 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "13" 14
%%Page: "14" 14
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(14) 519.89 755.24 T
0 F
(2.6.1) 99 439.23 T
(Expression Designations) 135 439.23 T
1 F
0.45 (The designation of an expression describes the) 99 422.23 P
0.69 (nature of the result of evaluation of the expres-) 99 410.23 P
(sion represented by the token.) 99 398.23 T
1.29 (There are three designations, implied by ANSI) 99 376.23 P
(3.3.) 99 364.23 T
(1.) 99 342.23 T
4.21 (V) 113.4 342.23 P
4.21 (alue Designation, where the expression) 119.33 342.23 P
(describes the computation of a value) 113.4 330.23 T
(2.) 99 308.23 T
3.19 (Object Designation, where the expression) 113.4 308.23 P
3.44 (designates an object. Associated with an) 113.4 296.23 P
2.89 (object designator is a) 113.4 284.23 P
3 F
2.89 (type-quali\336er) 222.17 284.23 P
1 F
2.89 ( giving) 279.38 284.23 P
(the access conditions of the object.) 113.4 272.23 T
(3.) 99 250.23 T
0.83 (Function Designation, where the expression) 113.4 250.23 P
(designates a function.) 113.4 238.23 T
0 F
(2.6.2) 99 212.23 T
(General Expression Introduction) 135 212.23 T
1 F
0.94 (The general method for introducing a token for) 99 195.23 P
(an expression is \050see Figure) 99 183.23 T
(2.5\051:) 227.31 183.23 T
6 F
(EXP) 112.2 161.23 T
7 F
( e_s) 130.19 161.23 T
6 F
( :) 154.17 161.23 T
7 F
( type) 166.17 161.23 T
6 F
( :) 196.15 161.23 T
3 F
0.83 (e_s) 99 127.23 P
1 F
0.83 ( is an) 115.11 127.23 P
3 F
0.83 (exp-storage) 144.26 127.23 P
1 F
0.83 ( which is either) 197.03 127.23 P
0 F
0.83 (rvalue) 269.21 127.23 P
1 F
0.83 ( or) 298.66 127.23 P
0 F
0.55 (lvalue) 99 115.23 P
1 F
0.55 (. If it is) 127.33 115.23 P
0 F
0.55 (rvalue) 161.18 115.23 P
1 F
0.55 (, then the introduced token) 190.62 115.23 P
6.01 (is either a value or function designation,) 99 103.23 P
0.89 (depending on whether or not) 329.15 443.73 P
3 F
0.89 (type) 463.62 443.73 P
1 F
0.89 ( is a function) 482.51 443.73 P
0 (type. If) 329.15 431.73 P
3 F
0 (e_s) 361.91 431.73 P
1 F
0 ( is) 378.02 431.73 P
0 F
0 (lvalue) 390.78 431.73 P
1 F
0 (, then the token is an object) 419.11 431.73 P
(designation without any type quali\336cation.) 329.15 419.73 T
3 F
1.1 (type) 329.15 397.73 P
1 F
1.1 ( is the type of the expression to which the) 348.04 397.73 P
(token refers.) 329.15 385.73 T
0.64 (Any expression introduced with a general intro-) 329.15 363.73 P
(duction is assumed not to be constant.) 329.15 351.73 T
2.12 (The expression introduction in Figure) 329.15 329.73 P
2.12 (2.6 is a) 504.83 329.73 P
0.23 (typical use of an expression token. It introduces) 329.15 317.73 P
1.03 (an object designator of type int, which, since it) 329.15 305.73 P
(has no type quali\336ers, is modi\336able.) 329.15 293.73 T
0 F
(2.6.3) 329.15 267.73 T
(Constant Expression Introduction) 365.15 267.73 T
1 F
0.97 (At the moment there is very limited support for) 329.15 250.73 P
4.29 (introducing tokens for constant expressions.) 329.15 238.73 P
(The token introduction) 329.15 226.73 T
6 F
(NAT) 336.35 204.73 T
1 F
2.58 (can be used for introducing constant integral) 329.15 180.73 P
-0.1 (expressions. This is a constant value designator) 329.15 168.73 P
(of type) 329.15 156.73 T
0 F
(int) 361.93 156.73 T
1 F
(.) 374.14 156.73 T
0 F
(2.6.4) 329.15 130.73 T
(Name Spaces) 365.15 130.73 T
1 F
4.43 (Internal expression token identi\336ers can be) 329.15 113.73 P
3.51 (placed in the) 329.15 101.73 P
3 F
3.51 (macro) 399.13 101.73 P
1 F
3.51 ( name space only) 426.89 101.73 P
3.51 (. The) 515.01 101.73 P
99 607.9 540 733.9 R
7 X
V
7 F
0 X
(exp-token) 106.2 715.23 T
5 F
(:) 160.17 715.23 T
6 F
(EXP) 117 703.23 T
7 F
(exp-storage) 140.99 703.23 T
6 F
(:) 212.95 703.23 T
8 F
(type-name) 224.94 703.23 T
6 F
(:) 284.91 703.23 T
(NAT) 117 691.23 T
7 F
(exp-storage) 106.2 667.23 T
5 F
(:) 172.16 667.23 T
6 F
(rvalue) 117 655.23 T
(lvalue) 117 643.23 T
0 F
(Figure 2.5) 303.09 619.23 T
99 607.9 540 733.9 R
0.5 H
2 Z
N
99 468.4 540 580.9 R
7 X
V
5 F
0 X
(#pragma token EXP lvalue:int:errno#) 106.2 562.23 T
(void f\050void\051{) 106.2 538.23 T
(errno = 5;) 117 526.23 T
(errno += 2;) 117 514.23 T
(}) 117 502.23 T
0 F
(Figure 2.6) 303.09 478.23 T
99 468.4 540 580.9 R
N
FMENDPAGE
%%EndPage: "14" 15
%%Page: "15" 15
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(15) 519.89 755.24 T
0.21 (default name space is, consequently) 99 448.23 P
0.21 (, the) 260.74 448.23 P
3 F
0.21 (macro) 283.38 448.23 P
1 F
(space.) 99 436.23 T
0 (There is no reason why expression token identi-) 99 414.23 P
2.93 (\336ers cannot be placed in the) 99 402.23 P
3 F
2.93 (ordinary) 244.35 402.23 P
1 F
2.93 ( name) 280.45 402.23 P
1.9 (space. However) 99 390.23 P
1.9 (, this has not yet been imple-) 172 390.23 P
(mented.) 99 378.23 T
0 F
(2.6.5) 99 352.23 T
(Using expression tokens) 135 352.23 T
1 F
0.71 (In order to make use of tokenised expressions,) 99 335.23 P
0.18 (a new symbol,) 99 323.23 P
3 F
0.18 (exp-token-name) 166.18 323.23 P
1 F
0.18 (, has been intro-) 238.4 323.23 P
2.28 (duced into the syntax analysis at phase 7 of) 99 311.23 P
5.54 (translation, Ref [1]. The pre-processor) 99 299.23 P
5.54 (, on) 288.93 299.23 P
4.1 (encountering an identi\336er for an expression) 99 287.23 P
7.49 (token passes an) 99 275.23 P
3 F
7.49 (exp-token-name) 197.02 275.23 P
1 F
7.49 ( symbol) 269.23 275.23 P
1.84 (through to the syntax analyser) 99 263.23 P
1.84 (. An) 239.7 263.23 P
3 F
1.84 (exp-token-) 263.93 263.23 P
-0.14 (name) 99 251.23 P
1 F
-0.14 ( is very similar to a) 124 251.23 P
4 F
-0.14 (typedef-name) 208.68 251.23 P
1 F
-0.14 (, Ref [1],) 273.65 251.23 P
1.44 (but whereas the) 99 239.23 P
0 F
1.44 (typedef-name) 177.2 239.23 P
1 F
1.44 ( provides infor-) 242.18 239.23 P
0.46 (mation about the type that has been introduced) 99 227.23 P
2.55 (with a) 99 215.23 P
0 F
2.55 (typedef) 132.98 215.23 P
1 F
2.55 (, the) 168.52 215.23 P
3 F
2.55 ( exp-token-name) 190.52 215.23 P
1 F
2.55 ( provides) 268.05 215.23 P
1.01 (information about the token for the expression.) 99 203.23 P
1.04 (The only place where this symbol can occur is) 99 191.23 P
4.53 (as part of a) 99 179.23 P
4 F
4.53 (primary-expression) 169.9 179.23 P
1 F
4.53 ( \050ANSI C) 262.66 179.23 P
7.76 (Standard, Section 3.3.1\051, Figure) 99 167.23 P
7.76 (2.7. The) 266.72 167.23 P
0.64 (expression resulting from the use of) 99 155.23 P
3 F
0.64 (exp-token-) 263.93 155.23 P
1.34 (name) 99 143.23 P
1 F
1.34 ( will have the type, designation and con-) 124 143.23 P
(stancy speci\336ed at the introduction of the token.) 99 131.23 T
6.88 (Consider the program in Figure) 99 109.23 P
6.88 (2.8. The) 267.6 109.23 P
2.4 (pragma introduces a token for an expression) 99 97.23 P
0.48 (with internal and external name) 329.15 448.23 P
3 F
0.48 (x) 473.2 448.23 P
1 F
0.48 (. This token is) 478.2 448.23 P
1.41 (then used in the de\336nition of) 329.15 436.23 P
3 F
1.41 (f) 465.4 436.23 P
1 F
1.41 ( to compute the) 468.17 436.23 P
0.1 (result of the function. The use of) 329.15 424.23 P
3 F
0.1 (x) 475.44 424.23 P
1 F
0.1 (, after its dec-) 480.44 424.23 P
2.36 (laration, is very similar to that of an ordinary) 329.15 412.23 P
1.66 (identi\336er) 329.15 400.23 P
1.66 (. However) 366.37 400.23 P
1.66 (, because it is in the) 412.46 400.23 P
3 F
1.66 (macro) 513.53 400.23 P
1 F
(name space:) 329.15 388.23 T
(1.) 329.15 366.23 T
1.78 (It is impossible to hide it by the use of an) 343.55 366.23 P
(inner scope.) 343.55 354.23 T
(2.) 329.15 332.23 T
2.41 (From the point of view of) 343.55 332.23 P
3 F
2.41 (#ifdef) 470.19 332.23 P
1 F
2.41 ( etc.,) 494.64 332.23 P
3 F
2.41 (x) 523.9 332.23 P
1 F
2.41 ( is) 528.9 332.23 P
(de\336ned.) 343.55 320.23 T
(3.) 329.15 298.23 T
(Its scope can be terminated by) 343.55 298.23 T
3 F
(#undef x) 482.43 298.23 T
1 F
(.) 520.77 298.23 T
(4.) 329.15 276.23 T
3 F
1.48 (#de\336ne x) 343.55 276.23 P
1 F
1.48 (, which would normally be treated) 385.59 276.23 P
0.39 (as a re-de\336nition of) 343.55 264.23 P
3 F
0.39 (x) 432.89 264.23 P
1 F
0.39 (, has another meaning,) 437.89 264.23 P
(see Section 2.6.6.) 343.55 252.23 T
0 F
(2.6.6) 329.15 226.23 T
(De\336ning expression tokens) 365.15 226.23 T
1 F
1.03 (The de\336nition of an expression token is similar) 329.15 209.23 P
5.27 (to that of the de\336nition of a macro, see) 329.15 197.23 P
(Figure) 329.15 185.23 T
(2.9, and the example Figure) 360.25 185.23 T
(2.10.) 487.47 185.23 T
0 F
(2.6.6.1) 329.15 159.23 T
(Constraints) 369.04 159.23 T
1 F
(1.) 329.15 142.23 T
1.85 (If the) 343.55 142.23 P
3 F
1.85 (exp-token-name) 372.25 142.23 P
1 F
1.85 ( refers to an expres-) 444.46 142.23 P
1.75 (sion that is constant, then the assignment-) 343.55 130.23 P
2.22 (expression must be a constant expression) 343.55 118.23 P
-0.08 (as speci\336ed in the ANSI C Standard, Section) 343.55 106.23 P
(3.4.) 343.55 94.23 T
99 607.9 540 724.9 R
7 X
V
7 F
0 X
(primary-expression:) 106.2 706.23 T
(identif) 117 694.23 T
(ier) 158.98 694.23 T
(constant) 117 682.23 T
(string-literal) 117 670.23 T
6 F
(\050) 117 658.23 T
7 F
(expression) 128.99 658.23 T
6 F
(\051) 194.96 658.23 T
7 F
(exp-token-name) 117 646.23 T
0 F
(Figure 2.7) 303.09 622.23 T
99 607.9 540 724.9 R
0.5 H
2 Z
N
99 495.4 540 576.4 R
7 X
V
5 F
0 X
(#pragma token EXP rvalue:int:x#) 106.2 557.73 T
(int f\050int y\051{return y*x;}) 106.2 533.73 T
0 F
(Figure 2.8) 303.09 509.73 T
99 495.4 540 576.4 R
N
FMENDPAGE
%%EndPage: "15" 16
%%Page: "16" 16
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(16) 519.89 755.24 T
(2.) 99 358.23 T
1.85 (If the) 113.4 358.23 P
3 F
1.85 (exp-token-name) 142.11 358.23 P
1 F
1.85 ( refers to an expres-) 214.32 358.23 P
0.83 (sion that has an object designation, Section) 113.4 346.23 P
4.11 (2.6.1, then the de\336ning expression must) 113.4 334.23 P
0.87 (designate an object; the type of the expres-) 113.4 322.23 P
0.9 (sion token must be resolvable to that of the) 113.4 310.23 P
1.52 (de\336ning expression \050Section 2.8.8.1\051and all) 113.4 298.23 P
0.95 (of the type quali\336ers of the de\336ning expres-) 113.4 286.23 P
-0.08 (sion must appear in the object designation of) 113.4 274.23 P
(the token expression.) 113.4 262.23 T
(3.) 99 240.23 T
1.85 (If the) 113.4 240.23 P
3 F
1.85 (exp-token-name) 142.11 240.23 P
1 F
1.85 ( refers to an expres-) 214.32 240.23 P
1.29 (sion that has function designation, then the) 113.4 228.23 P
0.24 (type of the expression token must be resolv-) 113.4 216.23 P
0.71 (able to that of the de\336ning expression \050Sec-) 113.4 204.23 P
(tion 2.8.8.1\051.) 113.4 192.23 T
0.58 (Figure) 99 170.23 P
0.58 (2.1) 130.1 170.23 P
0.58 (1 provides two examples of the viola-) 143.26 170.23 P
0.86 (tion of the second constraint. The \336rst violation) 99 158.23 P
3.23 (occurs because the expression,) 99 146.23 P
3 F
3.23 (6) 255.24 146.23 P
1 F
3.23 (, does not) 260.79 146.23 P
3.04 (designate an object. The second violation is) 99 134.23 P
0.82 (because the type of expression,) 99 122.23 P
3 F
0.82 (k) 247.02 122.23 P
1 F
0.82 (, i.e.) 252.01 122.23 P
3 F
0.82 (short) 275.33 122.23 P
1 F
0.82 (, is) 297.55 122.23 P
1.19 (incompatible with that of the token expression,) 99 110.23 P
(i.e.) 99 98.23 T
3 F
(int) 115.11 98.23 T
1 F
(.) 125.67 98.23 T
0 F
(2.6.6.2) 329.15 358.23 T
(Semantics) 369.04 358.23 T
1 F
1.75 (If the) 329.15 341.23 P
3 F
1.75 (exp-token-name) 357.65 341.23 P
1 F
1.75 ( refers to an expression) 429.86 341.23 P
4.99 (that designates a value, then the de\336ning) 329.15 329.23 P
2.68 (expression is converted, as if by assignment) 329.15 317.23 P
2.53 (\050ANSI C Standard, Section  3.3.16.1\051, to the) 329.15 305.23 P
1.26 (type of the expression token using the) 329.15 293.23 P
3 F
1.26 (assign-) 509.08 293.23 P
1.65 (ment resolution operator) 329.15 281.23 P
1 F
1.65 (\050Section 2.8.8.1\051; but) 445.21 281.23 P
4.34 (with all the other designations the de\336ning) 329.15 269.23 P
5.99 (expression is left unaltered. The resulting) 329.15 257.23 P
5.18 (expression serves as the de\336nition of the) 329.15 245.23 P
(expression token.) 329.15 233.23 T
5.66 (Consider the example in Figure) 329.15 211.23 P
5.66 (2.12. The) 493.41 211.23 P
0 (de\336nition of) 329.15 199.23 P
3 F
0 ( li) 380.25 199.23 P
1 F
0 (causes the de\336ning expression,) 390.23 199.23 P
3 F
0 (6) 532.96 199.23 P
1 F
0 (,) 538.52 199.23 P
1.99 (to be converted from a value of type) 329.15 187.23 P
3 F
1.99 (int) 507.31 187.23 P
1 F
1.99 ( to a) 517.86 187.23 P
3.26 (value of type) 329.15 175.23 P
3 F
3.26 (long) 398.36 175.23 P
1 F
3.26 (. This is essential for the) 417.25 175.23 P
1.94 (separation of the use from the de\336nition of) 329.15 163.23 P
3 F
1.94 ( li) 529.36 163.23 P
1 F
1.94 (.) 538.52 163.23 P
1.17 (However) 329.15 151.23 P
1.17 (, as a direct consequence of this, it is) 368.03 151.23 P
1.73 (apparent that the introduction of a token for) 329.15 139.23 P
3 F
1.73 (li) 536.86 139.23 P
1 F
6.74 (has subtly changed the meaning of the) 329.15 127.23 P
-0.14 (program. If the parameter) 329.15 115.23 P
3 F
-0.14 (x) 444.67 115.23 P
1 F
-0.14 ( is non-zero, with the) 449.66 115.23 P
7.32 (token introduction, the function) 329.15 103.23 P
3 F
7.32 (f) 497.32 103.23 P
1 F
7.32 ( returns) 500.1 103.23 P
99 652.9 540 724.9 R
7 X
V
7 F
0 X
(expression-def) 106.2 706.23 T
(inition:) 190.15 706.23 T
6 F
(# def) 117 694.23 T
(ine) 146.98 694.23 T
7 F
(exp-token-name) 170.97 694.23 T
8 F
(assignment-expression) 260.92 694.23 T
0 F
(Figure 2.9) 303.09 670.23 T
99 652.9 540 724.9 R
0.5 H
2 Z
N
99 526.9 540 630.4 R
7 X
V
5 F
0 X
(#pragma token EXP rvalue:int:x#) 106.2 611.73 T
(extern int z;) 106.2 587.73 T
(#def) 106.2 563.73 T
(ine x z+1) 130.19 563.73 T
0 F
(Figure 2.10) 300.31 539.73 T
99 526.9 540 630.4 R
N
99 391.9 540 504.4 R
7 X
V
5 F
0 X
(#pragma token EXP lvalue:int:i#) 106.2 485.73 T
(extern short k;) 106.2 461.73 T
(#def) 106.2 437.73 T
(ine i 6 /*Violation of Constraint 2*/) 130.19 437.73 T
(#def) 106.2 425.73 T
(ine i k /*Violation of Constraint 2*/) 130.19 425.73 T
0 F
(Figure 2.1) 300.59 401.73 T
(1) 347.25 401.73 T
99 391.9 540 504.4 R
N
FMENDPAGE
%%EndPage: "16" 17
%%Page: "17" 17
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(17) 519.89 755.24 T
3 F
7.1 (sizeof\050long\051) 99 259.23 P
1 F
7.1 (, whereas without it) 150.65 259.23 P
3 F
7.1 (f) 267.39 259.23 P
1 F
7.1 ( returns) 270.16 259.23 P
3 F
(sizeof\050int\051) 99 247.23 T
1 F
(.) 142.32 247.23 T
0 F
(2.6.6.3) 99 221.23 T
(Phases of translation) 138.89 221.23 T
1 F
2.4 (A major dif) 99 204.23 P
2.4 (ference between the de\336ning of a) 151.38 204.23 P
1.02 (macro and the de\336ning of an expression token) 99 192.23 P
0.43 (is that, whereas a macro is de\336ned by any) 99 180.23 P
4 F
0.43 ( pre-) 289.06 180.23 P
3.77 (processing tokens) 99 168.23 P
1 F
3.77 (, an expression token is) 191.08 168.23 P
3.32 (de\336ned by an) 99 156.23 P
4 F
3.32 (assignment-expression) 171.75 156.23 P
1 F
3.32 (. Pre-) 283.39 156.23 P
1.1 (processing tokens are computed in phase 3 of) 99 144.23 P
3.32 (translation and) 99 132.23 P
4 F
3.32 (assignment-expression) 173.97 132.23 P
1 F
3.32 (s are) 285.61 132.23 P
3.32 (computed in phase 7. Consequently) 99 120.23 P
3 F
3.32 (expres-) 277.83 120.23 P
6.65 (sion-de\336nition) 99 108.23 P
1 F
6.65 (s are evaluated in phase 7) 160.66 108.23 P
4.43 (whereas macro de\336nitions are evaluated in) 329.15 259.23 P
(phase 4.) 329.15 247.23 T
1.76 (One of the consequences of this dif) 329.15 225.23 P
1.76 (ference is) 496.21 225.23 P
0.71 (illustrated by the program in Figure) 329.15 213.23 P
0.71 (2.13. In the) 489.87 213.23 P
-0.2 (absence of the token expression introduction,) 329.15 201.23 P
3 F
-0.2 (X) 531.85 201.23 P
1 F
-0.2 (,) 538.52 201.23 P
0.34 (this program will compile. At the time the de\336ni-) 329.15 189.23 P
1.81 (tion of) 329.15 177.23 P
3 F
1.81 (X) 362.78 177.23 P
1 F
1.81 ( is interpreted, in) 369.45 177.23 P
3 F
1.81 (return x+X) 453.36 177.23 P
1 F
1.81 (, both) 501.56 177.23 P
3 F
1.81 (M) 532.97 177.23 P
1 F
1.78 (and) 329.15 165.23 P
3 F
1.78 (X) 350.38 165.23 P
1 F
1.78 ( are in scope. In the presence of token) 357.04 165.23 P
2.37 (introduction, the de\336nition of) 329.15 153.23 P
3 F
2.37 (X) 466.4 153.23 P
1 F
2.37 (, being part of) 473.07 153.23 P
2.85 (translation phase 7, is interpreted when it is) 329.15 141.23 P
0.55 (encountered, and at this point) 329.15 129.23 P
3 F
0.55 (M) 466.33 129.23 P
1 F
0.55 ( is not de\336ned.) 474.66 129.23 P
0.63 (This problem can readily be recti\336ed by revers-) 329.15 117.23 P
(ing the order of the de\336nitions of) 329.15 105.23 T
3 F
(X) 474.71 105.23 T
1 F
( and) 481.37 105.23 T
3 F
(M) 503.6 105.23 T
1 F
(.) 511.93 105.23 T
99 589.9 540 729.4 R
7 X
V
5 F
0 X
(#pragma EXP rvalue:long:li#) 106.2 710.73 T
(#def) 106.2 686.73 T
(ine li 6) 130.19 686.73 T
(int f\050int x\051{) 106.2 662.73 T
(if\050x\051return li;) 117 650.73 T
(return sizeof\050li\051;) 117 638.73 T
(}) 117 626.73 T
0 F
(Figure 2.12) 300.31 602.73 T
99 589.9 540 729.4 R
0.5 H
2 Z
N
99 432.4 540 562.9 R
7 X
V
5 F
0 X
(#pragma token EXP rvalue:int:X#) 106.2 544.23 T
(#def) 106.2 520.23 T
(ine X M + 3) 130.19 520.23 T
(#def) 106.2 496.23 T
(ine M sizeof\050int\051) 130.19 496.23 T
(int f\050int x\051{return x+X;}) 106.2 472.23 T
0 F
(Figure 2.13) 300.31 448.23 T
99 432.4 540 562.9 R
N
99 288.4 540 414.4 R
7 X
V
5 F
0 X
(#pragma token EXP rvalue:int X#) 106.2 395.73 T
(#def) 106.2 371.73 T
(ine M sizeof\050int\051) 130.19 371.73 T
(#def) 106.2 359.73 T
(ine X M + 3) 130.19 359.73 T
(/*line 4*/) 432 359.73 T
(#undef M) 106.2 347.73 T
(int M\050x\051{return x+X;}) 106.2 323.73 T
(/*line 7*/) 432 323.73 T
0 F
(Figure 2.14) 300.31 299.73 T
99 288.4 540 414.4 R
N
FMENDPAGE
%%EndPage: "17" 18
%%Page: "18" 18
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(18) 519.89 755.24 T
1.11 (However) 99 304.23 P
1.11 (, the reverse is true of the example in) 137.88 304.23 P
3.43 (Figure) 99 292.23 P
3.43 (2.14. This example shows how token) 130.1 292.23 P
1.45 (de\336nitions can be used to relieve some of the) 99 280.23 P
2.54 (pressures on name-spaces by unde\336ning the) 99 268.23 P
1.98 (macros that are only used in their de\336nitions.) 99 256.23 P
0.55 (The de\336nition of) 99 244.23 P
3 F
0.55 (X) 174.53 244.23 P
1 F
0.55 ( is computed on line 4, when) 181.2 244.23 P
3 F
1.71 (M) 99 232.23 P
1 F
1.71 ( is in scope, not on line 7 where it is used.) 107.32 232.23 P
0 (Care should be taken if using this facility since it) 99 220.23 P
1.1 (may not be a straightforward matter to convert) 99 208.23 P
(the program back to a conventional C program.) 99 196.23 T
0 F
(2.6.7) 99 170.23 T
(De\336ning Expressions with Externals) 135 170.23 T
1 F
0.45 (An alternative method of de\336ning token expres-) 99 153.23 P
1.84 (sions is by declaring the) 99 141.23 P
3 F
1.84 (exp-token-name) 217.65 141.23 P
1 F
1.84 ( that) 289.86 141.23 P
0.48 (references the token to be an object with exter-) 99 129.23 P
4.76 (nal linkage. A typical example is given in) 99 117.23 P
(Figure) 99 105.23 T
(2.15.) 130.1 105.23 T
0 F
(2.6.7.1) 329.15 304.23 T
(Semantics) 369.04 304.23 T
1 F
2.69 (If the object declared by the declaration has) 329.15 287.23 P
-0.01 (external linkage, then the expression that desig-) 329.15 275.23 P
0.2 (nates this object is used as the de\336ning expres-) 329.15 263.23 P
4.59 (sion for the token expression. That is the) 329.15 251.23 P
4.11 (semantics for Figure) 329.15 239.23 P
4.11 (2.15 are almost repre-) 430.67 239.23 P
3.69 (sented by Figure) 329.15 227.23 P
3.69 (2.16 except that) 413.75 227.23 P
3 F
3.69 (_errno) 498.73 227.23 P
1 F
3.69 ( is) 527.61 227.23 P
2.45 (replaced with) 329.15 215.23 P
3 F
2.45 (errno) 395.71 215.23 P
1 F
2.45 ( after the de\336nition of the) 419.03 215.23 P
(token expression has been computed.) 329.15 203.23 T
329.15 167.9 541.3 177.9 C
329.15 176.9 797.15 176.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 143.9 541.3 153.9 C
329.15 152.9 797.15 152.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.7) 329.15 158.57 T
(The Statement T) 365.15 158.57 T
(oken) 472.96 158.57 T
1 10 Q
0.71 (The syntax for introducing a statement token is) 329.15 127.23 P
2.32 (very straightforward and given in Figure) 329.15 115.23 P
2.32 (2.17,) 519.07 115.23 P
99 652.9 540 733.9 R
7 X
V
5 F
0 X
(#pragma token EXP lvalue:int:errno#) 106.2 715.23 T
(extern int errno;) 106.2 691.23 T
0 F
(Figure 2.15) 300.31 667.23 T
99 652.9 540 733.9 R
0.5 H
2 Z
N
99 526.9 540 630.4 R
7 X
V
5 F
0 X
(#pragma token EXP lvalue:int:errno#) 106.2 611.73 T
(extern int _errno;) 106.2 587.73 T
(#def) 106.2 563.73 T
(ine errno _errno;) 130.19 563.73 T
0 F
(Figure 2.16) 300.31 539.73 T
99 526.9 540 630.4 R
N
99 436.9 540 504.4 R
7 X
V
7 F
0 X
(statement-token:) 106.2 485.73 T
6 F
(STATEMENT) 117 473.73 T
0 F
(Figure 2.17) 300.31 449.73 T
99 436.9 540 504.4 R
N
99 328.9 540 418.9 R
7 X
V
5 F
0 X
(#pragma token STATEMENT init_globs#) 106.2 400.23 T
(int g\050int\051;) 106.2 376.23 T
(int f\050int x\051{init_globs return g\050x\051;}) 106.2 364.23 T
0 F
(Figure 2.18) 300.31 340.23 T
99 328.9 540 418.9 R
N
FMENDPAGE
%%EndPage: "18" 19
%%Page: "19" 19
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(19) 519.89 755.24 T
3.4 (an example of a declaration and use being) 99 470.73 P
(given in Figure) 99 458.73 T
(2.18.) 167.32 458.73 T
0 F
(2.7.1) 99 432.73 T
(Name Spaces) 135 432.73 T
1 F
5.32 (Internal statement token identi\336ers can be) 99 415.73 P
0.36 (placed in the) 99 403.73 P
3 F
0.36 (macro) 159.54 403.73 P
1 F
0.36 ( name space only) 187.3 403.73 P
0.36 (. It follows) 265.98 403.73 P
1.31 (that the default name space is also the) 99 391.73 P
3 F
1.31 (macro) 283.38 391.73 P
1 F
(space.) 99 379.73 T
0 F
(2.7.2) 99 353.73 T
(Using statement tokens) 135 353.73 T
1 F
-0.08 (The use of statement tokens is analogous to the) 99 336.73 P
(use of expression tokens see Section 2.6.5.) 99 324.73 T
0 (A new symbol,) 99 302.73 P
3 F
0 (stat-token-name) 166.74 302.73 P
1 F
0 (, has been intro-) 238.95 302.73 P
2.28 (duced into the syntax analysis at phase 7 of) 99 290.73 P
0.7 (translation. This token is passed through to the) 99 278.73 P
3.88 (syntax analyser whenever the pre-processor) 99 266.73 P
1.66 (encounters the identi\336er referring to the state-) 99 254.73 P
2.03 (ment token. The only place where) 99 242.73 P
3 F
2.03 (stat-token-) 263.93 242.73 P
-0.19 (name) 99 230.73 P
1 F
-0.19 ( can occur is as part of the) 124 230.73 P
4 F
-0.19 (statement) 242.48 230.73 P
1 F
-0.19 ( syn-) 289.68 230.73 P
-0.25 (tax \050ANSI C Standard, Section 3.6\051 as illustrated) 99 218.73 P
(in Figure) 99 206.73 T
(2.19.) 140.66 206.73 T
0 F
(2.7.3) 99 180.73 T
(De\336ning statement tokens) 135 180.73 T
1 F
0.63 (As with the de\336ning of expression tokens \050Sec-) 99 163.73 P
0.62 (tion 2.6.6\051 the de\336nition of a statement token is) 99 151.73 P
1.11 (similar to that of the de\336nition of a macro \050see) 99 139.73 P
(Figure) 99 127.73 T
(2.20\051.) 130.1 127.73 T
0 F
(2.7.3.1) 329.15 470.73 T
(Constraints) 369.04 470.73 T
1 F
1.97 (The statement that forms the de\336nition of the) 329.15 453.73 P
0.71 (statement token is subject to the following con-) 329.15 441.73 P
(straints:) 329.15 429.73 T
(1.) 329.15 407.73 T
0.18 (Unless the de\336nition of the statement occurs) 343.55 407.73 P
0.31 (at the outer level, that is not inside the) 343.55 395.73 P
4 F
0.31 (com-) 517.42 395.73 P
1.67 (pound statement) 343.55 383.73 P
1 F
1.67 ( \050ANSI C Standard, Sec-) 425.74 383.73 P
0 (tion 3.6.2\051 forming a function de\336nition, there) 343.55 371.73 P
(shall be no use of labels.) 343.55 359.73 T
(2.) 329.15 337.73 T
1.19 (The use of) 343.55 337.73 P
0 F
1.19 (return) 397.12 337.73 P
1 F
1.19 ( within the de\336ning state-) 425.99 337.73 P
(ment is disallowed.) 343.55 325.73 T
2.05 (It is anticipated that both of these restrictions) 329.15 303.73 P
(will be removed in future releases.) 329.15 291.73 T
0 F
(2.7.3.2) 329.15 265.73 T
(Semantics) 369.04 265.73 T
1 F
2.95 (The semantics of the de\336ning statement are) 329.15 248.73 P
3.51 (identical to that of the) 329.15 236.73 P
3 F
3.51 (compound statement) 444.46 236.73 P
1 F
3.96 (forming the de\336nition of a function with no) 329.15 224.73 P
(parameters and) 329.15 212.73 T
4 F
(void) 401.92 212.73 T
1 F
( result.) 422.47 212.73 T
0 F
(2.7.3.3) 329.15 186.73 T
(Phases of translation) 369.04 186.73 T
1 F
2.31 (There are precisely the same implications on) 329.15 169.73 P
1.74 (the phases of translation with the de\336nition of) 329.15 157.73 P
1.82 (statement tokens as there are for the expres-) 329.15 145.73 P
(sion tokens \050Section 2.6.6.3\051.) 329.15 133.73 T
99 589.9 540 729.4 R
7 X
V
7 F
0 X
(statement:) 106.2 710.73 T
(labelled-statement) 117 698.73 T
(compound-statement) 117 686.73 T
(expression-statement) 117 674.73 T
(selection-statement) 117 662.73 T
(iteration-statement) 117 650.73 T
(jump-statement) 117 638.73 T
(stat-token-name) 117 626.73 T
0 F
(Figure 2.19) 300.31 602.73 T
99 589.9 540 729.4 R
0.5 H
2 Z
N
99 504.4 540 571.9 R
7 X
V
5 F
0 X
(statement-def) 106.2 553.23 T
(inition:) 184.16 553.23 T
6 F
(# def) 117 541.23 T
(ine) 146.98 541.23 T
7 F
(stat-token-name) 170.97 541.23 T
8 F
(statement) 266.92 541.23 T
0 F
(Figure 2.20) 300.31 517.23 T
99 504.4 540 571.9 R
N
FMENDPAGE
%%EndPage: "19" 20
%%Page: "20" 20
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(20) 519.89 755.24 T
99 561.9 311.15 571.9 C
99 570.9 567 570.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 537.9 311.15 547.9 C
99 546.9 567 546.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.8) 99 552.57 T
(T) 135 552.57 T
(ype tokens) 142.51 552.57 T
1 10 Q
1.1 (The ANSI C Standard, Section  3.1.2.5, identi-) 99 521.23 P
(\336es the following classi\336cation of types:) 99 509.23 T
(1.) 99 487.23 T
(the type) 113.4 487.23 T
4 F
(char) 151.74 487.23 T
1 F
(2.) 99 465.23 T
(signed integer types) 113.4 465.23 T
(3.) 99 443.23 T
(unsigned integer types) 113.4 443.23 T
(4.) 99 421.23 T
(\337oating types) 113.4 421.23 T
(5.) 99 399.23 T
(character types) 113.4 399.23 T
(6.) 99 377.23 T
(enumeration types) 113.4 377.23 T
(7.) 99 355.23 T
(array types) 113.4 355.23 T
(8.) 99 333.23 T
(structure types) 113.4 333.23 T
(9.) 99 311.23 T
(union types) 113.4 311.23 T
(10.) 99 289.23 T
(function types) 113.4 289.23 T
(1) 99 267.23 T
(1.) 103.82 267.23 T
(pointer types) 113.4 267.23 T
(These form part of other type classi\336cations:) 99 245.23 T
(1.) 99 223.23 T
0.4 (integral types - consisting of the signed inte-) 113.4 223.23 P
1.94 (ger types, the unsigned integer types, and) 113.4 211.23 P
(the type) 113.4 199.23 T
4 F
(char) 151.74 199.23 T
1 F
(.) 172.3 199.23 T
(2.) 99 177.23 T
1.85 (arithmetic types - consisting of the integral) 113.4 177.23 P
(types and the \337oating types.) 113.4 165.23 T
(3.) 99 143.23 T
2.87 (scalar types - consisting of the arithmetic) 113.4 143.23 P
(and the pointer types.) 113.4 131.23 T
(4.) 99 109.23 T
0.09 (aggregate types - consisting of structure and) 113.4 109.23 P
(array types.) 113.4 97.23 T
(5.) 329.15 565.23 T
-0.15 (derived declarator types - consisting of array) 343.55 565.23 P
-0.15 (,) 538.52 565.23 P
(function and pointer types.) 343.55 553.23 T
3.26 (The classi\336cation of a type is critical in the) 329.15 531.23 P
1.77 (determination of which operations are allowed) 329.15 519.23 P
2.56 (to be performed on objects of that type. For) 329.15 507.23 P
1.31 (example, the operator) 329.15 495.23 P
4 F
1.31 (!) 433.08 495.23 P
1 F
1.31 (, in the ANSI C Stand-) 436.41 495.23 P
5.36 (ard, Section 3.3.3.3, can only operate on) 329.15 483.23 P
1.74 (objects with scalar type. For this reason, type) 329.15 471.23 P
1.93 (token introductions allow the type being intro-) 329.15 459.23 P
3.6 (duced to be classi\336ed, thereby allowing the) 329.15 447.23 P
4.88 (compiler to perform the semantic checking) 329.15 435.23 P
(required in the application of operators.) 329.15 423.23 T
0 (The syntax for a) 329.15 401.23 P
3 F
0 (type-token) 403.55 401.23 P
1 F
0 ( introduction is given) 450.22 401.23 P
(in Figure) 329.15 389.23 T
(2.21.) 370.8 389.23 T
0 F
(2.8.1) 329.15 363.23 T
(General type tokens) 365.15 363.23 T
1 F
4.1 (The most general type-token introduction is) 329.15 346.23 P
4 F
0.71 (TYPE) 329.15 334.23 P
1 F
0.71 (. This introduces a type of unknown clas-) 355.25 334.23 P
0.79 (si\336cation and can be de\336ned to be any C type.) 329.15 322.23 P
0.79 (This means that only a few generic operations,) 329.15 310.23 P
2.77 (like procedure token application, see Section) 329.15 298.23 P
0.24 (2.10, can be applied to objects of such an intro-) 329.15 286.23 P
0.49 (duced type. The main uses of such a token are) 329.15 274.23 P
1.29 (in the construction of derived declarator types,) 329.15 262.23 P
(Section 2.8.2, and abstract data types.) 329.15 250.23 T
1.03 (There are few truly generic operations in ANSI) 329.15 228.23 P
0.15 (C. Even the assignment operation is not permit-) 329.15 216.23 P
0.62 (ted if the left operand has array type. However) 329.15 204.23 P
0.62 (,) 538.52 204.23 P
1.03 (in the cases of assignment and function call, it) 329.15 192.23 P
2.05 (has been possible to provide an extension of) 329.15 180.23 P
1.5 (their semantics to allow their use with general) 329.15 168.23 P
2.12 (type tokens. In practice, these operations are) 329.15 156.23 P
3.6 (not generic only because of the anomalous) 329.15 144.23 P
(treatment of arrays.) 329.15 132.23 T
2.1 (Consider the program in Figure) 329.15 110.23 P
2.1 (2.22, ignoring) 478.64 110.23 P
3.6 (initially the commented out typedef. It intro-) 329.15 98.23 P
99 616.9 540 729.4 R
7 X
V
7 F
0 X
(type-token:) 106.2 710.73 T
6 F
(TYPE) 117 698.73 T
(VARIETY) 117 686.73 T
(ARITHMETIC) 117 674.73 T
(STRUCT) 117 662.73 T
(UNION) 117 650.73 T
0 F
(Figure 2.21) 300.31 626.73 T
99 616.9 540 729.4 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "20" 21
%%Page: "21" 21
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(21) 519.89 755.24 T
0.11 (duces a general type token,) 99 344.73 P
3 F
0.11 (t_t) 225.12 344.73 P
1 F
0.11 (, and then, in the) 236.24 344.73 P
0.94 (function) 99 332.73 P
3 F
0.94 (h) 137.71 332.73 P
1 F
0.94 (, assigns a value of type) 143.27 332.73 P
3 F
0.94 (t_t) 258.89 332.73 P
1 F
0.94 ( to) 270 332.73 P
3 F
0.94 (x) 285.77 332.73 P
1 F
0.94 ( and) 290.76 332.73 P
0.3 (then passes an object of type) 99 320.73 P
3 F
0.3 (t_t) 233.58 320.73 P
1 F
0.3 ( to the function) 244.69 320.73 P
3 F
(f) 99 308.73 T
1 F
(.) 101.78 308.73 T
0.18 (The semantics of the assignment and argument) 99 286.73 P
1.52 (passing of) 99 274.73 P
3 F
1.52 (t_t) 150.37 274.73 P
1 F
1.52 ( must be de\336ned for all possible) 161.49 274.73 P
1.43 (substituted types. The commented out typedef) 99 262.73 P
0.7 (is to encourage a comparison between the use) 99 250.73 P
1.1 (of type token) 99 238.73 P
3 F
1.1 (t_t) 162.31 238.73 P
1 F
1.1 ( and the corresponding use of) 173.42 238.73 P
(an array type.) 99 226.73 T
0 F
(2.8.1.1) 99 200.73 T
(Conversions) 138.89 200.73 T
1 F
1.57 (The only standard conversion \050ANSI C Stand-) 99 183.73 P
0.48 (ard, Section 3.2\051 that is performed on an object) 99 171.73 P
1.34 (of general token type is the) 99 159.73 P
3 F
1.34 (lvalue) 229.82 159.73 P
1 F
1.34 ( conversion.) 255.93 159.73 P
-0.1 (When performing the) 99 147.73 P
3 F
-0.1 (lvalue) 194.8 147.73 P
1 F
-0.1 ( conversion \050ANSI C) 220.91 147.73 P
1.81 (Standard, Section 3.2.2.1\051 of an object with a) 99 135.73 P
1.8 (general token type, say) 99 123.73 P
3 F
1.8 (t_t) 212.3 123.73 P
1 F
1.8 (, the) 223.41 123.73 P
3 F
1.8 (lvalue) 249.24 123.73 P
1 F
1.8 ( is con-) 275.34 123.73 P
2.53 (verted to the object stored in the designated) 99 111.73 P
(object.) 99 99.73 T
0.25 (This produces a fundamentally dif) 329.15 349.23 P
0.25 (ferent seman-) 479.39 349.23 P
-0.07 (tics between de\336ning) 329.15 337.23 P
3 F
-0.07 (t_t) 425.04 337.23 P
1 F
-0.07 ( to be an array type and) 436.16 337.23 P
0.05 (de\336ning) 329.15 325.23 P
3 F
0.05 (t_t) 366.98 325.23 P
1 F
0.05 ( to be a general token type, and later) 378.09 325.23 P
1.53 (de\336ning that token to be an array type. In the) 329.15 313.23 P
3.7 (former case) 329.15 301.23 P
3 F
3.7 (lvalue) 392.09 301.23 P
1 F
3.7 ( conversion will deliver a) 418.19 301.23 P
0.13 (pointer to the \336rst element, whereas in the latter) 329.15 289.23 P
3.66 (case,) 329.15 277.23 P
3 F
3.66 (lvalue) 359.47 277.23 P
1 F
3.66 ( conversion delivers the compo-) 385.58 277.23 P
(nents of the array) 329.15 265.23 T
(.) 406.19 265.23 T
-0.17 (The de\336nition of the) 329.15 243.23 P
3 F
-0.17 (lvalue) 419.04 243.23 P
1 F
-0.17 ( conversion of objects) 445.14 243.23 P
0.71 (with general tokenised types, leads the way for) 329.15 231.23 P
0.36 (the semantics of assignment and function argu-) 329.15 219.23 P
3.56 (ment passing. In the cases where the type) 329.15 207.23 P
0.07 (token is de\336ned to be an array) 329.15 195.23 P
0.07 (, then the) 463.3 195.23 P
3 F
0.07 (compo-) 507.97 195.23 P
0.82 (nents) 329.15 183.23 P
1 F
0.82 ( of the array are assigned and passed as) 353.6 183.23 P
-0.22 (arguments to the function call; in all other cases,) 329.15 171.23 P
1.8 (the assignment and function call are as if the) 329.15 159.23 P
(de\336ning type had been used directly) 329.15 147.23 T
(.) 488.41 147.23 T
99 549.4 540 724.9 R
7 X
V
5 F
0 X
(#pragma token TYPE t_t#) 106.2 706.23 T
(/*typedef int t_t[4];*/) 106.2 682.23 T
(int f\050t_t\051) 106.2 658.23 T
(t_t g\050void\051;) 106.2 646.23 T
(int h\050void\051{) 106.2 622.23 T
(t_t x = g\050\051;) 117 610.23 T
(return f\050x\051;) 117 598.23 T
(}) 117 586.23 T
0 F
(Figure 2.22) 300.31 562.23 T
99 549.4 540 724.9 R
0.5 H
2 Z
N
99 378.4 540 526.9 R
7 X
V
5 F
0 X
(#pragma token TYPE t_t#) 106.2 508.23 T
(#pragma token TYPE t_p#) 106.2 496.23 T
(#pragma token NAT n#) 106.2 484.23 T
(typedef t_t *ptr_type; /*introduces a pointer type*/) 106.2 460.23 T
(typedef t_t fn_type\050t_p\051; /*introduces a function type*/) 106.2 436.23 T
(typedef t_t arr_type[n]; /*introduces an array type*/) 106.2 412.23 T
0 F
(Figure 2.23) 300.31 388.23 T
99 378.4 540 526.9 R
N
FMENDPAGE
%%EndPage: "21" 22
%%Page: "22" 22
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(22) 519.89 755.24 T
0 F
(2.8.1.2) 99 520.23 T
(Name Spaces) 138.89 520.23 T
1 F
0.96 (The local identi\336er of a general type token can) 99 503.23 P
0.39 (only reside in the) 99 491.23 P
3 F
0.39 (ordinary) 178.89 491.23 P
1 F
0.39 ( name space. Conse-) 214.99 491.23 P
2.87 (quently) 99 479.23 P
2.87 (, this is the default name space. The) 130.48 479.23 P
2.45 (local identi\336er behaves exactly as if the type) 99 467.23 P
1.66 (had been introduced with) 99 455.23 P
4 F
1.66 (typedef) 220.07 455.23 P
1 F
1.66 ( and conse-) 255.61 455.23 P
2.37 (quently is treated as a) 99 443.23 P
4 F
2.37 (typedef-name) 211.42 443.23 P
1 F
2.37 ( by the) 276.4 443.23 P
(syntax analyser) 99 431.23 T
(.) 167.88 431.23 T
0 F
(2.8.2) 99 405.23 T
(Derived Declarator types) 135 405.23 T
1 F
1.1 (Derived declarator types are constructed using) 99 388.23 P
0.99 (the conventional type declarators. Examples of) 99 376.23 P
(their construction are given in Figure) 99 364.23 T
(2.23.) 263.42 364.23 T
0 F
(2.8.3) 99 338.23 T
(Integral type tokens) 135 338.23 T
1 F
4.14 (The type token introduction) 99 321.23 P
4 F
4.14 (V) 238.89 321.23 P
4.14 (ARIETY) 244.81 321.23 P
1 F
4.14 ( intro-) 281.46 321.23 P
0.23 (duces a token representing the) 99 309.23 P
3 F
0.23 (integral) 240.14 309.23 P
1 F
0.23 ( types. It) 272.91 309.23 P
-0.07 (can only be de\336ned as an integral type and con-) 99 297.23 P
3.14 (sequently can be used wherever an integral) 99 285.23 P
(type is valid.) 99 273.23 T
0 F
(2.8.3.1) 99 247.23 T
(Name Spaces) 138.89 247.23 T
1 F
2.49 (As with general type tokens, Section 2.8.1.2,) 99 230.23 P
1.18 (integral type tokens only reside in the) 99 218.23 P
3 F
1.18 (ordinary) 275.05 218.23 P
1 F
1.38 (name space. They also behave as if they had) 99 206.23 P
(been introduced with) 99 194.23 T
4 F
(typedef) 194 194.23 T
1 F
(.) 229.54 194.23 T
0 F
(2.8.3.2) 99 168.23 T
(Conversions) 138.89 168.23 T
1 F
1.37 (V) 99 151.23 P
1.37 (alues which have integral type token, can be) 104.93 151.23 P
3.82 (converted to any scalar type. Similarly) 99 139.23 P
3.82 (, any) 285.66 139.23 P
2.21 (value with scalar type can be converted to a) 99 127.23 P
-0.17 (value with an integral token type. The semantics) 99 115.23 P
1.58 (of the conversion are identical to those where) 99 103.23 P
1.45 (the type de\336ning the token is used, instead of) 329.15 520.23 P
(the integral type token, in the conversion.) 329.15 508.23 T
9.21 (For example, consider the program in) 329.15 486.23 P
1.93 (Figure) 329.15 474.23 P
1.93 (2.24. Within the de\336nition of function) 360.25 474.23 P
3 F
1.93 (f) 535.74 474.23 P
1 F
1.93 (,) 538.52 474.23 P
0.94 (there is a conversion from) 329.15 462.23 P
3 F
0.94 (int) 451.59 462.23 P
1 F
0.94 (, the type of) 462.15 462.23 P
3 F
0.94 (5) 520.91 462.23 P
1 F
0.94 (, to) 526.47 462.23 P
3 F
0.16 (i_t) 329.15 450.23 P
1 F
0.16 (, the integral type token, on line 4, and a con-) 339.7 450.23 P
0.44 (version from) 329.15 438.23 P
3 F
0.44 (i_t) 387.78 438.23 P
1 F
0.44 ( to) 398.34 438.23 P
3 F
0.44 (short) 413.11 438.23 P
1 F
0.44 (, the return type of) 435.32 438.23 P
3 F
0.44 (f) 521.41 438.23 P
1 F
0.44 (, on) 524.19 438.23 P
0.94 (line 6. If, at some stage,) 329.15 426.23 P
3 F
0.94 (i_t) 443.66 426.23 P
1 F
0.94 ( is de\336ned as) 454.21 426.23 P
3 F
0.94 (long) 519.63 426.23 P
1 F
0.94 (,) 538.52 426.23 P
0.12 (then the function) 329.15 414.23 P
3 F
0.12 (f) 406.17 414.23 P
1 F
0.12 ( will be equivalent to the func-) 408.95 414.23 P
(tion) 329.15 402.23 T
3 F
(g) 348.04 402.23 T
1 F
(.) 353.6 402.23 T
0 F
(2.8.3.3) 329.15 376.23 T
(Integral promotions) 369.04 376.23 T
1 F
0.99 (Integral promotions \050ANSI C Standard, Section) 329.15 359.23 P
0.23 (3.2.1.1\051 are de\336ned according to the rules intro-) 329.15 347.23 P
0.12 (duced in Section 4.1, and are applied to all inte-) 329.15 335.23 P
0.76 (gral type tokens where required by the ANSI C) 329.15 323.23 P
(Standard.) 329.15 311.23 T
0 F
(2.8.3.4) 329.15 285.23 T
(Arithmetic Conversions) 369.04 285.23 T
1 F
5.33 (The usual arithmetic conversions \050ANSI C) 329.15 268.23 P
1.19 (Standard, Section 3.2.1.5\051 are de\336ned on inte-) 329.15 256.23 P
0 (gral type tokens. These conversions are applied) 329.15 244.23 P
(where required by the ANSI C Standard.) 329.15 232.23 T
2.99 (The integral promotions, Section 2.8.3.3, are) 329.15 210.23 P
0.89 (\336rst applied to the integral type token and then) 329.15 198.23 P
0.55 (the usual arithmetic conversions, are applied to) 329.15 186.23 P
2.77 (the resulting integral type. When the integral) 329.15 174.23 P
0.94 (promotion is an integral type token the seman-) 329.15 162.23 P
1.52 (tics of the conversion are as if the conversion) 329.15 150.23 P
0.39 (were being applied to the de\336ning integral type,) 329.15 138.23 P
(c.f. Section 2.8.3.2.) 329.15 126.23 T
99 553.9 540 729.4 R
7 X
V
5 F
0 X
(#pragma token VARIETY i_t#) 106.2 710.73 T
(short f\050void\051{) 106.2 686.73 T
(i_t x_i = 5;) 117 674.73 T
(/*line 4*/) 432 674.73 T
(return x_i;) 117 662.73 T
(/*line 5*/) 432 662.73 T
(}) 117 650.73 T
(short g\050void\051{) 106.2 626.73 T
(long x_i = 5;) 117 614.73 T
(/*line 8*/) 432 614.73 T
(return x_i;) 117 602.73 T
(/*line 9*/) 432 602.73 T
(}) 117 590.73 T
0 F
(Figure 2.24) 300.31 566.73 T
99 553.9 540 729.4 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "22" 23
%%Page: "23" 23
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(23) 519.89 755.24 T
0 F
(2.8.4) 99 515.73 T
(Floating type tokens) 135 515.73 T
1 F
1.98 (At present \337oating type tokens are not imple-) 99 498.73 P
5.27 (mented. This should be recti\336ed in future) 99 486.73 P
(releases.) 99 474.73 T
0 F
(2.8.5) 99 448.73 T
(Arithmetic type tokens) 135 448.73 T
1 F
-0.23 (The type token introduction) 99 431.73 P
4 F
-0.23 (ARITHMETIC) 221.42 431.73 P
1 F
-0.23 (, intro-) 283.05 431.73 P
0.94 (duces an) 99 419.73 P
3 F
0.94 (arithmetic) 144.23 419.73 P
1 F
0.94 ( type token. In theory arith-) 187.54 419.73 P
4.83 (metic type tokens can be de\336ned by any) 99 407.73 P
1.84 (arithmetic type, but this implementation of the) 99 395.73 P
0.64 (compiler only permits their de\336nition by integral) 99 383.73 P
0.55 (types. In consequence, in all respects, arithme-) 99 371.73 P
1.24 (tic type tokens behave as if they were integral) 99 359.73 P
(type tokens, Section 2.8.3.) 99 347.73 T
2.84 (It is also intended to rectify this limitation in) 99 325.73 P
(future releases.) 99 313.73 T
0 F
(2.8.6) 99 287.73 T
(Compound type tokens) 135 287.73 T
1 F
0.62 (A) 99 270.73 P
3 F
0.62 (compound type) 109.07 270.73 P
1 F
0.62 (, as de\336ned in this document,) 178.03 270.73 P
3.25 (is a type which describes objects that have) 99 258.73 P
3.77 (components that are accessible by) 99 246.73 P
3 F
3.77 (member) 274.5 246.73 P
0.95 (selectors) 99 234.73 P
1 F
0.95 (. Clearly) 138.99 234.73 P
0.95 (, all) 175.85 234.73 P
3 F
0.95 (structure) 196.08 234.73 P
1 F
0.95 ( and) 234.96 234.73 P
3 F
0.95 (union) 259.09 234.73 P
1 F
0.95 ( types) 283.53 234.73 P
6.24 (are) 99 222.73 P
3 F
6.24 (compound) 122.46 222.73 P
1 F
6.24 ( types. However) 169.12 222.73 P
6.24 (, compound) 252.69 222.73 P
1.18 (types, unlike structure and union types, do not) 99 210.73 P
1.48 (necessarily have an ordering on their member) 99 198.73 P
0.2 (selectors. This means that, in particular) 99 186.73 P
0.2 (, it is not) 273.32 186.73 P
4.44 (possible to initialize, with an) 99 174.73 P
4 F
4.44 (initializer-list,) 247.27 174.73 P
1 F
2.95 (\050ANSI C Standard, Section 3.5.7\051 all objects) 99 162.73 P
(with compound type.) 99 150.73 T
0.27 (Compound type tokens are either introduced by) 99 128.73 P
4 F
0.69 (STRUCT) 99 116.73 P
1 F
0.69 (, or by) 138.42 116.73 P
4 F
0.69 (UNION) 171.05 116.73 P
1 F
0.69 (. It is assumed that pro-) 203.25 116.73 P
2 (grammers will introduce compound types with) 99 104.73 P
0.41 (non-overlapping member selectors as) 329.15 515.73 P
4 F
0.41 (STRUCT) 500.77 515.73 P
1 F
2.21 (and those with overlapping member selectors) 329.15 503.73 P
1.54 (as) 329.15 491.73 P
4 F
1.54 (UNION) 344.02 491.73 P
1 F
1.54 (. In spite of this, no matter how the) 376.22 491.73 P
1.97 (compound type token is introduced, it can be) 329.15 479.73 P
(de\336ned with any compound type.) 329.15 467.73 T
0 F
(2.8.6.1) 329.15 441.73 T
(Name Spaces) 369.04 441.73 T
1 F
2.77 (The local token identi\336ers of compound type) 329.15 424.73 P
-0.15 (tokens can reside in either the) 329.15 412.73 P
3 F
-0.15 (ordinary) 464.38 412.73 P
1 F
-0.15 (space or) 503.11 412.73 P
1.59 (the) 329.15 400.73 P
3 F
1.59 (tag) 347.41 400.73 P
1 F
1.59 ( space. The default name space is the) 361.3 400.73 P
3 F
4.71 (ordinary) 329.15 388.73 P
1 F
4.71 ( name space. If the identi\336ers are) 365.25 388.73 P
0.1 (placed in the) 329.15 376.73 P
3 F
0.1 (ordinary) 388.91 376.73 P
1 F
0.1 ( name space, it is as if the) 425.01 376.73 P
3.01 (type had been declared with) 329.15 364.73 P
4 F
3.01 (typedef) 471.96 364.73 P
1 F
3.01 (. If the) 507.5 364.73 P
3.56 (local identi\336ers are placed in the) 329.15 352.73 P
3 F
3.56 (tag) 496.07 352.73 P
1 F
3.56 ( name) 509.96 352.73 P
-0.06 (space, it is as if the type had been declared with) 329.15 340.73 P
4 F
-0.21 (struct) 329.15 328.73 P
3 F
-0.21 (id) 359.69 328.73 P
1 F
-0.21 ( or) 367.47 328.73 P
4 F
-0.21 (union) 381.49 328.73 P
3 F
-0.21 (id) 411.47 328.73 P
1 F
-0.21 (, where) 419.25 328.73 P
3 F
-0.21 (id) 454.38 328.73 P
1 F
-0.21 ( is the local identi-) 462.15 328.73 P
(\336er) 329.15 316.73 T
(.) 342.48 316.73 T
-0.12 (Examples of compound type token introductions) 329.15 294.73 P
-0.15 (are given in Figure) 329.15 282.73 P
-0.15 (2.25. Although the use of the) 414.24 282.73 P
-0.14 (type) 329.15 270.73 P
3 F
-0.14 (struct) 350.67 270.73 P
-0.14 (u_t) 377.89 270.73 P
1 F
-0.14 (is marked as illegal, it is possible,) 394.42 270.73 P
1.97 (by the use of a pragma \050see Section 4.2\051, to) 329.15 258.73 P
(allow this type speci\336cation.) 329.15 246.73 T
0 F
(2.8.6.2) 329.15 220.73 T
(The Use of Compound T) 369.04 220.73 T
(ypes) 483.79 220.73 T
1 F
1.05 (V) 329.15 203.73 P
1.05 (alues and objects whose type is a compound) 335.08 203.73 P
0.23 (type token are valid everywhere that a structure) 329.15 191.73 P
(or union type is valid.) 329.15 179.73 T
0.17 (The compound type token introduction does not) 329.15 157.73 P
3.23 (introduce the member selectors of the com-) 329.15 145.73 P
2.67 (pound type. They are added afterwards, see) 329.15 133.73 P
(Section 2.9.) 329.15 121.73 T
99 544.9 540 729.4 R
7 X
V
5 F
0 X
(#pragma token STRUCT n_t#) 106.2 710.73 T
(/*line 1*/) 432 710.73 T
(#pragma token STRUCT TAG s_t#) 106.2 698.73 T
(/*line 2*/) 432 698.73 T
(#pragma token UNION TAG u_t#) 106.2 686.73 T
(/*line 3*/) 432 686.73 T
(void f\050\051{) 106.2 662.73 T
(n_t x1;) 117 650.73 T
(/*n_t is the compound type on line 1*/) 225 650.73 T
(struct n_t x2;) 117 638.73 T
(/*This is illegal, n_t is not in the tag space*/) 225 638.73 T
(s_t x3;) 117 626.73 T
-0.31 (/*This is illegal, s_t is not in the ordinary space*/) 225 626.73 P
(struct s_t x4;) 117 614.73 T
(/*struct s_t is the compound type on line 2*/) 225 614.73 T
(union u_t x5;) 117 602.73 T
(/*union u_t is the compound type on line 3*/) 225 602.73 T
(struct u_t x6;) 117 590.73 T
-0.31 (/*This is illegal, u_t is introduced as a union tag*/) 225 590.73 P
(}) 117 578.73 T
0 F
(Figure 2.25) 300.31 554.73 T
99 544.9 540 729.4 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "23" 24
%%Page: "24" 24
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(24) 519.89 755.24 T
0 F
(2.8.7) 99 502.23 T
(T) 135 502.23 T
(ype token compatibility) 140.37 502.23 T
1 F
0.06 (A type represented by a type token is incompat-) 99 485.23 P
0.71 (ible \050ANSI C Standard, Section 3.1.2.6\051 with all) 99 473.23 P
1.98 (other types, except for itself, unless the type-) 99 461.23 P
2.53 (token has been provided with a de\336nition, in) 99 449.23 P
0.71 (which case it is compatible with everything that) 99 437.23 P
(is compatible with its de\336nition.) 99 425.23 T
0 F
(2.8.8) 99 399.23 T
(De\336ning type tokens) 135 399.23 T
1 F
0.78 (There is, currently) 99 382.23 P
0.78 (, only one way of providing a) 179.8 382.23 P
4.28 (de\336nition for a type token. This method is) 99 370.23 P
0.23 (referred to as) 99 358.23 P
3 F
0.23 (type resolution) 161.91 358.23 P
1 F
0.23 (. T) 227.13 358.23 P
0.23 (ype resolution is) 238.48 358.23 P
0.37 (an operation, similar to type compatibility \050ANSI) 99 346.23 P
1.1 (C Standard, Section 3.1.2.6\051, operating on two) 99 334.23 P
0.95 (types. Essentially) 99 322.23 P
0.95 (, the operation of type resolu-) 176.41 322.23 P
3.35 (tion is identical to that of type compatibility) 99 310.23 P
3.35 (,) 308.37 310.23 P
2.77 (except in the case where an) 99 298.23 P
3 F
2.77 (unde\336ned) 242.82 298.23 P
1 F
2.77 ( type) 286.71 298.23 P
0.89 (token is found to be incompatible with the type) 99 286.23 P
0.12 (with which it is being compared. In this case the) 99 274.23 P
0.22 (type token is de\336ned by the type with which it is) 99 262.23 P
4.65 (being compared, thereby making the types) 99 250.23 P
(compatible \050see Section 2.8.7\051.) 99 238.23 T
2.77 (In order to allow the convenient de\336nition of) 99 216.23 P
1.85 (type tokens by resolution, the compiler allows) 99 204.23 P
0.82 (the consistent rede\336nition of a type. In order to) 99 192.23 P
1.29 (accommodate the ANSI C Standard \050see Sec-) 99 180.23 P
2.37 (tion 4.3\051 which disallows the rede\336nition of a) 99 168.23 P
0.67 (type, a resolution of the types in the two de\336ni-) 99 156.23 P
-0.25 (tions is performed and the rede\336nition is allowed) 99 144.23 P
(if:) 99 132.23 T
(1.) 99 110.23 T
(There is a resolution of the two types.) 113.4 110.23 T
(2.) 328.5 502.23 T
0.37 (As a result of the resolution, there is at least) 342.9 502.23 P
(one de\336nition of a token.) 342.9 490.23 T
1.2 (Consider the program in Figure) 328.5 468.23 P
1.2 (2.26. The sec-) 474.37 468.23 P
-0.15 (ond de\336nition of ptr_t_t cause a resolution of the) 328.5 456.23 P
0.76 (types) 328.5 444.23 P
3 F
0.76 (\050t_t *\051) 355.92 444.23 P
1 F
0.76 ( and) 381.12 444.23 P
3 F
0.76 (\050int **\051) 404.87 444.23 P
1 F
0.76 (. This resolution, follow-) 433.39 444.23 P
2.72 (ing the normal rules of compatibility) 328.5 432.23 P
2.72 (, i.e. two) 497.99 432.23 P
0.27 (pointers are compatible if their dependent types) 328.5 420.23 P
2.86 (are compatible, requires the resolution of) 328.5 408.23 P
3 F
2.86 (t_t) 529.53 408.23 P
1 F
1.11 (and) 328.5 396.23 P
3 F
1.11 ( \050int *\051) 345.17 396.23 P
1 F
1.11 (. This resolution results in the de\336ni-) 374.04 396.23 P
0.36 (tion of) 328.5 384.23 P
3 F
0.36 (t_t) 359.23 384.23 P
1 F
0.36 ( as) 370.34 384.23 P
3 F
0.36 (\050int *\051) 387.18 384.23 P
1 F
0.36 ( and consequently the de\336ni-) 411.42 384.23 P
(tion is allowed.) 328.5 372.23 T
0.55 (The program in Figure) 328.5 350.23 P
0.55 (2.27 illustrates how type) 431.79 350.23 P
3.23 (resolution can be used to de\336ne expression) 328.5 338.23 P
0.47 (tokens. The resolution of the two types de\336ning) 328.5 326.23 P
3 F
0 (arr) 328.5 314.23 P
1 F
0 ( causes the expression token) 340.71 314.23 P
3 F
0 (N) 472.89 314.23 P
1 F
0 ( to be de\336ned) 480.11 314.23 P
(as) 328.5 302.23 T
3 F
(\0504*sizeof\050int\051\051) 341.83 302.23 T
1 F
(.) 401.25 302.23 T
0 F
(2.8.8.1) 328.5 276.23 T
(The resolution operators) 368.39 276.23 T
1 F
0.99 (The resolution operator) 328.5 259.23 P
0.99 (, unlike type compatibil-) 433.25 259.23 P
3.14 (ity) 328.5 247.23 P
3.14 (, is not symmetric. If the two) 337.76 247.23 P
4 F
3.14 (typedef) 486.41 247.23 P
1 F
3.14 (s in) 521.95 247.23 P
2.21 (Figure) 328.5 235.23 P
2.21 (2.26 are reversed, no resolution would) 359.6 235.23 P
1.24 (take place and the two types would be incom-) 328.5 223.23 P
0.05 (patible. A) 328.5 211.23 P
3 F
0.05 (resolution) 373.04 211.23 P
1 F
0.05 ( of two types,) 416.37 211.23 P
3 F
0.05 (A) 478.23 211.23 P
1 F
0.05 ( and) 484.89 211.23 P
3 F
0.05 (B) 507.22 211.23 P
1 F
0.05 (, is an) 513.89 211.23 P
0.38 (attempt to) 328.5 199.23 P
3 F
0.38 (resolve) 376.48 199.23 P
1 F
0.38 ( the type) 408.7 199.23 P
3 F
0.38 (A) 450.95 199.23 P
0.38 (to) 460.78 199.23 P
1 F
0.38 ( the type) 469.11 199.23 P
3 F
0.38 (B) 511.37 199.23 P
1 F
0.38 (, that) 518.04 199.23 P
-0.07 (is only the unde\336ned tokens of) 328.5 187.23 P
3 F
-0.07 (A) 465.85 187.23 P
1 F
-0.07 ( can be de\336ned) 472.52 187.23 P
1.73 (as a result of the application of the resolution) 328.5 175.23 P
(operator) 328.5 163.23 T
(.) 365.17 163.23 T
0.94 (In the case of a re-de\336nition of a type, the \336rst) 328.5 141.23 P
-0.17 (de\336nition is) 328.5 129.23 P
3 F
-0.17 (resolved to) 380.93 129.23 P
1 F
-0.17 ( the second, thereby only) 429.65 129.23 P
1.1 (allowing any de\336nition of tokens present in the) 328.5 117.23 P
(\336rst type de\336nition.) 328.5 105.23 T
99 648.4 540 738.4 R
7 X
V
5 F
0 X
(#pragma token TYPE t_t#) 106.2 719.73 T
(/*line 1*/) 432 719.73 T
(typedef t_t *ptr_t_t;) 106.2 695.73 T
(/*line 3*/) 432 695.73 T
(typedef int **ptr_t_t;) 106.2 683.73 T
(/*line 4*/) 432 683.73 T
0 F
(Figure 2.26) 300.31 659.73 T
99 648.4 540 738.4 R
0.5 H
2 Z
N
99 531.4 540 621.4 R
7 X
V
5 F
0 X
(#pragma token EXP rvalue:int:N#) 106.2 602.73 T
(typedef int arr[N];) 106.2 578.73 T
(typedef int arr[4*sizeof\050int\051];) 106.2 566.73 T
0 F
(Figure 2.27) 300.31 542.73 T
99 531.4 540 621.4 R
N
FMENDPAGE
%%EndPage: "24" 25
%%Page: "25" 25
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(25) 519.89 755.24 T
2.32 (Similarly) 99 475.23 P
2.32 (, if an identi\336er for a compound type) 136.01 475.23 P
-0.08 (token is introduced into the) 99 463.23 P
3 F
-0.08 (tag) 220.83 463.23 P
1 F
-0.08 ( name space and) 234.72 463.23 P
0.42 (that tag is later de\336ned to be a compound type,) 99 451.23 P
-0.08 (then the compound type token is resolved to the) 99 439.23 P
(de\336ning compound type.) 99 427.23 T
0.18 (There is another operator) 99 405.23 P
0.18 (, the) 211.74 405.23 P
3 F
0.18 (assignment reso-) 234.32 405.23 P
1.26 (lution) 99 393.23 P
1 F
1.26 ( operator) 122.89 393.23 P
1.26 (. This is similar to the) 163.6 393.23 P
3 F
1.26 (resolution) 267.82 393.23 P
1 F
0.45 (operator) 99 381.23 P
0.45 (, but whereas the resolution operator is) 135.67 381.23 P
2.95 (used when checking the compatibility of two) 99 369.23 P
3.77 (types, the) 99 357.23 P
3 F
3.77 (assignment resolution) 152.65 357.23 P
1 F
3.77 ( operator is) 253.62 357.23 P
1.03 (used when converting an object of one type to) 99 345.23 P
-0.17 (another for the purposes of assignment \050ANSI C) 99 333.23 P
1.02 (Standard, Section 3.3.16.1\051. In this case, if the) 99 321.23 P
0.87 (conversion is not possible, but would be possi-) 99 309.23 P
1.29 (ble if an unde\336ned token, of the type to which) 99 297.23 P
0.27 (the assignee is being converted, were appropri-) 99 285.23 P
0.94 (ately de\336ned, then that token is de\336ned appro-) 99 273.23 P
1.69 (priately) 99 261.23 P
1.69 (. There are, in some cases, more than) 130.47 261.23 P
1.24 (one possible de\336nition of such a token, but, in) 99 249.23 P
0.78 (these cases, there is always one de\336nition that) 99 237.23 P
0.13 (does not cause any conversion. This is the de\336-) 99 225.23 P
(nition that is chosen.) 99 213.23 T
99 177.9 311.15 187.9 C
99 186.9 567 186.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 153.9 311.15 163.9 C
99 162.9 567 162.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.9) 99 168.57 T
(Selector T) 135 168.57 T
(okens) 201.62 168.57 T
1 10 Q
4.6 (The use of selector tokens is the primary) 99 137.23 P
2.77 (method of adding member selectors to com-) 99 125.23 P
3.69 (pound type tokens \050Section 2.8.6\051; the only) 99 113.23 P
2.53 (other method being to provide a structure or) 99 101.23 P
1.03 (union de\336nition of the token. They can also be) 329.15 475.23 P
1.26 (used to add new member selectors to existing) 329.15 463.23 P
(structure and union types.) 329.15 451.23 T
1.98 (The syntax for introducing a selector token is) 329.15 429.23 P
0.47 (given in Figure) 329.15 417.23 P
0.47 (2.28. The \336rst) 398.41 417.23 P
4 F
0.47 (type-name) 463.71 417.23 P
1 F
0.47 ( is the) 513.69 417.23 P
2.37 (type of the object selected by the introduced) 329.15 405.23 P
-0.09 (selector) 329.15 393.23 P
-0.09 (, and the second) 363.59 393.23 P
4 F
-0.09 (type-name) 439.92 393.23 P
1 F
-0.09 ( is the com-) 489.9 393.23 P
-0.22 (pound type to which the selector is being added.) 329.15 381.23 P
1.31 (A selector token can be de\336ned by any) 329.15 359.23 P
4 F
1.31 (mem-) 514.64 359.23 P
5.13 (ber-designator) 329.15 347.23 P
1 F
5.13 ( \050ANSI C Standard, Section) 399.12 347.23 P
0 (4.1.6\051 of the compound type to which it belongs.) 329.15 335.23 P
0.86 (In consequence, when the compound type is a) 329.15 323.23 P
0.18 (compound type token, the token member selec-) 329.15 311.23 P
0.62 (tors cannot be de\336ned until the compound type) 329.15 299.23 P
0.7 (token has been de\336ned. Often, the de\336nition of) 329.15 287.23 P
-0.17 (the compound type token and its member selec-) 329.15 275.23 P
(tor tokens occur together) 329.15 263.23 T
(.) 439.15 263.23 T
0 F
(2.9.1) 329.15 237.23 T
(Member Selector Ordering) 365.15 237.23 T
1 F
1.34 (In the declaration of structure and union types) 329.15 220.23 P
0.69 (within the ANSI C standard, there is an implied) 329.15 208.23 P
-0.08 (ordering of the member selectors. This is gener-) 329.15 196.23 P
(ally insigni\336cant except in two cases.) 329.15 184.23 T
(1.) 329.15 162.23 T
2.09 (Initialization with) 343.55 162.23 P
4 F
2.09 (initializer-list) 423.26 162.23 P
1 F
2.09 (. The identi-) 484.35 162.23 P
0.64 (\336ed members of a structure are initialized in) 343.55 150.23 P
2.3 (the order in which they are declared. The) 343.55 138.23 P
1.99 (\336rst identi\336ed member of a union is initial-) 343.55 126.23 P
(ized.) 343.55 114.23 T
99 661.9 540 733.9 R
7 X
V
7 F
0 X
(selector-token:) 106.2 715.23 T
6 F
(MEMBER) 117 703.23 T
8 F
(type-name) 158.98 703.23 T
6 F
(:) 218.94 703.23 T
8 F
(type-name) 230.94 703.23 T
6 F
(:) 290.9 703.23 T
0 F
(Figure 2.28) 300.31 679.23 T
99 661.9 540 733.9 R
0.5 H
2 Z
N
99 504.4 540 643.9 R
7 X
V
5 F
0 X
(#pragma token STRUCT TAG lconv#) 106.2 625.23 T
(#pragma token MEMBER char*:struct lconv:negative_sign#) 106.2 613.23 T
(struct lconv f\050void\051{) 106.2 589.23 T
(struct lconv res;) 117 577.23 T
(res.negative_sign=\323-\323;) 117 565.23 T
(return res;) 117 553.23 T
(}) 117 541.23 T
0 F
(Figure 2.29) 300.31 517.23 T
99 504.4 540 643.9 R
N
FMENDPAGE
%%EndPage: "25" 26
%%Page: "26" 26
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(26) 519.89 755.24 T
(2.) 99 569.73 T
2.33 (Comparison of pointers. The addresses of) 113.4 569.73 P
2.32 (members of structures will increase in the) 113.4 557.73 P
(order in which they are declared) 113.4 545.73 T
2.44 (The member selectors introduced as selector) 99 523.73 P
3.32 (tokens are not related, until de\336ned, to any) 99 511.73 P
0.27 (other member selector) 99 499.73 P
0.27 (. In particular) 198.97 499.73 P
0.27 (, this means) 256.73 499.73 P
3.08 (that if a compound type only has unde\336ned) 99 487.73 P
1.45 (token selectors, as is the case for most struc-) 99 475.73 P
-0.08 (ture types of APIs, then the composite type can-) 99 463.73 P
(not be initialized with an initializer list.) 99 451.73 T
0.27 (The decision to allow unordered member selec-) 99 429.73 P
0.86 (tors is not accidental. It enables the separation) 99 417.73 P
0.3 (of the decision as to what members belong to a) 99 405.73 P
0.23 (structure and that of where those member com-) 99 393.73 P
(ponents lie.) 99 381.73 T
0 F
(2.9.2) 99 355.73 T
(Name Spaces) 135 355.73 T
1 F
1.57 (The local identi\336ers of the introduced member) 99 338.73 P
0.87 (selectors can only reside in the member space) 99 326.73 P
2.77 (of the compound type to which they belong.) 99 314.73 P
(This is also the default name space.) 99 302.73 T
0 F
(2.9.3) 99 276.73 T
(The use of selector tokens) 135 276.73 T
1 F
2.03 (An example of the use of a selector token is) 99 259.73 P
-0.09 (given in Figure) 99 247.73 P
-0.09 (2.29. This example is taken from) 167.15 247.73 P
2.21 (the ANSI C Standard Library Section 4.4.2.1.) 99 235.73 P
0.63 (The standard does not specify all the members) 99 223.73 P
1.94 (of) 99 211.73 P
3 F
1.94 (struct lconv) 112.05 211.73 P
1 F
1.94 ( or which order they appear in,) 164.53 211.73 P
-0.17 (and so cannot be represented naturally by exist-) 99 199.73 P
(ing C types.) 99 187.73 T
-0.19 (The introduction of new member selector tokens) 99 165.73 P
1.03 (can occur at any point in the program, thereby) 99 153.73 P
-0.19 (making it possible to represent those extensions) 99 141.73 P
(to APIs that require extra member designators.) 99 129.73 T
0 F
(2.9.4) 329.15 569.73 T
(De\336ning token selectors) 365.15 569.73 T
1 F
0.07 (There are two methods for de\336ning token selec-) 329.15 552.73 P
(tors, one implicit and the other explicit.) 329.15 540.73 T
0 F
(2.9.4.1) 329.15 514.73 T
(Implicit selector token de\336nition) 369.04 514.73 T
1 F
0.31 (The implicit de\336nition of a token selector occurs) 329.15 497.73 P
0.94 (when the token is a selector) 329.15 485.73 P
0.94 (, identi\336ed by) 457.18 485.73 P
0.94 (, say) 517.21 485.73 P
0.94 (,) 538.52 485.73 P
3 F
1.02 (id) 329.15 473.73 P
1 F
1.02 (, for an unde\336ned token compound type, say) 336.92 473.73 P
3 F
2.77 (A) 329.15 461.73 P
1 F
2.77 (. When) 335.81 461.73 P
3 F
2.77 (A) 375.79 461.73 P
1 F
2.77 ( is de\336ned by another compound) 382.46 461.73 P
0.67 (type, say) 329.15 449.73 P
3 F
0.67 (B) 373.27 449.73 P
1 F
0.67 (, and) 379.94 449.73 P
3 F
0.67 (B) 406.29 449.73 P
1 F
0.67 ( has a member selector with) 412.96 449.73 P
(identi\336er) 329.15 437.73 T
3 F
(id) 369.7 437.73 T
1 F
(, then) 377.47 437.73 T
3 F
(A.id) 405.26 437.73 T
1 F
( is de\336ned to be) 422.48 437.73 T
3 F
(B.id) 495.82 437.73 T
1 F
(.) 513.04 437.73 T
(There is one constraint:) 329.15 415.73 T
(1.) 329.15 393.73 T
-0.06 (The type of) 343.55 393.73 P
3 F
-0.06 (A.id) 396.14 393.73 P
1 F
-0.06 ( must be resolved to the type) 413.36 393.73 P
(of) 343.55 381.73 T
3 F
(B.id) 354.66 381.73 T
1 F
( \050see Section 2.8.8\051.) 371.88 381.73 T
1.2 (An example of implicit selector token de\336nition) 329.15 359.73 P
1.89 (is given in Figure) 329.15 347.73 P
1.89 (2.30. The type de\336nition on) 413.15 347.73 P
-0.12 (line 7 is a rede\336nition of the type de\336nition of) 329.15 335.73 P
3 F
-0.12 (s_t) 527.96 335.73 P
1 F
0.92 (implicitly introduced on line 2 \050Section 2.8.6.1\051.) 329.15 323.73 P
2.32 (This rede\336nition caused a resolution between) 329.15 311.73 P
0.06 (the token introduced on line 2 and the structure,) 329.15 299.73 P
3 F
1.66 (struct) 329.15 287.73 P
1.66 (s_tag) 356.36 287.73 P
1 F
1.66 (, introduced on line 6. This resolu-) 380.81 287.73 P
1.22 (tion causes the token, of line 2, to be de\336ned.) 329.15 275.73 P
1.58 (As a direct consequence of this de\336nition, the) 329.15 263.73 P
-0.17 (token for the selector) 329.15 251.73 P
3 F
-0.17 (mem_x) 424.59 251.73 P
1 F
-0.17 (, introduced on line) 457.35 251.73 P
6.5 (3 is de\336ned as the second member of) 329.15 239.73 P
3 F
-0.01 (struct) 329.15 227.73 P
-0.01 (s_tag) 356.36 227.73 P
1 F
-0.01 (, and the consequential resolution of) 380.81 227.73 P
7.61 (the type of) 329.15 215.73 P
3 F
7.61 (s_t.mem_x) 401.42 215.73 P
1 F
7.61 ( to the type of) 450.3 215.73 P
3 F
1.1 (struct) 329.15 203.73 P
1.1 (s_tag.mem_x) 356.36 203.73 P
1 F
1.1 (, causes the type token) 416.35 203.73 P
3 F
1.1 (t_t) 527.4 203.73 P
1 F
1.1 (,) 538.52 203.73 P
0.49 (introduced on line 1, to be de\336ned as) 329.15 191.73 P
3 F
0.49 (int) 499.7 191.73 P
1 F
0.49 (. Since) 510.26 191.73 P
3 F
2.85 (mem_y) 329.15 179.73 P
1 F
2.85 ( is not a member of) 361.91 179.73 P
3 F
2.85 (struct) 467.33 179.73 P
2.85 (s_tag) 494.55 179.73 P
1 F
2.85 (, the) 519 179.73 P
4.75 (token selector introduced on line 4 is not) 329.15 167.73 P
(de\336ned.) 329.15 155.73 T
99 598.9 540 729.4 R
7 X
V
5 F
0 X
(#pragma token TYPE t_t#) 106.2 710.73 T
(/*line 1*/) 432 710.73 T
(#pragma token STRUCT s_t#) 106.2 698.73 T
(/*line 2*/) 432 698.73 T
(#pragma token MEMBER t_t:s_t:mem_x#) 106.2 686.73 T
(/*line 3*/) 432 686.73 T
(#pragma token MEMBER t_t:s_t:mem_y#) 106.2 674.73 T
(/*line 4*/) 432 674.73 T
(struct s_tag {int a, mem_x, b;};) 106.2 650.73 T
(/*line 6*/) 432 650.73 T
(typdef struct s_tag s_t;) 106.2 638.73 T
(/*line 7*/) 432 638.73 T
0 F
(Figure 2.30) 300.31 614.73 T
99 598.9 540 729.4 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "26" 27
%%Page: "27" 27
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(27) 519.89 755.24 T
0 F
(2.9.4.2) 99 331.23 T
(Explicit selector token de\336nition) 138.89 331.23 T
1 F
0.48 (The explicit de\336nition of a selector token is per-) 99 314.23 P
1.52 (formed by using a pragma. The syntax of this) 99 302.23 P
(pragma is given in Figure) 99 290.23 T
(2.31.) 213.98 290.23 T
2.21 (The) 99 268.23 P
4 F
2.21 (type-name) 121.21 268.23 P
1 F
2.21 ( provides the compound type,) 171.19 268.23 P
1.11 (say) 99 256.23 P
3 F
1.11 (C) 118.43 256.23 P
1 F
1.11 (, of which the selector to be de\336ned is a) 125.65 256.23 P
1.1 (member) 99 244.23 P
1.1 (. The) 135.1 244.23 P
4 F
1.1 (identi\336er) 162.87 244.23 P
1 F
1.1 ( provides the identi\336ca-) 205.07 244.23 P
-0.15 (tion of the member selector within that type. The) 99 232.23 P
3 F
3.64 (member) 99 220.23 P
3.64 (-designator) 135.47 220.23 P
1 F
3.64 ( provides the de\336nition of) 185.46 220.23 P
(the selector) 99 208.23 T
(.) 150.11 208.23 T
1.44 (A member-designator identi\336es a selector) 99 186.23 P
1.44 (, say) 288.6 186.23 P
3 F
(S) 99 174.23 T
1 F
(, of a compound type.) 105.67 174.23 T
(If the) 99 152.23 T
3 F
(member) 124.01 152.23 T
(-designator) 160.48 152.23 T
1 F
( is an) 210.47 152.23 T
4 F
(identi\336er) 237.13 152.23 T
1 F
(, then:) 278.79 152.23 T
(1.) 99 130.23 T
0.35 (The identi\336er must be a selector of the com-) 113.4 130.23 P
(pound type) 113.4 118.23 T
3 F
(C) 165.63 118.23 T
1 F
(.) 172.85 118.23 T
1.29 (The selector identi\336ed is the designated mem-) 329.15 331.23 P
(ber) 329.15 319.23 T
(,) 343.04 319.23 T
3 F
(S) 348.6 319.23 T
1 F
(.) 355.26 319.23 T
0.34 (If the) 329.15 297.23 P
3 F
0.34 ( member) 351.71 297.23 P
0.34 (-designator) 391.3 297.23 P
1 F
0.34 ( is an identi\336er) 441.29 297.23 P
0.34 (, say) 506.18 297.23 P
3 F
0.34 (id) 530.74 297.23 P
1 F
0.34 (,) 538.52 297.23 P
-0.25 (followed by a further) 329.15 285.23 P
3 F
-0.25 (member) 420.9 285.23 P
-0.25 (-designator) 457.37 285.23 P
1 F
-0.25 (, say) 506.81 285.23 P
3 F
-0.25 (M) 530.19 285.23 P
1 F
-0.25 (,) 538.52 285.23 P
(then:) 329.15 273.23 T
(1.) 329.15 251.23 T
0.48 (The identi\336er) 343.55 251.23 P
3 F
0.48 (id) 405.05 251.23 P
1 F
0.48 ( must be a member) 412.82 251.23 P
0.48 (, identify-) 500.27 251.23 P
(ing a selector) 343.55 239.23 T
3 F
(S1) 405.76 239.23 T
1 F
(, of the compound type) 417.99 239.23 T
3 F
(C) 522.44 239.23 T
1 F
(.) 529.66 239.23 T
(2.) 329.15 217.23 T
-0.07 (The type of the selector identi\336ed by) 343.55 217.23 P
3 F
-0.07 (id) 506.38 217.23 P
1 F
-0.07 (, must) 514.15 217.23 P
(have a compound type, say) 343.55 205.23 T
3 F
(M_C) 468.55 205.23 T
1 F
(.) 489.65 205.23 T
(3.) 329.15 183.23 T
1.39 (The member designator) 343.55 183.23 P
1.39 (,) 451.87 183.23 P
3 F
1.39 (M) 458.81 183.23 P
1 F
1.39 (, must identify a) 467.14 183.23 P
(selector) 343.55 171.23 T
(, say) 377.99 171.23 T
3 F
(S2) 401.88 171.23 T
1 F
(, of) 414.1 171.23 T
3 F
(M_C) 430.77 171.23 T
1 F
(.) 451.87 171.23 T
0.02 (The selector) 329.15 149.23 P
0.02 (,) 383.61 149.23 P
3 F
0.02 (S) 389.19 149.23 P
1 F
0.02 (, identi\336ed by the) 395.86 149.23 P
3 F
0.02 (member) 474.28 149.23 P
0.02 (-desig-) 510.75 149.23 P
-0.19 (nator) 329.15 137.23 P
1 F
-0.19 ( as a whole is the combination of the selec-) 351.92 137.23 P
(tor) 329.15 125.23 T
3 F
(S1) 343.59 125.23 T
1 F
( followed by) 355.81 125.23 T
3 F
(S2) 411.36 125.23 T
1 F
(.) 423.59 125.23 T
99 481.9 540 594.4 R
7 X
V
5 F
0 X
(#pragma token STRUCT s_t#) 106.2 575.73 T
(#pragma token MEMBER int : s_t : mem#) 106.2 563.73 T
(typedef struct {int x; struct{char y; int z;} s;} s_t;) 106.2 539.73 T
(#pragma DEFINE MEMBER s_t : mem s.z) 106.2 515.73 T
0 F
(Figure 2.32) 300.31 491.73 T
99 481.9 540 594.4 R
0.5 H
2 Z
N
99 364.9 540 463.9 R
7 X
V
5 F
0 X
(typedef struct {int x; struct{char y; int z;} s;} s_t;) 106.2 445.23 T
(#def) 106.2 421.23 T
(ine mem s.z) 130.19 421.23 T
(extern s_t mem;) 106.2 397.23 T
(/*line 5*/) 432 397.23 T
0 F
(Figure 2.33) 300.31 373.23 T
99 364.9 540 463.9 R
N
99 612.4 540 715.9 R
7 X
V
6 F
0 X
(#pragma DEFINE MEMBER) 106.2 697.23 T
8 F
(type-name identif) 238.13 697.23 T
(ier) 340.07 697.23 T
6 F
( :) 358.06 697.23 T
7 F
(member-designator) 376.05 697.23 T
(member-designator:) 106.2 673.23 T
8 F
(identif) 117 661.23 T
(ier) 158.98 661.23 T
(identif) 117 649.23 T
(ier) 158.98 649.23 T
6 F
( .) 176.97 649.23 T
7 F
(member-designator) 194.96 649.23 T
0 F
(Figure 2.31) 300.31 625.23 T
99 612.4 540 715.9 R
N
FMENDPAGE
%%EndPage: "27" 28
%%Page: "28" 28
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(28) 519.89 755.24 T
1.98 (As with implicit token de\336nitions, there is one) 99 448.23 P
(further constraint:) 99 436.23 T
(1.) 99 414.23 T
3.96 (The type of the selector token must be) 113.4 414.23 P
0.31 (resolved to the type of the selector identi\336ed) 113.4 402.23 P
(by the) 113.4 390.23 T
3 F
(member) 143.4 390.23 T
(-designator) 179.87 390.23 T
1 F
(.) 229.32 390.23 T
1.2 (An example of explicit selector token de\336nition) 99 368.23 P
0.63 (is given in Figure) 99 356.23 P
0.63 (2.32, which de\336nes the token) 179.2 356.23 P
(selector) 99 344.23 T
3 F
(mem) 136.77 344.23 T
1 F
( by the double selection) 158.98 344.23 T
3 F
(s.z) 266.76 344.23 T
1 F
(.) 279.53 344.23 T
-0.1 (The nearest equivalent, in conventional ANSI C,) 99 322.23 P
0.41 (is illustrated in Figure) 99 310.23 P
0.41 (2.33, but this has the dis-) 197.43 310.23 P
3.16 (advantage that) 99 298.23 P
3 F
3.16 (mem) 174.23 298.23 P
1 F
3.16 ( is placed in the global) 196.44 298.23 P
3 F
1.94 (macro) 99 286.23 P
1 F
1.94 ( name space, thereby corrupting line 5.) 126.76 286.23 P
(Note that) 99 274.23 T
5 F
(#def) 106.2 252.23 T
(ine mem s.z) 130.19 252.23 T
1 F
-0.22 (could not be used to de\336ne the member selector) 99 228.23 P
0.06 (of Figure) 99 216.23 P
0.06 (2.32 because) 141.28 216.23 P
3 F
0.06 (mem) 204.19 216.23 P
1 F
0.06 ( is not in the) 226.4 216.23 P
3 F
0.06 (macro) 283.38 216.23 P
1 F
(name space.) 99 204.23 T
99 168.9 311.15 178.9 C
99 177.9 567 177.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 144.9 311.15 154.9 C
99 153.9 567 153.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.10) 99 159.57 T
(Procedure tokens) 135 159.57 T
1 10 Q
5.77 (Consider the program in Figure) 99 128.23 P
5.77 (2.34. The) 263.15 128.23 P
1.24 (macro SW) 99 116.23 P
1.24 (AP is essentially a statement that is) 146.51 116.23 P
1.38 (parameterised by a type and two expressions.) 99 104.23 P
0.62 (Procedure tokens are based on the same idea.) 329.15 448.23 P
-0.26 (Procedure tokens represent, and are de\336ned by) 329.15 436.23 P
-0.26 (,) 538.52 436.23 P
0.21 (program components that are parameterised by) 329.15 424.23 P
(other program components.) 329.15 412.23 T
3.14 (The syntax for the introduction of procedure) 329.15 390.23 P
0.34 (tokens is given in Figure) 329.15 378.23 P
0.34 (2.35. As is made clear) 441.05 378.23 P
1.24 (by the syntax, there are three methods for the) 329.15 366.23 P
3.77 (introduction of procedure tokens. These are) 329.15 354.23 P
(described in the following sections.) 329.15 342.23 T
0 F
(2.10.1) 329.15 316.23 T
(General Procedure Introduction) 365.15 316.23 T
1 F
3.51 (The syntax for the general procedure token) 329.15 299.23 P
4.43 (introduction is given in Figure) 329.15 287.23 P
4.43 (2.36 and an) 479.64 287.23 P
0.63 (example use is given in Figure) 329.15 275.23 P
0.63 (2.37. The inten-) 470.04 275.23 P
1.16 (tion is that the de\336nition of) 329.15 263.23 P
3 F
1.16 (dderef) 455.02 263.23 P
1 F
1.16 ( should be a) 483.36 263.23 P
(double dereference.) 329.15 251.23 T
1.32 (The \336nal) 329.15 229.23 P
3 F
1.32 (token-introduction) 372.9 229.23 P
1 F
1.32 ( of the) 452.34 229.23 P
3 F
1.32 ( general-pro-) 482.77 229.23 P
-0.19 (cedure) 329.15 217.23 P
1 F
-0.19 ( syntax characterises the kind of program) 359.7 217.23 P
0.66 (construction being parameterised. In the exam-) 329.15 205.23 P
-0.2 (ple of Figure) 329.15 193.23 P
-0.2 (2.37, the program construction that) 387.08 193.23 P
0.55 (is being parameterised is an) 329.15 181.23 P
3 F
0.55 (rvalue) 459.65 181.23 P
1 F
0.55 ( expression.) 486.87 181.23 P
0.49 (The meaning of the type of the expression,) 329.15 169.23 P
3 F
0.49 (t) 525.26 169.23 P
1 F
0.49 (, is) 528.04 169.23 P
1.93 (discussed in Section 2.10.1.1. At the moment) 329.15 157.23 P
0.55 (the only kinds of program construct that can be) 329.15 145.23 P
0.27 (parameterised are expressions and statements.) 329.15 133.23 P
0.77 (Future developments should allow the parame-) 329.15 121.23 P
2.77 (terisation of types to give abstract type con-) 329.15 109.23 P
(structors.) 329.15 97.23 T
99 481.9 540 571.9 R
7 X
V
7 F
0 X
(procedure-token:) 106.2 553.23 T
(general-procedure) 117 541.23 T
(simple-procedure) 117 529.23 T
(function-procedure) 117 517.23 T
0 F
(Figure 2.35) 300.31 493.23 T
99 481.9 540 571.9 R
0.5 H
2 Z
N
5 F
(#def) 106.2 697.23 T
(ine SWAP\050T,A,B\051{T x; x=B;B=A;A=x;}) 130.19 697.23 T
(void f\050int i1,int i2,char *c1,char *c2\051{) 106.2 673.23 T
(SWAP\050int,i1,i2\051) 117 661.23 T
(SWAP\050char *,c1,c2\051) 117 649.23 T
(}) 117 637.23 T
0 F
(Figure 2.34) 300.31 613.23 T
99 598.9 540 715.9 R
N
FMENDPAGE
%%EndPage: "28" 29
%%Page: "29" 29
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(29) 519.89 755.24 T
2.61 (The local identi\336er of the procedure token is) 99 367.23 P
1.44 (placed in a name space as if it were the con-) 99 355.23 P
0.27 (struct being parameterised. In the example, this) 99 343.23 P
2.06 (is the default space for expressions, which is) 99 331.23 P
(the) 99 319.23 T
3 F
(macro) 115.67 319.23 T
1 F
( name space.) 143.44 319.23 T
1.81 (That part of the syntax enclosed between the) 99 297.23 P
1.29 (braces describes the parameters to the proce-) 99 285.23 P
0.94 (dure token. These are divided into two compo-) 99 273.23 P
(nents, the) 99 261.23 T
3 F
(bound-toks) 145.67 261.23 T
1 F
( and the) 195.12 261.23 T
3 F
(prog-pars) 234.02 261.23 T
1 F
(.) 276.78 261.23 T
0 F
(2.10.1.1) 99 235.23 T
(Bound token dependencies) 138.89 235.23 T
1 F
3.59 (The bound token dependencies,) 99 218.23 P
3 F
3.59 (bound-toks) 258.93 218.23 P
1 F
3.59 (,) 308.37 218.23 P
1.75 (describe the program constructs on which the) 99 206.23 P
2.12 (token depends. They should not be confused) 99 194.23 P
3.4 (with the parameters of the token which are) 99 182.23 P
2.54 (described in Section 2.10.1.2. The procedure) 99 170.23 P
0.89 (token in the example is dependent on both the) 99 158.23 P
1.65 (expression, to be dereferenced twice, and the) 99 146.23 P
0.23 (type of that expression. However) 99 134.23 P
0.23 (, the token has) 244.9 134.23 P
-0.17 (only one argument, namely the expression to be) 99 122.23 P
1.94 (dereferenced twice, from which it can deduce) 99 110.23 P
2.1 (both dependencies required by the procedure) 329.15 367.23 P
(token.) 329.15 355.23 T
-0.1 (The dependencies are introduced in an identical) 329.15 333.23 P
3.54 (fashion to the straightforward introduction of) 329.15 321.23 P
1.75 (tokens, as described in the previous sections.) 329.15 309.23 P
0.41 (The) 329.15 297.23 P
3 F
0.41 ( name-space) 346.37 297.23 P
1 F
0.41 ( is also as in the previous sec-) 404.55 297.23 P
2.49 (tions with the) 329.15 285.23 P
4 F
2.49 (identi\336er) 397.73 285.23 P
1 F
2.49 ( corresponding to the) 439.93 285.23 P
0 (local-identi\336er) 329.15 273.23 P
0 (. However) 390.24 273.23 P
0 (, the scope of the identi-) 434.67 273.23 P
-0.15 (\336er terminates at the end of the procedure token) 329.15 261.23 P
0.39 (introduction and, whilst in scope, hides all other) 329.15 249.23 P
0.39 (identi\336ers in the same name space. The tokens) 329.15 237.23 P
0.27 (are referred to as bound because they are local) 329.15 225.23 P
(to the procedure token.) 329.15 213.23 T
-0.01 (Once a dependency has been introduced, it can) 329.15 191.23 P
-0.19 (be used in the construction of any of the remain-) 329.15 179.23 P
2.21 (ing components of the procedure token intro-) 329.15 167.23 P
4.15 (duction. In the example of Figure) 329.15 155.23 P
4.15 (2.37, the) 498.24 155.23 P
0.48 (expression dependency) 329.15 143.23 P
0.48 (,) 434.44 143.23 P
3 F
0.48 (e) 440.48 143.23 P
1 F
0.48 (, is dependent on the) 446.03 143.23 P
1.17 (type) 329.15 131.23 P
3 F
1.17 (t) 351.99 131.23 P
1 F
1.17 (, as is the expression constructed by the) 354.77 131.23 P
(application of the procedure token.) 329.15 119.23 T
99 391.9 540 445.9 R
7 X
V
5 F
0 X
(#pragma token PROC{TYPE t,EXP rvalue:t**:e|EXP e}EXP rvalue:t:dderef#) 106.2 427.23 T
0 F
(Figure 2.37) 300.31 403.23 T
99 391.9 540 445.9 R
0.5 H
2 Z
N
99 463.9 540 742.9 R
7 X
V
7 F
0 X
(general-procedure:) 106.2 724.23 T
6 F
(PROC) 117 712.23 T
({) 146.98 712.23 T
7 F
(bound-toks) 158.98 712.23 T
7 8 Q
(opt) 218.94 709.73 T
6 10 Q
(|) 239.33 712.23 T
7 F
(prog-pars) 251.33 712.23 T
7 8 Q
(opt) 305.3 709.73 T
6 10 Q
(}) 325.68 712.23 T
7 F
(token-introduction) 337.68 712.23 T
(bound-toks:) 106.2 688.23 T
(bound-token) 117 676.23 T
(bound-token) 117 664.23 T
8 F
(,) 188.96 664.23 T
7 F
( bound-toks) 194.96 664.23 T
(bound-token:) 106.2 640.23 T
(token-introduction name-space) 117 628.23 T
7 8 Q
(opt) 290.9 625.73 T
8 10 Q
(identif) 311.29 628.23 T
(ier) 353.27 628.23 T
7 F
(prog-pars:) 106.2 604.23 T
(program-parameter) 117 592.23 T
(program-parameter) 117 580.23 T
6 F
(,) 224.94 580.23 T
7 F
(prog-pars) 236.93 580.23 T
(program-parameter:) 106.2 556.23 T
6 F
(EXP) 117 544.23 T
8 F
(identif) 140.99 544.23 T
(ier) 182.96 544.23 T
6 F
(STATEMENT) 117 532.23 T
8 F
(identif) 176.97 532.23 T
(ier) 218.94 532.23 T
6 F
(TYPE) 117 520.23 T
8 F
(type-name) 146.98 520.23 T
6 F
(MEMBER) 117 508.23 T
8 F
(type-name) 158.98 508.23 T
6 F
(:) 218.94 508.23 T
8 F
(identif) 230.94 508.23 T
(ier) 272.91 508.23 T
6 F
(PROC) 117 496.23 T
8 F
(identif) 146.98 496.23 T
(ier) 188.96 496.23 T
0 F
(Figure 2.36) 300.31 472.23 T
99 463.9 540 742.9 R
N
FMENDPAGE
%%EndPage: "29" 30
%%Page: "30" 30
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(30) 519.89 755.24 T
0 F
(2.10.1.2) 99 443.73 T
(Program parameters) 138.89 443.73 T
1 F
3.05 (Program parameters,) 99 426.73 P
3 F
3.05 (prog-pars) 202.29 426.73 P
1 F
3.05 (, describe the) 245.06 426.73 P
1.85 (parameters with which the token procedure is) 99 414.73 P
8.32 (called. The procedure dependencies are) 99 402.73 P
(deduced from the program parameters.) 99 390.73 T
2.12 (Each program parameter is introduced with a) 99 368.73 P
2.14 (keyword to express the kind of program con-) 99 356.73 P
(struct it represents, as follows:) 99 344.73 T
(1.) 99 322.73 T
3.11 (The keyword) 113.4 322.73 P
3 F
3.11 (EXP) 179.61 322.73 P
1 F
3.11 ( describes a parameter) 199.61 322.73 P
0.18 (that is an expression. The identi\336er following) 113.4 310.73 P
3 F
2.06 (EXP) 113.4 298.73 P
1 F
2.06 ( must be the identi\336cation of a bound) 133.4 298.73 P
1 (token for an expression. The corresponding) 113.4 286.73 P
4.33 (argument to the procedure token, which) 113.4 274.73 P
-0.22 (must be an) 113.4 262.73 P
4 F
-0.22 (assignment-expression) 164.96 262.73 P
1 F
-0.22 (, is con-) 276.6 262.73 P
0.06 (sidered to be a de\336nition of the bound token,) 113.4 250.73 P
5.89 (thereby providing de\336nitions for all the) 113.4 238.73 P
1.22 (dependencies related to that de\336nition. The) 113.4 226.73 P
3.33 (semantics for the de\336nition of expression) 113.4 214.73 P
0.23 (tokens is given in Section 2.6.6. An example) 113.4 202.73 P
0.69 (use is given in Figure) 113.4 190.73 P
0.69 (2.38. Here, the call of) 213.38 190.73 P
3 F
2.22 (dderef) 113.4 178.73 P
1 F
2.22 (, on line 4, with argument) 141.73 178.73 P
3 F
2.22 (c_ptr_ptr) 269.48 178.73 P
1 F
2.22 (,) 308.37 178.73 P
0.08 (causes) 113.4 166.73 P
3 F
0.08 (c_ptr_ptr) 147.92 166.73 P
1 F
0.08 ( to be treated as a de\336nition) 187.35 166.73 P
0.77 (of) 113.4 154.73 P
3 F
0.77 (e) 125.29 154.73 P
1 F
0.77 (. The consequential assignment conver-) 130.85 154.73 P
2.64 (sion, using) 113.4 142.73 P
3 F
2.64 (assignment resolution) 169.23 142.73 P
1 F
2.64 ( \050Section) 269.07 142.73 P
4.53 (2.8.8.1\051, causes) 113.4 130.73 P
3 F
4.53 (\050t) 196.36 130.73 P
4.53 (**\051) 205.24 130.73 P
1 F
4.53 ( to be resolved to) 216.35 130.73 P
3 F
1.94 (\050char) 113.4 118.73 P
1.94 (**\051) 138.95 118.73 P
1 F
1.94 ( which in turn causes the depend-) 150.05 118.73 P
0.69 (ency) 113.4 106.73 P
3 F
0.69 ( t,) 134.51 106.73 P
1 F
0.69 ( to be de\336ned as) 143.53 106.73 P
3 F
0.69 (char) 223.66 106.73 P
1 F
0.69 (. This de\336nition) 242.55 106.73 P
3.09 (of) 343.55 443.73 P
3 F
3.09 (t) 357.75 443.73 P
1 F
3.09 ( also provides the type of expression) 360.53 443.73 P
1.75 (obtained from the application of the proce-) 343.55 431.73 P
(dure token.) 343.55 419.73 T
(2.) 329.15 397.73 T
6.21 (The keyword) 343.55 397.73 P
3 F
6.21 (ST) 415.95 397.73 P
6.21 (A) 427.98 397.73 P
6.21 (TEMENT) 433.91 397.73 P
1 F
6.21 ( describes a) 475 397.73 P
0.65 (parameter that is a statement. Its semantics) 343.55 385.73 P
(correspond directly to those of) 343.55 373.73 T
3 F
(EXP) 480.2 373.73 T
1 F
(.) 498.91 373.73 T
(3.) 329.15 351.73 T
1.89 (The keyword) 343.55 351.73 P
3 F
1.89 (TYPE) 407.32 351.73 P
1 F
1.89 ( describes a parameter) 433.42 351.73 P
1.2 (that is a type. The corresponding argument) 343.55 339.73 P
-0.24 (must be a) 343.55 327.73 P
4 F
-0.24 (type-name) 389.5 327.73 P
1 F
-0.24 (. The parameter type is) 439.48 327.73 P
2.54 (resolved to the argument type in order to) 343.55 315.73 P
1 (de\336ne any related dependencies. An exam-) 343.55 303.73 P
5.79 (ple of a) 343.55 291.73 P
3 F
5.79 (TYPE) 396.48 291.73 P
1 F
5.79 ( parameter is given in) 422.59 291.73 P
0.55 (Figure) 343.55 279.73 P
0.55 (2.39. The \336rst argument of the call of) 374.65 279.73 P
4.44 (the procedure token) 343.55 267.73 P
3 F
4.44 (convert) 448.53 267.73 P
1 F
4.44 ( causes the) 481.31 267.73 P
0.55 (bound token) 343.55 255.73 P
3 F
0.55 (v2) 402.43 255.73 P
1 F
0.55 (, by) 412.99 255.73 P
3 F
0.55 ( resolution) 429.65 255.73 P
1 F
0.55 (, to be de\336ned) 476.3 255.73 P
1.27 (as) 343.55 243.73 P
3 F
1.27 (long) 358.15 243.73 P
1 F
1.27 (. The second argument causes) 377.04 243.73 P
3 F
1.27 (e) 523.36 243.73 P
1 F
1.27 ( to) 528.92 243.73 P
-0.12 (be de\336ned as) 343.55 231.73 P
3 F
-0.12 (c) 405.98 231.73 P
1 F
-0.12 ( and) 410.98 231.73 P
3 F
-0.12 (v1) 432.98 231.73 P
1 F
-0.12 ( to be de\336ned as) 443.53 231.73 P
3 F
-0.12 ( char) 516.97 231.73 P
1 F
-0.12 (.) 538.52 231.73 P
(4.) 329.15 209.73 T
0.12 (The keyword) 343.55 209.73 P
3 F
0.12 (MEMBER) 403.77 209.73 P
1 F
0.12 ( describes a member) 447.64 209.73 P
2.56 (selector parameter) 343.55 197.73 P
2.56 (. The) 428.87 197.73 P
4 F
2.56 (type-name) 459.54 197.73 P
1 F
2.56 ( is the) 509.52 197.73 P
7 (composite type to which the member) 343.55 185.73 P
1.85 (belongs, and the) 343.55 173.73 P
3 F
1.85 (identi\336er) 425.77 173.73 P
1 F
1.85 (is the identi\336ca-) 468.17 173.73 P
1.98 (tion of the member of that composite type) 343.55 161.73 P
0.48 (that is to be de\336ned by the argument \050which) 343.55 149.73 P
3.59 (must be a) 343.55 137.73 P
3 F
3.59 ( member) 394.62 137.73 P
3.59 (-designator) 437.46 137.73 P
1 F
3.59 (\051. A typical) 487.45 137.73 P
2.66 (example is) 343.55 125.73 P
3 F
2.66 (offsetof) 399.42 125.73 P
1 F
2.66 (, shown in Figure) 432.2 125.73 P
2.66 (2.40.) 519.07 125.73 P
3.11 (The argument) 343.55 113.73 P
3 F
3.11 (struct) 414.75 113.73 P
3.11 (s) 441.97 113.73 P
1 F
3.11 (, de\336nes the bound) 446.97 113.73 P
1.27 (type token) 343.55 101.73 P
3 F
1.27 (s) 394.97 101.73 P
1 F
1.27 (, The argument) 399.97 101.73 P
3 F
1.27 (st.i) 474.32 101.73 P
1 F
1.27 ( de\336nes the) 487.09 101.73 P
99 612.4 540 715.9 R
7 X
V
5 F
0 X
(#pragma token PROC{TYPE t,EXP rvalue:t**:e|EXP e}EXP rvalue:t:dderef#) 106.2 697.23 T
(char f\050char **c_ptr_ptr\051{) 106.2 673.23 T
(return dderef\050c_ptr_ptr\051;) 117 661.23 T
(/*line 4*/) 432 661.23 T
(}) 117 649.23 T
0 F
(Figure 2.38) 300.31 625.23 T
99 612.4 540 715.9 R
0.5 H
2 Z
N
99 477.4 540 589.9 R
7 X
V
5 F
0 X
(#pragma token PROC{VARIETY v1,VARIETY v2,EXP rvalue:v1:e|TYPE v2,EXP e}\134) 106.2 571.23 T
(EXP rvalue:v2: convert#) 225 559.23 T
(long f\050char c\051{) 106.2 535.23 T
(return convert\050long,c\051;) 117 523.23 T
(/*line 5*/) 432 523.23 T
(}) 117 511.23 T
0 F
(Figure 2.39) 300.31 487.23 T
99 477.4 540 589.9 R
N
FMENDPAGE
%%EndPage: "30" 31
%%Page: "31" 31
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(31) 519.89 755.24 T
5.56 (member selector) 113.4 272.73 P
3 F
5.56 (s.m) 201.71 272.73 P
1 F
5.56 (. The type) 217.81 272.73 P
3 F
5.56 ( s) 273.37 272.73 P
1 F
5.56 ( has) 286.7 272.73 P
-0.08 (already been de\336ned by the \336rst argument to) 113.4 260.73 P
4.22 (be) 113.4 248.73 P
3 F
4.22 (struct) 131.51 248.73 P
4.22 (s) 158.72 248.73 P
1 F
4.22 (. In consequence, the second) 163.72 248.73 P
0.09 (argument,) 113.4 236.73 P
3 F
0.09 (st.i) 161.26 236.73 P
1 F
0.09 (, which de\336nes the selector) 174.04 236.73 P
0.09 (,) 294.4 236.73 P
3 F
0.09 (m) 300.04 236.73 P
1 F
0.09 (,) 308.37 236.73 P
2.1 (of type) 113.4 224.73 P
3 F
2.1 (s) 150.38 224.73 P
1 F
2.1 (, is the selector) 155.37 224.73 P
3 F
2.1 (st.i) 233.76 224.73 P
1 F
2.1 ( of) 246.53 224.73 P
3 F
2.1 (struct) 264.61 224.73 P
2.1 (s) 291.83 224.73 P
1 F
2.1 (. A) 296.83 224.73 P
-0.05 (side-ef) 113.4 212.73 P
-0.05 (fect of the de\336ning of the selector) 143.21 212.73 P
3 F
-0.05 (m) 292.88 212.73 P
1 F
-0.05 ( is) 301.2 212.73 P
0.12 (the de\336ning, by resolution, of the type) 113.4 200.73 P
3 F
0.12 (t) 283.13 200.73 P
1 F
0.12 ( to be) 285.9 200.73 P
3 F
(int) 113.4 188.73 T
1 F
(.) 123.95 188.73 T
(5.) 99 166.73 T
1.45 (The keyword) 113.4 166.73 P
3 F
1.45 (PROC) 176.28 166.73 P
1 F
1.45 ( describes a procedure) 205.15 166.73 P
1.76 (token parameter) 113.4 154.73 P
1.76 (. This has not been imple-) 187.38 154.73 P
(mented yet.) 113.4 142.73 T
0 F
(2.10.2) 329.15 272.73 T
(Simple procedure tokens) 365.15 272.73 T
1 F
1.66 (The example in Figure) 329.15 255.73 P
1.66 (2.41 is the representa-) 436.33 255.73 P
0.43 (tion, as a procedure token, of the macro) 329.15 243.73 P
3 F
0.43 (SW) 512.04 243.73 P
0.43 (AP) 527.96 243.73 P
1 F
2.21 (de\336ned in Figure) 329.15 231.73 P
2.21 (2.34. The token introduction) 410.78 231.73 P
2.21 (has been laid out to emphasise the similarity) 329.15 219.73 P
3.13 (between the bound tokens and the program) 329.15 207.73 P
(parameters.) 329.15 195.73 T
1.25 (This is such a frequent occurrence that a sim-) 329.15 173.73 P
-0.15 (pler form of the token syntax has been designed) 329.15 161.73 P
6.04 (to cater for it. This syntax is shown in) 329.15 149.73 P
0.09 (Figure) 329.15 137.73 P
0.09 (2.42. The semantics of the simple proce-) 360.25 137.73 P
0.3 (dure syntax is based on that of the general pro-) 329.15 125.73 P
3.66 (cedure syntax, only the) 329.15 113.73 P
3 F
3.66 (simple-token) 449.33 113.73 P
1 F
3.66 ( syntax) 505.98 113.73 P
99 562.9 540 715.9 R
7 X
V
5 F
0 X
(#pragma token VARIETY size_t#) 106.2 697.23 T
(#pragma token PROC{STRUCT s,TYPE t,MEMBER t:s:m|TYPE s,MEMBER s:m}\134) 106.2 685.23 T
(EXP rvalue:size_t:offsetof#) 225 673.23 T
(struct s {char c; struct{long l;int i;} st;};) 106.2 649.23 T
(size_t f\050void\051{) 106.2 625.23 T
(return offsetof\050struct s,st.i\051;) 117 613.23 T
(/*line 8*/) 432 613.23 T
(}) 117 601.23 T
0 F
(Figure 2.40) 300.31 577.23 T
99 562.9 540 715.9 R
0.5 H
2 Z
N
99 463.9 540 544.9 R
7 X
V
5 F
0 X
(#pragma token PROC{TYPE t,EXP lvalue:t:e1,EXP lvalue:t:e2|\134) 106.2 526.23 T
(TYPE t,EXP e1,) 220.14 514.23 T
(EXP e2\134) 358.06 514.23 T
(}STATEMENT SWAP#) 220.14 502.23 T
0 F
(Figure 2.41) 300.31 478.23 T
99 463.9 540 544.9 R
N
99 297.4 540 445.9 R
7 X
V
7 F
0 X
(simple-procedure:) 106.2 427.23 T
6 F
(PROC) 117 415.23 T
(\050) 146.98 415.23 T
7 F
(simp_tok_pars) 158.98 415.23 T
7 8 Q
(opt) 236.93 412.73 T
6 10 Q
(\051) 257.32 415.23 T
7 F
(token-introduction) 269.32 415.23 T
(simp_tok_pars:) 106.2 391.23 T
(simple-token) 117 379.23 T
(simple-token) 117 367.23 T
6 F
(,) 194.96 367.23 T
7 F
(simp_tok_pars) 206.95 367.23 T
(simple-token:) 106.2 343.23 T
(token-introduction name-space) 117 331.23 T
7 8 Q
(opt) 290.9 328.73 T
8 10 Q
(identif) 311.29 331.23 T
(ier) 353.27 331.23 T
7 8 Q
(opt) 371.26 328.73 T
0 10 Q
(Figure 2.42) 300.31 307.23 T
99 297.4 540 445.9 R
N
FMENDPAGE
%%EndPage: "31" 32
%%Page: "32" 32
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(32) 519.89 755.24 T
1.42 (introduces both a bound token and a program) 99 349.23 P
(parameter) 99 337.23 T
(.) 143.99 337.23 T
1.85 (The) 99 315.23 P
3 F
1.85 (simple-token) 120.85 315.23 P
1 F
1.85 ( syntax is almost identical to) 177.49 315.23 P
2.98 (that of the) 99 303.23 P
3 F
2.98 ( bound-token) 149.43 303.23 P
1 F
2.98 ( syntax \050Figure) 210.75 303.23 P
2.98 (2.36\051.) 285.59 303.23 P
3.32 (The bound token, introduced by the) 99 291.23 P
3 F
3.32 (simple-) 278.95 291.23 P
-0.13 (token) 99 279.23 P
1 F
-0.13 (syntax, is de\336ned as if it had been de\336ned) 126.09 279.23 P
0.94 (with a) 99 267.23 P
3 F
0.94 (bound-token) 129.77 267.23 P
1 F
0.94 ( syntax. If the \336nal identi\336er) 185.33 267.23 P
1.03 (is missing, then there must be no name space) 99 255.23 P
0.54 (speci\336ed, and the bound token is not identi\336ed;) 99 243.23 P
2.58 (there is, in ef) 99 231.23 P
2.58 (fect a local hidden identi\336er) 163.79 231.23 P
2.58 (. In) 294.67 231.23 P
0.07 (addition to the bound token, a program parame-) 99 219.23 P
0.78 (ter is also introduced. The generation of bound) 99 207.23 P
2.96 (tokens and program parameters is shown in) 99 195.23 P
3.14 (Figure) 99 183.23 P
3.14 (2.43, with) 130.1 183.23 P
3 F
3.14 (_h) 181.93 183.23 P
1 F
3.14 ( as the hidden identi\336er) 193.04 183.23 P
3.14 (.) 308.37 183.23 P
0.48 (Figure) 99 171.23 P
0.48 (2.44 shows the expression of the) 130.1 171.23 P
3 F
0.48 (SW) 281.89 171.23 P
0.48 (AP) 297.82 171.23 P
1 F
0.48 (procedure token in the new syntax. It can read-) 99 159.23 P
0.2 (ily be shown to be equivalent to the introduction) 99 147.23 P
1.1 (in Figure) 99 135.23 P
1.1 (2.41, with the introduction of two hid-) 141.76 135.23 P
(den identi\336ers for the two expressions.) 99 123.23 T
0 F
(2.10.3) 329.15 349.23 T
(Function procedure tokens) 365.15 349.23 T
1 F
1.9 (One of the commonest uses of simple proce-) 329.15 332.23 P
0.55 (dure tokens is the representation of function in-) 329.15 320.23 P
1.66 (lining. In this case the procedure token repre-) 329.15 308.23 P
0.82 (sents the in-lining of the function with the func-) 329.15 296.23 P
1.77 (tion parameters being the program arguments) 329.15 284.23 P
2.61 (of the procedure token call and the program) 329.15 272.23 P
-0.25 (construct resulting from the call of the procedure) 329.15 260.23 P
2.12 (token being the corresponding in-lining of the) 329.15 248.23 P
1.6 (function. This is a direct parallel to the use of) 329.15 236.23 P
(macros to represent functions.) 329.15 224.23 T
6.24 (An example of such a use is given in) 329.15 202.23 P
0.64 (Figure) 329.15 190.23 P
0.64 (2.45. Since the syntax for the procedure) 360.25 190.23 P
-0.01 (token can be deduced from the type of the func-) 329.15 178.23 P
4.65 (tion, a) 329.15 166.23 P
3 F
4.65 (function-procedure) 368.46 166.23 P
1 F
4.65 ( syntax has been) 451.78 166.23 P
0.55 (designed to take advantage of it. This syntax is) 329.15 154.23 P
1.75 (given in Figure) 329.15 142.23 P
1.75 (2.46 and the representation of) 400.96 142.23 P
0.45 (the example introduced in Figure) 329.15 130.23 P
0.45 (2.45 is shown) 479.28 130.23 P
(in Figure) 329.15 118.23 T
(2.47.) 370.8 118.23 T
99 477.4 540 531.4 R
7 X
V
5 F
0 X
(#pragma token PROC\050TYPE t,EXP lvalue:t:,EXP lvalue:t:\051STATEMENT SWAP#) 106.2 512.73 T
0 F
(Figure 2.44) 300.31 488.73 T
99 477.4 540 531.4 R
0.5 H
2 Z
N
99 549.4 540 715.9 R
7 X
V
6 F
0 X
(SIMPLE-TOKEN) 106.2 697.23 T
(BOUND-TOKEN) 216 697.23 T
(PROGRAM-PARAMETER) 360 697.23 T
5 F
(EXP rv:t:) 106.2 673.23 T
(EXP rv:t:_h) 216 673.23 T
(EXP _h) 360 673.23 T
(STATEMENT) 106.2 661.23 T
(STATEMENT _h) 216 661.23 T
(STATEMENT _h) 360 661.23 T
(TYPE) 106.2 649.23 T
(TYPE _h) 216 649.23 T
(TYPE _h) 360 649.23 T
(VARIETY) 106.2 637.23 T
(VARIETY _h) 216 637.23 T
(TYPE _h) 360 637.23 T
(ARITHMETIC) 106.2 625.23 T
(ARITHMETIC _h) 216 625.23 T
(TYPE _h) 360 625.23 T
(STRUCT) 106.2 613.23 T
(STRUCT _h) 216 613.23 T
(TYPE _h) 360 613.23 T
(UNION) 106.2 601.23 T
(UNION _h) 216 601.23 T
(TYPE _h) 360 601.23 T
(MEMBER t:s:) 106.2 589.23 T
(MEMBER t:s:_h) 216 589.23 T
(MEMBER s:_h) 360 589.23 T
0 F
(Figure 2.43) 300.31 565.23 T
99 549.4 540 715.9 R
N
99 378.4 540 459.4 R
7 X
V
5 F
0 X
(int putchar\050int\051;) 106.2 440.73 T
(#pragma token PROC\050EXP rvalue:int\051EXP rvalue:int:putchar#) 106.2 416.73 T
0 F
(Figure 2.45) 300.31 392.73 T
99 378.4 540 459.4 R
N
FMENDPAGE
%%EndPage: "32" 33
%%Page: "33" 33
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(33) 519.89 755.24 T
1.32 (The) 99 421.23 P
4 F
1.32 (type-name) 120.32 421.23 P
1 F
1.32 ( of the function-procedure syn-) 170.31 421.23 P
1.18 (tax must be a prototyped function type without) 99 409.23 P
-0.06 (an ellipsis. It is used to declare a function of that) 99 397.23 P
2.4 (type with external linkage \050ANSI C Standard,) 99 385.23 P
0.48 (Section 3.1.2.2\051. It is also used to introduce the) 99 373.23 P
1.34 (procedure token suitable for an in-lining of the) 99 361.23 P
0.82 (function. Every parameter type and result type,) 99 349.23 P
(say) 99 337.23 T
3 F
(ty) 117.33 337.23 T
1 F
(, is mapped onto the token introduction) 124.37 337.23 T
5 F
(EXP rvalue:ty) 106.2 315.23 T
0 F
(2.10.4) 99 277.23 T
(De\336ning procedure tokens) 135 277.23 T
1 F
-0.08 (The process of de\336ning of all kinds of procedure) 99 260.23 P
-0.25 (token, i.e. general, simple and function, is identi-) 99 248.23 P
0 (cal. Since simple and function procedure tokens) 99 236.23 P
4.65 (can be transformed into general procedure) 99 224.23 P
0.87 (tokens, the de\336nition will be explained in terms) 99 212.23 P
(of general procedure tokens.) 99 200.23 T
1.74 (As mentioned in Section 2.10.1, currently it is) 99 178.23 P
1.32 (only possible to parameterise expressions and) 99 166.23 P
2.12 (statements. The syntax for such de\336nitions is) 99 154.23 P
3.32 (given in Figure) 99 142.23 P
3.32 (2.48 and is based upon the) 173.97 142.23 P
4.02 (standard parameterised macro de\336nition. As) 99 130.23 P
2.58 (with the de\336nitions of expressions and state-) 99 118.23 P
1.1 (ments \050Section 2.6.6 and Section 2.7.3\051, these) 99 106.23 P
1.1 (de\336nitions are evaluated in phase 7 of transla-) 329.15 421.23 P
(tion, not phase 4.) 329.15 409.23 T
1.27 (The) 329.15 387.23 P
3 F
1.27 (id-list) 350.41 387.23 P
1 F
1.27 ( must directly correspond to the pro-) 373.73 387.23 P
1.84 (gram arguments of the procedure token intro-) 329.15 375.23 P
2.29 (duction. That is, there must be precisely one) 329.15 363.23 P
3.43 (identi\336er for each program argument. These) 329.15 351.23 P
4.25 (identi\336ers are used to identify the program) 329.15 339.23 P
6.32 (parameters of the procedure token being) 329.15 327.23 P
-0.17 (de\336ned and consequently have a scope that ter-) 329.15 315.23 P
0.62 (minates at the end of the procedure token de\336-) 329.15 303.23 P
1.5 (nition. The identi\336ers are placed in the default) 329.15 291.23 P
0.07 (name spaces for the kinds of program construc-) 329.15 279.23 P
3.51 (tion being identi\336ed. For example types are) 329.15 267.23 P
0.55 (placed in the) 329.15 255.23 P
3 F
0.55 (ordinary) 390.24 255.23 P
1 F
0.55 ( name space and expres-) 426.34 255.23 P
(sions in the) 329.15 243.23 T
3 F
(macro) 382.48 243.23 T
1 F
( name space.) 410.24 243.23 T
0.89 (During the evaluation of the de\336nition of a pro-) 329.15 221.23 P
0.22 (cedure token, none of the bound token depend-) 329.15 209.23 P
1.84 (encies can be de\336ned, since these de\336nitions) 329.15 197.23 P
0.64 (are ef) 329.15 185.23 P
0.64 (fectively provided at every call of the pro-) 355.17 185.23 P
(cedure token by its arguments.) 329.15 173.23 T
1.85 (T) 329.15 151.23 P
1.85 (o illustrate how this operates re-consider the) 334.14 151.23 P
3 F
0.73 (dderef) 329.15 139.23 P
1 F
0.73 ( example in Figure) 357.48 139.23 P
0.73 (2.38 and its de\336nition) 444.66 139.23 P
0.55 (in Figure) 329.15 127.23 P
0.55 (2.49. The identi\336ers) 371.35 127.23 P
3 F
0.55 (t) 463.55 127.23 P
1 F
0.55 ( and) 466.33 127.23 P
3 F
0.55 (e) 489.65 127.23 P
1 F
0.55 ( are not in) 495.21 127.23 P
1.57 (scope during the de\336nition, being merely local) 329.15 115.23 P
0.63 (identi\336ers for use in the token introduction. The) 329.15 103.23 P
99 652.9 540 715.9 R
7 X
V
7 F
0 X
(function-procedure:) 106.2 697.23 T
6 F
(FUNC) 117 685.23 T
8 F
(type-name) 146.98 685.23 T
6 F
(:) 206.95 685.23 T
0 F
(Figure 2.46) 300.31 661.23 T
99 652.9 540 715.9 R
0.5 H
2 Z
N
99 576.4 540 634.9 R
7 X
V
5 F
0 X
(#pragma token FUNC int\050int\051: putchar#) 106.2 616.23 T
0 F
(Figure 2.47) 300.31 592.23 T
99 576.4 540 634.9 R
N
99 445.9 540 558.4 R
7 X
V
6 F
0 X
(#def) 106.2 539.73 T
(ine) 130.19 539.73 T
8 F
(identif) 154.17 539.73 T
(ier) 196.15 539.73 T
6 F
(\050) 214.14 539.73 T
7 F
(id-list) 226.13 539.73 T
7 8 Q
(opt) 268.11 537.23 T
6 10 Q
(\051) 288.5 539.73 T
8 F
(assignment-expression) 300.49 539.73 T
6 F
(#def) 106.2 527.73 T
(ine) 130.19 527.73 T
8 F
(identif) 154.17 527.73 T
(ier) 196.15 527.73 T
6 F
(\050) 214.14 527.73 T
7 F
(id-list) 226.13 527.73 T
7 8 Q
(opt) 268.11 525.23 T
6 10 Q
(\051) 288.5 527.73 T
8 F
(statement) 300.49 527.73 T
7 F
(id-list:) 106.2 503.73 T
8 F
(identif) 117 491.73 T
(ier) 158.98 491.73 T
(identif) 117 479.73 T
(ier) 158.98 479.73 T
7 F
( id-list) 176.97 479.73 T
0 F
(Figure 2.48) 300.31 455.73 T
99 445.9 540 558.4 R
N
FMENDPAGE
%%EndPage: "33" 34
%%Page: "34" 34
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(34) 519.89 755.24 T
3.19 (only identi\336er in scope is) 99 241.23 P
3 F
3.19 (A) 226.59 241.23 P
1 F
3.19 (.) 233.25 241.23 P
3 F
3.19 (A) 242 241.23 P
1 F
3.19 ( identi\336es an) 248.66 241.23 P
0.15 (expression token which is an rvalue whose type) 99 229.23 P
1.94 (is a pointer to a pointer to a type token. The) 99 217.23 P
1.97 (expression token and the type token are pro-) 99 205.23 P
(vided by the arguments at the call.) 99 193.23 T
2.69 (A more complex example is the de\336nition of) 99 171.23 P
3 F
0.78 (st_sizeof) 99 159.23 P
1 F
0.78 ( in Figure) 138.44 159.23 P
0.78 (2.50. It is based on) 184.44 159.23 P
3 F
0.78 (offsetof) 275.59 159.23 P
1 F
0.78 (,) 308.37 159.23 P
0 (Figure) 99 147.23 P
0 (2.40,but has a nicer de\336nition. Here, dur-) 130.1 147.23 P
1.89 (ing the de\336nition, the only identi\336ers in scope) 99 135.23 P
1 (are) 99 123.23 P
3 F
1 (T) 117.21 123.23 P
1 F
1 ( and) 123.32 123.23 P
3 F
1 (M) 147.54 123.23 P
1 F
1 (.) 155.87 123.23 P
3 F
1 (T) 162.42 123.23 P
1 F
1 ( is an identi\336er for a compound) 168.52 123.23 P
0.34 (type token.) 99 111.23 P
3 F
0.34 ( M) 148.23 111.23 P
1 F
0.34 ( identi\336es a token selector for that) 159.68 111.23 P
0.64 (compound type, selecting a member which has) 99 99.23 P
1.59 (whose type is a type token. The de\336nitions of) 328.5 241.23 P
1.42 (these tokens are, once again, provided by the) 328.5 229.23 P
(parameters.) 328.5 217.23 T
2.77 (As a \336nal example consider the de\336nition of) 328.5 195.23 P
3 F
0.76 (SW) 328.5 183.23 P
0.76 (AP) 344.42 183.23 P
1 F
0.76 ( in Figure) 357.75 183.23 P
0.76 (2.51. The de\336nition is straight-) 403.72 183.23 P
0.27 (forward enough, and so is the application of the) 328.5 171.23 P
2.14 (procedure token. However) 328.5 159.23 P
2.14 (, if this is not com-) 449.43 159.23 P
2.45 (piled in the presence of the procedure token) 328.5 147.23 P
0.1 (introduction, which separates the de\336nition from) 328.5 135.23 P
0.05 (the use of the token, but is treated as a straight-) 328.5 123.23 P
1.9 (forward macro, the swap does not take place) 328.5 111.23 P
0.82 (because the parameter) 328.5 99.23 P
3 F
0.82 (x) 436.52 99.23 P
1 F
0.82 ( becomes a reference) 441.52 99.23 P
99 652.9 540 733.9 R
7 X
V
5 F
0 X
(#pragma token PROC{TYPE t,EXP rvalue:t**:e|EXP e}EXP rvalue:t:dderef#) 106.2 715.23 T
(#def) 106.2 691.23 T
(ine dderef\050A\051**A) 130.19 691.23 T
0 F
(Figure 2.49) 300.31 667.23 T
99 652.9 540 733.9 R
0.5 H
2 Z
N
99 531.4 540 634.9 R
7 X
V
5 F
0 X
(#pragma token VARIETY size_t#) 106.2 616.23 T
(#pragma token PROC{STRUCT s,TYPE t,MEMBER t:s:m|TYPE s,MEMBER s:m|\134) 106.2 604.23 T
(EXP rvalue:size_t:st_sizeof#) 225 592.23 T
(#def) 106.2 568.23 T
(ine st_sizeof\050T,M\051 sizeof\050 \050T *\051\050NULL\051-> M\051) 130.19 568.23 T
0 F
(Figure 2.50) 300.31 544.23 T
99 531.4 540 634.9 R
N
99 360.4 540 513.4 R
7 X
V
5 F
0 X
(#pragma token PROC\050TYPE t,EXP lvalue:t:,EXP lvalue:t:\051STATEMENT SWAP#) 106.2 494.73 T
(#def) 106.2 470.73 T
(ine SWAP\050T,A,B\051{T x; x=B;B=A;A=x;}) 130.19 470.73 T
(void f\050int x,int y\051{) 106.2 446.73 T
(SWAP\050int,x,y\051) 117 434.73 T
(}) 117 422.73 T
(/*WITHOUT THE PROCEDURE TOKEN --- {int x; x=y;y=x;x=x;} oops!!!*/) 106.2 398.73 T
0 F
(Figure 2.51) 300.31 374.73 T
99 360.4 540 513.4 R
N
99 265.9 540 346.9 R
7 X
V
5 F
0 X
(#pragma token FUNC int\050int, long\051:func#) 106.2 328.23 T
(#def) 106.2 304.23 T
(ine func\050A,B\051\050func\051\050A,B\051) 130.19 304.23 T
(/*tentative def) 274.11 304.23 T
(inition*/) 364.06 304.23 T
0 F
(Figure 2.52) 300.31 280.23 T
99 265.9 540 346.9 R
N
FMENDPAGE
%%EndPage: "34" 35
%%Page: "35" 35
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(35) 519.89 755.24 T
0.63 (to the variable in the inner scope. Furthermore,) 99 506.73 P
5.55 (many conventional C compilers would not) 99 494.73 P
1.5 (notice that there was anything wrong with this) 99 482.73 P
(particular application \050because there isn\325t!\051.) 99 470.73 T
0 F
(2.10.4.1) 99 444.73 T
(Implicit de\336nition of function tokens) 138.89 444.73 T
1 F
1.66 (Whenever a function procedure token is intro-) 99 427.73 P
1.1 (duced, it has a tentative implicit de\336nition. The) 99 415.73 P
2.67 (tentative de\336nition is to de\336ne the procedure) 99 403.73 P
0.71 (token as a direct call of the function, ef) 99 391.73 P
0.71 (fectively) 275.05 391.73 P
(removing the in-lining capability) 99 379.73 T
(.) 237.67 379.73 T
0.61 (If at any point after the introduction of the func-) 99 357.73 P
0.86 (tion procedure token, there is a genuine de\336ni-) 99 345.73 P
3.97 (tion, it overrides the tentative de\336nition. An) 99 333.73 P
2.45 (example of the tentative de\336nition for) 99 321.73 P
3 F
2.45 (func) 279.81 321.73 P
1 F
2.45 ( is) 298.7 321.73 P
(given in Figure) 99 309.73 T
(2.52.) 167.32 309.73 T
99 274.4 311.15 284.4 C
99 283.4 567 283.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 250.4 311.15 260.4 C
99 259.4 567 259.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.1) 99 265.07 T
(1) 117.68 265.07 T
(T) 135 265.07 T
(oken de\336nition states) 142.51 265.07 T
1 10 Q
1.31 (Associated with every token is a set of states.) 99 233.73 P
1.42 (These states determine what the action of the) 99 221.73 P
0.47 (compiler is in the presence/absence of a de\336ni-) 99 209.73 P
(tion of a token. The states are as follows:) 99 197.73 T
(1.) 99 175.73 T
3 F
2.46 (De\336ned) 113.4 175.73 P
1 F
2.46 ( - the token has a valid de\336nition.) 147.84 175.73 P
1.58 (Any further attempt to de\336ne the token will) 113.4 163.73 P
1.35 (cause the compiler to exit with a constraint) 113.4 151.73 P
4.35 (error) 113.4 139.73 P
4.35 (. This prevents a token from being) 133.95 139.73 P
(de\336ned twice.) 113.4 127.73 T
(2.) 329.15 506.73 T
3 F
0.39 (Inde\336nable) 343.55 506.73 P
1 F
0.39 ( - the token has not been de\336ned) 392.44 506.73 P
1.19 (and must not be de\336ned. This prevents the) 343.55 494.73 P
1.74 (de\336nition of a token, any attempt to de\336ne) 343.55 482.73 P
0.42 (the token will cause the compiler to exit with) 343.55 470.73 P
0.9 (a constraint error) 343.55 458.73 P
0.9 (. It is not possible to move) 420.34 458.73 P
(from the state of) 343.55 446.73 T
3 F
(de\336ned) 418.55 446.73 T
1 F
( to) 451.33 446.73 T
3 F
(inde\336nable) 465.22 446.73 T
1 F
(.) 513.55 446.73 T
(3.) 329.15 424.73 T
3 F
0.71 (Committed) 343.55 424.73 P
1 F
0.71 ( - the token must be de\336ned dur-) 391.86 424.73 P
0.18 (ing the compilation of the program otherwise) 343.55 412.73 P
(the compiler exits with a constraint error) 343.55 400.73 T
(.) 519.62 400.73 T
(4.) 329.15 378.73 T
3 F
0.34 (Ignored) 343.55 378.73 P
1 F
0.34 ( - any de\336nition of the token that has) 377.44 378.73 P
0.74 (been assigned during the compilation of the) 343.55 366.73 P
(program will not be output as TDF) 343.55 354.73 T
(.) 492.97 354.73 T
(5.) 329.15 332.73 T
3 F
2.38 (Free) 343.55 332.73 P
1 F
2.38 ( - non of the above states apply) 364.1 332.73 P
2.38 (, the) 519.47 332.73 P
0.18 (token can be left de\336ned or unde\336ned. If it is) 343.55 320.73 P
1.58 (de\336ned then the de\336nition will be output to) 343.55 308.73 P
(TDF) 343.55 296.73 T
(.) 361.87 296.73 T
1.73 (The purpose of these states is to enable pro-) 329.15 274.73 P
0.63 (grammers to instruct the compiler to check that) 329.15 262.73 P
2.05 (tokens are de\336ned when and only when they) 329.15 250.73 P
-0.13 (want them to be. This is critical in the separation) 329.15 238.73 P
2.4 (of program into portable and unportable soft-) 329.15 226.73 P
0.55 (ware. Programmers of applications do not want) 329.15 214.73 P
0.39 (to accidentally de\336ne a token that is expressing) 329.15 202.73 P
1.94 (an API. Implementors of APIs do not want to) 329.15 190.73 P
2.03 (inadvertently fail to de\336ne a token expressing) 329.15 178.73 P
2.05 (that API. At their point of introduction, tokens) 329.15 166.73 P
(are in the) 329.15 154.73 T
3 F
(free) 373.59 154.73 T
1 F
( state.) 390.81 154.73 T
1.03 (There are a collection of pragma which control) 329.15 132.73 P
1.38 (the state of a token. These pragmas have the) 329.15 120.73 P
0.18 (syntax shown Figure) 329.15 108.73 P
0.18 (2.53. The syntax for) 423.93 108.73 P
3 F
0.18 (mem-) 515.76 108.73 P
(ber) 329.15 96.73 T
(-designator) 343.41 96.73 T
1 F
( is given in Figure) 393.4 96.73 T
(2.31.) 474.5 96.73 T
99 535.9 544.5 733.9 R
7 X
V
6 F
0 X
(# pragma) 106.2 715.23 T
7 F
(token-op token-id-list) 160.17 715.23 T
7 8 Q
(opt) 292.1 712.73 T
7 10 Q
(token-id-list:) 106.2 691.23 T
6 F
(TAG) 117 679.23 T
7 8 Q
(opt) 134.99 676.73 T
8 10 Q
(identif) 155.38 679.23 T
(ier) 197.36 679.23 T
7 F
( dot-list) 215.35 679.23 T
7 8 Q
(opt) 269.32 676.73 T
7 10 Q
( token-id-list) 283.71 679.23 T
7 8 Q
(opt) 367.66 676.73 T
7 10 Q
(dot-list:) 106.2 655.23 T
6 F
(.) 117 643.23 T
7 F
(member-designator) 128.99 643.23 T
(token-op:) 106.2 619.23 T
6 F
(def) 117 607.23 T
(ine) 134.99 607.23 T
(no_def) 117 595.23 T
(ignore) 117 583.23 T
(interface) 117 571.23 T
0 F
(Figure 2.53) 302.56 547.23 T
99 535.9 544.5 733.9 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "35" 36
%%Page: "36" 36
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(36) 519.89 755.24 T
0.3 (The) 99 637.23 P
3 F
0.3 (token-op) 119.3 637.23 P
1 F
0.3 ( is the operation to be applied to a) 158.19 637.23 P
0.18 (token and the) 99 625.23 P
3 F
0.18 (token-id-list) 162.88 625.23 P
1 F
0.18 ( is the list of tokens to) 213.97 625.23 P
(which the operation is to be applied.) 99 613.23 T
1.18 (The tokens in the) 99 591.23 P
3 F
1.18 (token-id-list) 183.18 591.23 P
1 F
1.18 ( are identi\336ed by) 234.27 591.23 P
1.66 (the) 99 579.23 P
4 F
1.66 (identi\336er) 117.33 579.23 P
1 F
1.66 (, which is optionally preceded by) 158.99 579.23 P
0 F
-0.21 (T) 99 567.23 P
-0.21 (AG) 104.37 567.23 P
1 F
-0.21 (. If) 119.36 567.23 P
0 F
-0.21 (T) 132.83 567.23 P
-0.21 (AG) 138.2 567.23 P
1 F
-0.21 ( is present the identi\336er refers to the) 153.19 567.23 P
3 F
0.87 (tag) 99 555.23 P
1 F
0.87 ( name space otherwise the) 112.89 555.23 P
3 F
0.87 (macro) 239.43 555.23 P
1 F
0.87 ( and) 267.2 555.23 P
3 F
0.87 (ordi-) 291.16 555.23 P
1.18 (nary) 99 543.23 P
1 F
1.18 ( name spaces are searched for the identi-) 118.44 543.23 P
1.24 (\336er) 99 531.23 P
1.24 (. If there is no) 112.33 531.23 P
3 F
1.24 (dot-list) 181.88 531.23 P
1 F
1.24 ( present, the identi\336er) 211.31 531.23 P
0.79 (must identify a token, otherwise it must identify) 99 519.23 P
1.17 (a compound type. If there is a) 99 507.23 P
3 F
1.17 (dot-list) 241.65 507.23 P
1 F
1.17 ( present,) 271.09 507.23 P
3.88 (then the member-designator must identify a) 99 495.23 P
3.42 (member selector token \050Section 2.9\051 of that) 99 483.23 P
(compound type.) 99 471.23 T
0 F
(2.1) 99 445.23 T
(1.1) 112.34 445.23 T
(The token operators) 135 445.23 T
1 F
0.78 (There are three literal token operators and one) 99 428.23 P
(context dependent token operators.) 99 416.23 T
(The three literal token operators are:) 99 394.23 T
(1.) 99 372.23 T
0.18 (The token operator) 113.4 372.23 P
3 F
0.18 (de\336ne) 201.16 372.23 P
1 F
0.18 (, which causes the) 228.39 372.23 P
(state of a token to move to) 113.4 360.23 T
3 F
(committed) 233.96 360.23 T
1 F
(.) 280.06 360.23 T
(2.) 99 338.23 T
2.88 (The token operator) 113.4 338.23 P
3 F
2.88 (no_def) 209.27 338.23 P
1 F
2.88 (, which causes) 239.84 338.23 P
(the state of the token to move to) 113.4 326.23 T
3 F
(inde\336nable) 258.97 326.23 T
1 F
(.) 307.3 326.23 T
(3.) 99 304.23 T
0.09 (The token operator) 113.4 304.23 P
3 F
0.09 (ignore) 200.89 304.23 P
1 F
0.09 (, which causes the) 228.66 304.23 P
(state of the token to move to) 113.4 292.23 T
3 F
(ignored) 242.3 292.23 T
1 F
(.) 275.63 292.23 T
3.76 (The context dependent operator is) 99 270.23 P
3 F
3.76 (interface) 272.82 270.23 P
1 F
3.05 (which is designed speci\336cally with APIs and) 99 258.23 P
(interfaces in mind.) 99 246.23 T
0 F
(2.1) 99 220.23 T
(1.2) 112.34 220.23 T
(The interface operators) 135 220.23 T
1 F
1.57 (Interfaces are collections of tokens that repre-) 99 203.23 P
0.31 (sent the program constructs of APIs. For exam-) 99 191.23 P
-0.08 (ple) 99 179.23 P
3 F
-0.08 (FILE) 115.03 179.23 P
1 F
-0.08 ( and) 136.14 179.23 P
3 F
-0.08 (stderr) 158.21 179.23 P
1 F
-0.08 ( of Figure) 183.76 179.23 P
-0.08 (2.1 can be thought) 228.59 179.23 P
2.85 (of interface tokens for the ANSI C Standard) 99 167.23 P
3 F
(<stdio.h>) 99 155.23 T
1 F
( interface/API.) 140.12 155.23 T
1.34 (There are three uses of interface tokens intro-) 99 133.23 P
(ductions:) 99 121.23 T
(1.) 329.15 637.23 T
0.48 (They are used to by applications that do not) 343.55 637.23 P
0.24 (wish to assume any knowledge of the imple-) 343.55 625.23 P
2.22 (mentation of the interface/API. The tokens) 343.55 613.23 P
(need to be in the) 343.55 601.23 T
3 F
(inde\336nable) 420.79 601.23 T
1 F
( state.) 469.12 601.23 T
(2.) 329.15 579.23 T
0.4 (They are used to provide the de\336ning imple-) 343.55 579.23 P
1.76 (mentations of the tokens forming the inter-) 343.55 567.23 P
6.66 (face. The tokens need to be in the) 343.55 555.23 P
3 F
(committed) 343.55 543.23 T
1 F
( state.) 389.64 543.23 T
(3.) 329.15 521.23 T
3.17 (They are used in the construction of the) 343.55 521.23 P
0.28 (tokens of other interfaces. A typical example) 343.55 509.23 P
0.37 (is that the) 343.55 497.23 P
3 F
0.37 (<stdio.h>) 390.76 497.23 P
1 F
0.37 ( of POSIX \050Ref [2]\051 is an) 431.88 497.23 P
0.55 (extension of) 343.55 485.23 P
3 F
0.55 (<stdio.h>) 401.32 485.23 P
1 F
0.55 ( of the ANSI C Stand-) 442.44 485.23 P
1.11 (ard and uses the same tokens to represent) 343.55 473.23 P
3.7 (the common part of the interface. When) 343.55 461.23 P
0.09 (using, within an application, the ANSI tokens) 343.55 449.23 P
0 (of) 343.55 437.23 P
3 F
0 (<stdio.h>) 354.66 437.23 P
1 F
0 ( via the POSIX API for <stdio.h>:) 395.77 437.23 P
0.27 (the tokens must be in a state of) 343.55 425.23 P
3 F
0.27 (inde\336neabil-) 487.42 425.23 P
0.79 (ity) 343.55 413.23 P
1 F
0.79 ( since nothing can be assumed about the) 353.54 413.23 P
2.4 (implementation of the POSIX or the ANSI) 343.55 401.23 P
0.28 (implementations. However) 343.55 389.23 P
0.28 (, when the POSIX) 461.02 389.23 P
3.66 (tokens are being implemented, the ANSI) 343.55 377.23 P
0.11 (implementations can be assumed and there-) 343.55 365.23 P
1.2 (fore the tokens can be accordingly de\336ned,) 343.55 353.23 P
1.29 (but, the implementation of the ANSI tokens) 343.55 341.23 P
2.3 (must not output the de\336nitions as this will) 343.55 329.23 P
0.41 (already have taken place as part of the de\336-) 343.55 317.23 P
3.61 (nition of the ANSI API: in this case the) 343.55 305.23 P
(tokens are in an) 343.55 293.23 T
3 F
(ignored) 417.44 293.23 T
1 F
( state.) 450.77 293.23 T
0.06 (Associated with each \336le that is compiled by the) 329.15 271.23 P
0.39 (compiler is one of three compilation states. The) 329.15 259.23 P
1.79 (compilation state determines the interpretation) 329.15 247.23 P
-0.25 (of the) 329.15 235.23 P
3 F
-0.25 (interface) 356.44 235.23 P
1 F
-0.25 ( token operator) 394.77 235.23 P
-0.25 (. The three compi-) 460.94 235.23 P
(lation states are:) 329.15 223.23 T
(1.) 329.15 201.23 T
3 F
-0.08 (Standard) 343.55 201.23 P
1 F
-0.08 ( - This is the initial compilation state) 384.11 201.23 P
1.57 (and the) 343.55 189.23 P
3 F
1.57 (interface) 382.81 189.23 P
1 F
1.57 ( operator is interpreted as) 421.14 189.23 P
1.02 (the) 343.55 177.23 P
3 F
1.02 (no_def) 361.24 177.23 P
1 F
1.02 ( operator) 391.81 177.23 P
1.02 (. It is the standard state) 432.28 177.23 P
3.7 (for the compilation of applications in the) 343.55 165.23 P
(presences of APIs) 343.55 153.23 T
(2.) 329.15 131.23 T
3 F
1.94 (Implementation) 343.55 131.23 P
1 F
1.94 ( - In this state the) 411.87 131.23 P
3 F
1.94 (interface) 502.97 131.23 P
1 F
1.38 (operator is interpreted as the de\336ne opera-) 343.55 119.23 P
-0.21 (tor) 343.55 107.23 P
-0.21 (. It is the state for de\336ning the components) 354.66 107.23 P
(of an API.) 343.55 95.23 T
99 666.4 540 733.9 R
7 X
V
6 F
0 X
(# pragma implement interface) 106.2 715.23 T
7 F
(header) 280.1 715.23 T
6 F
(# pragma extend interface) 106.2 703.23 T
7 F
(header) 262.11 703.23 T
0 F
(Figure 2.54) 300.31 679.23 T
99 666.4 540 733.9 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "36" 37
%%Page: "37" 37
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(37) 519.89 755.24 T
(3.) 99 709.23 T
3 F
0.63 (Extension) 113.4 709.23 P
1 F
0.63 ( - In this state the) 157.29 709.23 P
3 F
0.63 (interface) 240.52 709.23 P
1 F
0.63 ( opera-) 278.85 709.23 P
0.79 (tor is interpreted as the ignore operator and) 113.4 697.23 P
0 (it is the state for the compilation of interfaces) 113.4 685.23 P
2.22 (that are used as the basis for other inter-) 113.4 673.23 P
(faces.) 113.4 661.23 T
2.53 (The compilation state is changed by the two) 99 639.23 P
0 (pragmas shown in Figure) 99 627.23 P
0 (2.54. These two prag-) 213.95 627.23 P
(mas behave in an identical fashion to) 99 615.23 T
6 F
(# include) 106.2 593.23 T
7 F
(header) 166.17 593.23 T
1 F
0.15 (but they potentially alter the compilation state of) 99 569.23 P
0.23 (the \336le being included. The syntax class) 99 557.23 P
3 F
0.23 (header) 280.04 557.23 P
1 F
1.29 (corresponds to any valid set of pre-processing) 99 545.23 P
(tokens after) 99 533.23 T
0 F
( # include) 151.22 533.23 T
1 F
(.) 197.33 533.23 T
0.41 (The inclusion of a \336le with) 99 511.23 P
0 F
0.41 (#include) 218.67 511.23 P
1 F
0.41 ( causes the) 259.21 511.23 P
1.52 (compilation state of the included \336le to be the) 99 499.23 P
(same as the \336le from which it was included.) 99 487.23 T
0.08 (The inclusion of a \336le with) 99 465.23 P
0 F
0.08 ( #pragma implement) 213.8 465.23 P
2.3 (interface) 99 453.23 P
1 F
2.3 ( causes the compilation state of the) 140.66 453.23 P
(included \336le to be) 99 441.23 T
3 F
(implementation) 179.56 441.23 T
1 F
(.) 247.32 441.23 T
2.61 (The inclusion of a \336le with) 99 419.23 P
0 F
2.61 (#pragma extend) 231.89 419.23 P
2.3 (interface) 99 407.23 P
1 F
2.3 ( causes the compilation state of the) 140.66 407.23 P
(included \336le to be:) 99 395.23 T
(1.) 99 373.23 T
3 F
3.96 (Standard) 113.4 373.23 P
1 F
3.96 ( - if the \336le from which it was) 153.96 373.23 P
(included was in the state) 113.4 361.23 T
3 F
(standard) 225.62 361.23 T
1 F
(.) 264.51 361.23 T
(2.) 99 339.23 T
3 F
3.54 (Extension) 113.4 339.23 P
1 F
3.54 ( - if the \336le from which it was) 157.29 339.23 P
0.18 (included was in the state) 113.4 327.23 P
3 F
0.18 (extension) 226.54 327.23 P
1 F
0.18 (.or) 269.32 327.23 P
3 F
0.18 (imple-) 283.94 327.23 P
(mentation) 113.4 315.23 T
1 F
(.) 157.29 315.23 T
FMENDPAGE
%%EndPage: "37" 38
%%Page: "38" 38
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(38) 519.89 755.24 T
99 699.4 540 711.4 C
99 710.4 567 710.4 2 L
1 H
2 Z
0 X
0 K
N
99 707.4 567 707.4 2 L
N
0 0 595.3 841.9 C
99 663.4 540 675.4 C
99 674.4 567 674.4 2 L
1 H
2 Z
0 X
0 K
N
99 671.4 567 671.4 2 L
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(3) 99 683.4 T
(Portability Checks) 126 683.4 T
99 431.4 311.15 441.4 C
99 440.4 567 440.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 407.4 311.15 417.4 C
99 416.4 567 416.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.1) 99 422.07 T
(Introduction) 135 422.07 T
1 10 Q
4.32 (The internal portability checks \050see Section) 99 390.73 P
1.1 (1.1.2\051 that have been introduced into the com-) 99 378.73 P
2.42 (piler are a collection of checks that are both) 99 366.73 P
1.28 (convenient and thought useful to perform. The) 99 354.73 P
2.68 (main thrust in the compiler development has) 99 342.73 P
1.1 (been towards the performing of external porta-) 99 330.73 P
1.02 (bility checks \050see Section 1.1.1\051, and the inter-) 99 318.73 P
0.73 (nal portability checks, described in this section,) 99 306.73 P
1.17 (are in the process of being developed to com-) 99 294.73 P
(plement the external checks.) 99 282.73 T
1.03 (The use of these checks is controlled by prag-) 99 260.73 P
(mas and a portability table.) 99 248.73 T
3.05 (The pragmas and portability table serve two) 99 226.73 P
(purposes:) 99 214.73 T
(1.) 99 192.73 T
1.76 (T) 113.4 192.73 P
1.76 (o describe the portability level required of) 118.4 192.73 P
(the program, see Section 1.2.) 113.4 180.73 T
(2.) 99 158.73 T
3.57 (T) 113.4 158.73 P
3.57 (o indicate which checks are to be per-) 118.4 158.73 P
(formed.) 113.4 146.73 T
329.15 431.4 541.3 441.4 C
329.15 440.4 797.15 440.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 407.4 541.3 417.4 C
329.15 416.4 797.15 416.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.2) 329.15 422.07 T
(The portability table) 365.15 422.07 T
1 10 Q
0.79 (The portability table is the main mechanism for) 329.15 390.73 P
2.31 (describing the portability level required of the) 329.15 378.73 P
1.2 (program being compiled. It describes the mini-) 329.15 366.73 P
1.77 (mum assumptions about the representation of) 329.15 354.73 P
0.07 (the integer types. The portability table is passed) 329.15 342.73 P
0.12 (as a parameter to the compiler) 329.15 330.73 P
0.12 (, see Ref [4], and) 464.71 330.73 P
(its format is shown in Figure 3.1.) 329.15 318.73 T
0.39 (The portability table format must be in precisely) 329.15 296.73 P
1.42 (the format shown, with all the information pro-) 329.15 284.73 P
-0.15 (vided, and provided in the order shown. The last) 329.15 272.73 P
1.73 (four lines of the table, i.e. from) 329.15 260.73 P
0 F
1.73 (ptr_int) 478.48 260.73 P
1 F
1.73 ( down-) 509.57 260.73 P
0.55 (wards, are no longer used by the compiler) 329.15 248.73 P
0.55 (, and) 518.52 248.73 P
2.65 (so, in order to complete the table, it is sug-) 329.15 236.73 P
2.77 (gested that the default options shown in the) 329.15 224.73 P
(table are used.) 329.15 212.73 T
0 F
(3.2.1) 329.15 186.73 T
(Integer sizes) 365.15 186.73 T
1 F
0.69 (The) 329.15 169.73 P
3 F
0.69 (decimal-integer) 349.83 169.73 P
1 F
0.69 ( associated with) 418.14 169.73 P
0 F
0.69 (char_bits) 494.08 169.73 P
1 F
0.69 (,) 538.52 169.73 P
0 F
3.47 (short_bits) 329.15 157.73 P
1 F
3.47 (,) 377.46 157.73 P
0 F
3.47 (int_bits) 386.48 157.73 P
1 F
3.47 ( and) 422.03 157.73 P
0 F
3.47 (long_bits) 451.19 157.73 P
1 F
3.47 ( indicates) 495.61 157.73 P
0.87 (that the compiler should check for portability to) 329.15 145.73 P
3.17 (all targets whose) 329.15 133.73 P
0 F
3.17 (char) 416.42 133.73 P
1 F
3.17 (,) 436.98 133.73 P
0 F
3.17 (short) 445.71 133.73 P
1 F
3.17 (,) 470.69 133.73 P
0 F
3.17 (int) 479.42 133.73 P
1 F
3.17 ( and) 491.63 133.73 P
0 F
3.17 (long) 520.2 133.73 P
1 F
0.27 (types are represented by at least the number of) 329.15 121.73 P
-0.19 (bits expressed in the) 329.15 109.73 P
3 F
-0.19 (decimal-integer) 422.82 109.73 P
1 F
-0.19 (. For exam-) 490.59 109.73 P
0.16 (ple, if) 329.15 97.73 P
0 F
0.16 (int_bits) 356.14 97.73 P
1 F
0.16 ( is set to) 391.68 97.73 P
3 F
0.16 (16) 432.34 97.73 P
1 F
0.16 (, the compiler will per-) 443.45 97.73 P
99 463.9 540 625.9 R
7 X
V
6 F
0 X
(char_bits) 117 607.23 T
7 F
(decimal-integer) 261 607.23 T
6 F
(short_bits) 117 595.23 T
7 F
(decimal-integer) 261 595.23 T
6 F
(int_bits) 117 583.23 T
7 F
(decimal-integer) 261 583.23 T
6 F
(long_bits) 117 571.23 T
7 F
(decimal-integer) 261 571.23 T
6 F
(signed_range) 117 559.23 T
7 F
(range-type) 261 559.23 T
6 F
(char_type) 117 547.23 T
7 F
(sign-specif) 261 547.23 T
(ication) 326.96 547.23 T
6 F
(ptr_int) 117 535.23 T
(none) 261 535.23 T
(ptr_fn) 117 523.23 T
(yes) 261 523.23 T
(non_prototype_checks) 117 511.23 T
(yes) 261 511.23 T
(multibyte) 117 499.23 T
(0) 261 499.23 T
0 F
(Figure 3.1) 303.09 475.23 T
99 463.9 540 625.9 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "38" 39
%%Page: "39" 39
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(39) 519.89 755.24 T
0.47 (form its portability checks assuming that the) 99 362.73 P
0 F
0.47 (int) 298.93 362.73 P
1 F
1.16 (types might be represented by as a few as 16) 99 350.73 P
1.54 (bits. If) 99 338.73 P
0 F
1.54 (int_bits) 131.52 338.73 P
1 F
1.54 ( is set to 32, then the compiler) 167.06 338.73 P
0.06 (will perform its checks in the knowledge that the) 99 326.73 P
4.04 (program would not be used on a machine) 99 314.73 P
1.82 (whose) 99 302.73 P
0 F
1.82 (int) 132.48 302.73 P
1 F
1.82 ( types were represented by 16 bits,) 144.69 302.73 P
0.96 (although they may be represented by 32 or 64) 99 290.73 P
(bits.) 99 278.73 T
0 F
(3.2.2) 99 252.73 T
(Integer ranges) 135 252.73 T
1 F
-0.14 (The minimum range of values that can be repre-) 99 235.73 P
1.17 (sented by an integer type is deduced from the) 99 223.73 P
0.13 (minimum number of bits that type is speci\336ed to) 99 211.73 P
(have.) 99 199.73 T
0.75 (In the case of the unsigned integer ranges, the) 99 177.73 P
1.29 (minimum range is from 0 to \0502) 99 165.73 P
3 8 Q
1.04 (b) 239.5 169.73 P
1 10 Q
1.29 (-1\051, where) 243.95 165.73 P
3 F
1.29 (b) 294.3 165.73 P
1 F
1.29 ( is) 299.86 165.73 P
0 (the minimum number of bits for the integer type.) 99 153.73 P
0.68 (In the case of signed integer ranges, the upper) 99 131.73 P
1.01 (limit of the minimum range is \0502) 99 119.73 P
1 8 Q
0.81 (\050) 243.91 123.73 P
3 F
0.81 (b) 246.57 123.73 P
1 F
0.81 (-1\051) 251.02 123.73 P
1 10 Q
1.01 (-1\051, but the) 260.79 119.73 P
1.33 (lower limit depends on whether) 99 107.73 P
0 F
1.33 (signed_range) 246.16 107.73 P
1 F
0.77 (is set to) 99 95.73 P
0 F
0.77 (maximum) 138.54 95.73 P
1 F
0.77 ( or) 185.19 95.73 P
0 F
0.77 (symmetric) 201.18 95.73 P
1 F
0.77 (. If it is set to) 251.17 95.73 P
0 F
-0.19 (maximum) 329.15 362.73 P
1 F
-0.19 (, the lower limit is \050-2) 375.8 362.73 P
1 8 Q
-0.15 (\050) 466.49 366.73 P
3 F
-0.15 (b) 469.15 366.73 P
1 F
-0.15 (-1\051) 473.59 366.73 P
1 10 Q
-0.19 (\051; if it is set to) 483.36 362.73 P
0 F
0.79 (symmetric) 329.15 350.73 P
1 F
0.79 (, then the lower limit is the negation) 379.14 350.73 P
(of the upper limit.) 329.15 338.73 T
1.17 (The minimum range of the type) 329.15 316.73 P
0 F
1.17 (char) 477.29 316.73 P
1 F
1.17 (, which is) 497.85 316.73 P
0.41 (not speci\336ed to be either signed or unsigned, is) 329.15 304.73 P
1.66 (determined by) 329.15 292.73 P
0 F
1.66 (char_type) 398.57 292.73 P
1 F
1.66 (.) 445.78 292.73 P
0 F
1.66 (char_type) 453 292.73 P
1 F
1.66 ( is either) 500.21 292.73 P
0 F
1.2 (signed) 329.15 280.73 P
1 F
1.2 (,) 361.36 280.73 P
0 F
1.2 (unsigned) 368.11 280.73 P
1 F
1.2 ( or) 412.54 280.73 P
0 F
1.2 (either) 429.37 280.73 P
1 F
1.2 ( indicating that the) 456.59 280.73 P
1.48 (compiler should check for portability to targets) 329.15 268.73 P
3.69 (where the type) 329.15 256.73 P
0 F
3.69 (char) 408.57 256.73 P
1 F
3.69 ( is respectively signed,) 429.67 256.73 P
8.32 (unsigned or of unknown signedness. If) 329.15 244.73 P
0 F
3.23 (char_type) 329.15 232.73 P
1 F
3.23 ( is) 376.36 232.73 P
0 F
3.23 (signed) 395.6 232.73 P
1 F
3.23 ( or) 427.82 232.73 P
0 F
3.23 (unsigned) 448.73 232.73 P
1 F
3.23 (, then the) 493.15 232.73 P
0.63 (minimum assumed range of) 329.15 220.73 P
0 F
0.63 (char) 457.75 220.73 P
1 F
0.63 ( is identical to) 478.86 220.73 P
0.95 (that of) 329.15 208.73 P
0 F
0.95 (signed char) 361.61 208.73 P
1 F
0.95 ( or) 418.65 208.73 P
0 F
0.95 (unsigned char) 434.99 208.73 P
1 F
0.95 ( respec-) 504.25 208.73 P
2.16 (tively) 329.15 196.73 P
2.16 (, otherwise it is the intersection of these) 351.18 196.73 P
(two ranges.) 329.15 184.73 T
2.06 (The portability table of Figure 3.2 re\337ects the) 329.15 162.73 P
0.39 (minimal requirements of a target system as laid) 329.15 150.73 P
0.15 (down in the ANSI C Standard Section 2.2.4.2.1.) 329.15 138.73 P
2.06 (The portability table of Figure 3.3 re\337ects the) 329.15 126.73 P
-0.1 (implementation of most modern 32 bit machines) 329.15 114.73 P
99 567.4 540 729.4 R
7 X
V
5 F
0 X
(char_bits) 117 710.73 T
(8) 261 710.73 T
(short_bits) 117 698.73 T
(16) 261 698.73 T
(int_bits) 117 686.73 T
(16) 261 686.73 T
(long_bits) 117 674.73 T
(32) 261 674.73 T
(signed_range) 117 662.73 T
(symmetric) 261 662.73 T
(char_type) 117 650.73 T
(either) 261 650.73 T
(ptr_int) 117 638.73 T
(none) 261 638.73 T
(ptr_fn) 117 626.73 T
(yes) 261 626.73 T
(non_prototype_checks) 117 614.73 T
(yes) 261 614.73 T
(multibyte) 117 602.73 T
(0) 261 602.73 T
0 F
(Figure 3.2) 303.09 578.73 T
99 567.4 540 729.4 R
0.5 H
2 Z
N
99 387.4 540 549.4 R
7 X
V
5 F
0 X
(char_bits) 117 530.73 T
(8) 261 530.73 T
(short_bits) 117 518.73 T
(16) 261 518.73 T
(int_bits) 117 506.73 T
(32) 261 506.73 T
(long_bits) 117 494.73 T
(32) 261 494.73 T
(signed_range) 117 482.73 T
(maximum) 261 482.73 T
(char_type) 117 470.73 T
(either) 261 470.73 T
(ptr_int) 117 458.73 T
(none) 261 458.73 T
(ptr_fn) 117 446.73 T
(yes) 261 446.73 T
(non_prototype_checks) 117 434.73 T
(yes) 261 434.73 T
(multibyte) 117 422.73 T
(0) 261 422.73 T
0 F
(Figure 3.3) 303.09 398.73 T
99 387.4 540 549.4 R
N
FMENDPAGE
%%EndPage: "39" 40
%%Page: "40" 40
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(40) 519.89 755.24 T
1.9 (with 32-bit integer types and with maximal as) 99 529.23 P
(opposed to symmetric ranges.) 99 517.23 T
-0.17 (Consider the example in Figure 3.4. The answer) 99 495.23 P
0.81 (returned by) 99 483.23 P
3 F
0.81 (f) 153.95 483.23 P
1 F
0.81 ( is dif) 156.73 483.23 P
0.81 (ferent depending on whether) 181.49 483.23 P
0.38 (or not the program is compiled with 16 or 32 bit) 99 471.23 P
0.69 (integers. If the program is compiled on a target) 99 459.23 P
-0.15 (with 16 bit integers, then the answer delivered is) 99 447.23 P
3 F
1.72 (0x1) 99 435.23 P
1 F
1.72 (; if it is compiled on a target with integers) 115.11 435.23 P
1.98 (represented by more than 16 bits the answer) 99 423.23 P
1.38 (delivered is) 99 411.23 P
3 F
1.38 (0x10001) 155.08 411.23 P
1 F
1.38 (. With the portability table) 193.42 411.23 P
3.88 (of Figure 3.2, the answer is not consistent) 99 399.23 P
-0.15 (across the targets in the portability table, since it) 99 387.23 P
-0.17 (is dif) 99 375.23 P
-0.17 (ferent for say 16 and 32 bit machines. How-) 119.2 375.23 P
1.34 (ever) 99 363.23 P
1.34 (, the program is consistent across the tar-) 117.89 363.23 P
0.31 (gets expressed by the portability table of Figure) 99 351.23 P
3.42 (3.3. If the appropriate portability checks are) 99 339.23 P
0.07 (requested, see Section 3.3, then the program of) 99 327.23 P
0.61 (Figure 3.4, will be \337agged with the table of Fig-) 99 315.23 P
(ure 3.2, but not with the table of Figure 3.3.) 99 303.23 T
99 267.9 311.15 277.9 C
99 276.9 567 276.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 243.9 311.15 253.9 C
99 252.9 567 252.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.3) 99 258.57 T
(Integer Conversions) 135 258.57 T
1 10 Q
1.26 (The conversion from one integer type, say the) 99 227.23 P
3 F
2.49 (from-type) 99 215.23 P
1 F
2.49 (, to another) 141.21 215.23 P
2.49 (, say the) 196.2 215.23 P
3 F
2.49 (to-type) 244.22 215.23 P
1 F
2.49 (, poten-) 274.77 215.23 P
0.07 (tially depends on the representation sizes of the) 99 203.23 P
-0.12 (two types concerned. Therefore, integer conver-) 99 191.23 P
0.78 (sion is, in general, target dependent. The com-) 99 179.23 P
3.14 (piler has an) 99 167.23 P
3 F
3.14 (integer) 162.86 167.23 P
3.14 (-conversion check) 193.23 167.23 P
1 F
3.14 ( which,) 276.91 167.23 P
2.31 (when in operation, causes all integer conver-) 99 155.23 P
0.96 (sions to be \337agged, except in the following cir-) 99 143.23 P
(cumstances:) 99 131.23 T
(1.) 329.15 529.23 T
2.93 (When all the values of the) 343.55 529.23 P
3 F
2.93 ( from-type) 473.22 529.23 P
1 F
2.93 ( are) 521.14 529.23 P
3.7 (included in the) 343.55 517.23 P
3 F
3.7 (to-type) 421.88 517.23 P
1 F
3.7 (. This occurs only) 452.43 517.23 P
2.62 (when the) 343.55 505.23 P
3 F
2.62 (from-type) 392.12 505.23 P
1 F
2.62 ( is known to have the) 434.32 505.23 P
0.87 (same signedness as the) 343.55 493.23 P
3 F
0.87 (to-type) 457.57 493.23 P
1 F
0.87 ( and the) 488.13 493.23 P
3 F
0.87 ( to-) 525.98 493.23 P
0.92 (type) 343.55 481.23 P
1 F
0.92 ( is known to be a larger range than the) 362.44 481.23 P
3 F
(from-type) 343.55 469.23 T
1 F
(.) 385.76 469.23 T
(2.) 329.15 447.23 T
-0.14 (When the value to be converted can be com-) 343.55 447.23 P
-0.14 (puted at compile time and is known, by refer-) 343.55 435.23 P
3.05 (ence to the portability table, to lie in the) 343.55 423.23 P
(range of the) 343.55 411.23 T
3 F
(to-type) 399.67 411.23 T
1 F
(.) 430.22 411.23 T
(3.) 329.15 389.23 T
( The) 343.55 389.23 T
3 F
(from-type) 366.33 389.23 T
1 F
( is) 408.53 389.23 T
4 F
(char) 421.3 389.23 T
1 F
(.) 441.86 389.23 T
1.99 (Ignoring exception 3, if the integer-conversion) 329.15 367.23 P
0.45 (check is in operation, all un\337agged conversions) 329.15 355.23 P
1.42 (are guaranteed to produce the same value on) 329.15 343.23 P
-0.1 (the targets characterised by the portability table.) 329.15 331.23 P
3.05 (Exception 3 is permitted purely because the) 329.15 309.23 P
5.92 (conversion of values from type) 329.15 297.23 P
4 F
5.92 (char) 497.05 297.23 P
1 F
5.92 ( are) 518.16 297.23 P
1.55 (extremely frequent, mostly portable and would) 329.15 285.23 P
2.89 (otherwise always be rejected by the) 329.15 273.23 P
3 F
2.89 (integer) 507.59 273.23 P
2.89 (-) 537.97 273.23 P
6.43 (conversion check) 329.15 261.23 P
1 F
6.43 ( when its signedness is) 412.79 261.23 P
(unknown.) 329.15 249.23 T
0.22 (Since, currently) 329.15 227.23 P
0.22 (, it is not possible to express the) 397.51 227.23 P
3.23 (signedness, or the relative ordering to other) 329.15 215.23 P
1.18 (integer types, of integer type tokens \050see Sec-) 329.15 203.23 P
2.14 (tion 2.8.3\051, the) 329.15 191.23 P
3 F
2.14 (integer) 402.23 191.23 P
2.14 (-conversion check) 432.6 191.23 P
1 F
2.14 ( \337ags) 515.27 191.23 P
(all conversions to or from an integer type token.) 329.15 179.23 T
0.69 (The) 329.15 157.23 P
3 F
0.69 ( integer) 346.37 157.23 P
0.69 (-conversion checks) 380.21 157.23 P
1 F
0.69 ( are brought into) 466.44 157.23 P
0.94 (operation by the use of the pragmas illustrated) 329.15 145.23 P
3.88 (in Figure 3.5. The \336rst pragma causes the) 329.15 133.23 P
2.77 (checks to operate on all assignment conver-) 329.15 121.23 P
0.36 (sions \050ANSI C Standard, Section 3.3.16.1\051. The) 329.15 109.23 P
1.75 (second pragma causes the checks to operate) 329.15 97.23 P
5 F
(unsigned int f\050\051{) 106.2 715.23 T
(return 0x10001UL) 117 703.23 T
(}) 117 691.23 T
0 F
(Figure 3.4) 305.34 667.23 T
99 652.9 544.5 733.9 R
0.5 H
2 Z
N
99 553.9 540 634.9 R
7 X
V
6 F
0 X
(# pragma no implicit conversion warning) 106.2 616.23 T
7 8 Q
(opt) 340.07 613.73 T
6 10 Q
(# pragma no explicit conversion warning) 106.2 592.23 T
7 8 Q
(opt) 340.07 589.73 T
0 10 Q
(Figure 3.5) 303.09 568.23 T
99 553.9 540 634.9 R
N
FMENDPAGE
%%EndPage: "40" 41
%%Page: "41" 41
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(41) 519.89 755.24 T
1.25 (on all explicit casts. If the keyword) 99 551.73 P
0 F
1.25 (warning) 261.59 551.73 P
1 F
1.25 ( is) 299.91 551.73 P
3.04 (present, then any conversion \337agged by the) 99 539.73 P
0.92 (check produces a warning, otherwise it causes) 99 527.73 P
(the compiler to exit with a constraint error) 99 515.73 T
(.) 281.19 515.73 T
0.79 (The program in Figure 3.4 performs an assign-) 99 493.73 P
0.47 (ment conversion on the operand of) 99 481.73 P
4 F
0.47 (return) 259.04 481.73 P
1 F
0.47 ( from) 287.91 481.73 P
0 F
0.4 (unsigned long) 99 469.73 P
1 F
0.4 ( to) 167.7 469.73 P
0 F
0.4 (unsigned int) 182.38 469.73 P
1 F
0.4 (. If the program) 242.19 469.73 P
0.97 (is compiled in the presence of the \336rst pragma) 99 457.73 P
(of Figure 3.5, then:) 99 445.73 T
(1.) 99 423.73 T
1.05 ( If the portability table of Figure 3.2 is used) 113.4 423.73 P
2.96 (then the compiler will \337ag the conversion) 113.4 411.73 P
2.56 (because it does not belong to any of the) 113.4 399.73 P
(three exceptional cases.) 113.4 387.73 T
(2.) 99 365.73 T
-0.25 (If the portability of Figure 3.3 is used then the) 113.4 365.73 P
-0.09 (compiler will not \337ag the conversion because) 113.4 353.73 P
(exception 2 applies.) 113.4 341.73 T
0 F
(3.3.1) 99 315.73 T
(Conversions errors) 135 315.73 T
1 F
1.26 (In many of the cases where programmers use) 99 298.73 P
3.21 (conversions that are potentially not portable,) 99 286.73 P
(they tend to fall into three categories) 99 274.73 T
(1.) 99 252.73 T
1 (Genuine mistake with a straightforward cor-) 113.4 252.73 P
(rection) 113.4 240.73 T
(2.) 99 218.73 T
2.22 (Known by the programmer to be portable,) 113.4 218.73 P
0.99 (even though the compiler cannot guarantee) 113.4 206.73 P
(it.) 113.4 194.73 T
(3.) 99 172.73 T
0.37 (Known by the programmer to be unportable,) 113.4 172.73 P
2.06 (but it is too awkward or dif) 113.4 160.73 P
2.06 (\336cult to write a) 241.1 160.73 P
0.27 (portable version, so a) 113.4 148.73 P
3 F
0.27 (quite) 212.82 148.73 P
1 F
0.27 ( portable solution) 234.49 148.73 P
(is adopted.) 113.4 136.73 T
0.69 (The compiler provides a handle on the last two) 99 114.73 P
2.77 (cases with its user de\336ned conversions \050see) 99 102.73 P
-0.01 (Section 3.5\051. A user de\336ned conversion enables) 329.15 551.73 P
1.31 (the conversion from one type to another to be) 329.15 539.73 P
4.06 (de\336ned as a procedure token \050see Section) 329.15 527.73 P
0.77 (2.10\051. Any user-de\336ned conversion is accepted) 329.15 515.73 P
(by the compiler as a portable conversion.) 329.15 503.73 T
1.5 (If the conversions of categories two and three) 329.15 481.73 P
2.32 (are represented by user de\336ned conversions,) 329.15 469.73 P
0.79 (then the errors can be removed. In the case of) 329.15 457.73 P
0.01 (category two: this has the ef) 329.15 445.73 P
0.01 (fect of identifying all) 453.48 445.73 P
1.88 (the conversions that the programmer believes) 329.15 433.73 P
-0.07 (to be portable. In the case of category three, the) 329.15 421.73 P
0.55 (use of a procedure token enables the program-) 329.15 409.73 P
0.41 (mer to provide a dif) 329.15 397.73 P
0.41 (ferent implementation of the) 416.17 397.73 P
(conversion on each target.) 329.15 385.73 T
-0.19 (In order to take advantage of these facilities, it is) 329.15 363.73 P
0.94 (necessary to have a much more re\336ned notion) 329.15 351.73 P
-0.19 (of integer types. For example, it is unlikely that a) 329.15 339.73 P
0.55 (programmer would wish to convert all values of) 329.15 327.73 P
-0.19 (type) 329.15 315.73 P
0 F
-0.19 (int) 350.62 315.73 P
1 F
-0.19 ( to type) 362.84 315.73 P
0 F
-0.19 (short) 397.82 315.73 P
1 F
-0.19 (, but, by using integral type) 422.81 315.73 P
0.55 (tokens \050see Section 2.8.3\051, an arbitrary number) 329.15 303.73 P
2.77 (of distinguishable integer types can be intro-) 329.15 291.73 P
(duced into a program.) 329.15 279.73 T
329.15 244.4 541.3 254.4 C
329.15 253.4 797.15 253.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 220.4 541.3 230.4 C
329.15 229.4 797.15 229.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.4) 329.15 235.07 T
(Integer literals) 365.15 235.07 T
1 10 Q
2.07 (The type of an integer literal depends on the) 329.15 203.73 P
0.36 (value of the literal and the ranges of the integer) 329.15 191.73 P
-0.1 (types \050ANSI C Standard, Section 3.1.3.2\051. Since) 329.15 179.73 P
1.31 (the ranges of the integer types depend on the) 329.15 167.73 P
0.63 (target for which the program is being compiled,) 329.15 155.73 P
3.4 (the types of the integer literals, and conse-) 329.15 143.73 P
(quently their semantics, is target dependent.) 329.15 131.73 T
2.21 (In order to tighten the semantics in this area) 329.15 109.73 P
0.63 (another pragma has been introduced as in Fig-) 329.15 97.73 P
99 576.4 540 729.4 R
7 X
V
6 F
0 X
(# pragma integer literal) 106.2 710.73 T
7 F
(literal-class lit-class-type-list) 256.12 710.73 T
(literal-class:) 106.2 686.73 T
(denomination) 117 674.73 T
6 F
(unsigned) 194.96 674.73 T
7 8 Q
(opt) 242.93 672.23 T
6 10 Q
(long) 263.32 674.73 T
7 8 Q
(opt) 287.31 672.23 T
7 10 Q
(denomination:) 106.2 650.73 T
6 F
(octal) 117 638.73 T
(decimal) 117 626.73 T
(hexadecimal) 117 614.73 T
0 F
(Figure 3.6) 303.09 590.73 T
99 576.4 540 729.4 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "41" 42
%%Page: "42" 42
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(42) 519.89 755.24 T
0.06 (ure 3.6. The purpose of this pragma is to explic-) 99 461.73 P
1.87 (itly de\336ne the method by which the type, and) 99 449.73 P
2.37 (thereby the semantics, of an integer literal is) 99 437.73 P
(computed.) 99 425.73 T
0.31 (The) 99 403.73 P
3 F
0.31 (literal-class) 119.31 403.73 P
1 F
0.31 ( identi\336es the kind of literal inte-) 169.29 403.73 P
0 (ger for which the types are being de\336ned. There) 99 391.73 P
1.45 (are twelve dif) 99 379.73 P
1.45 (ferent classes of integer literal in) 160.6 379.73 P
2.62 (ANSI C. First integer literals are divided into) 99 367.73 P
0.76 (octal \050i.e. those that begin with) 99 355.73 P
0 F
0.76 (0) 241.32 355.73 P
1 F
0.76 (\051, decimal \050i.e.) 246.88 355.73 P
-0.22 (those that begin with a non-zero digit\051 and hexa-) 99 343.73 P
2.15 (decimal \050i.e. those that begin with) 99 331.73 P
0 F
2.15 (0x) 262.97 331.73 P
1 F
2.15 ( or) 274.08 331.73 P
0 F
2.15 (0X) 292.82 331.73 P
1 F
2.15 (\051.) 305.04 331.73 P
3.96 (Each of these major divisions is then sub-) 99 319.73 P
0.47 (divided into a further four divisions according to) 99 307.73 P
1.05 (the presence or absence of the suf) 99 295.73 P
1.05 (\336ces) 259.05 295.73 P
0 F
1.05 ( U) 279.59 295.73 P
1 F
1.05 ( and) 290.64 295.73 P
0 F
(L) 99 283.73 T
1 F
(.) 105.11 283.73 T
4.04 (The major division of the literal integers is) 99 261.73 P
2.49 (expressed by the) 99 249.73 P
3 F
2.49 (denomination) 185.35 249.73 P
1 F
2.49 ( and the sub-) 245.35 249.73 P
0.55 (division of that class is determined by the pres-) 99 237.73 P
2.3 (ence or absence of) 99 225.73 P
0 F
2.3 (unsigned) 195.97 225.73 P
1 F
2.3 ( or) 240.39 225.73 P
0 F
2.3 (long) 259.43 225.73 P
1 F
2.3 ( which) 280.53 225.73 P
(correspond to) 99 213.73 T
0 F
(U) 162.88 213.73 T
1 F
( and) 170.1 213.73 T
0 F
(L) 192.33 213.73 T
1 F
( respectively) 198.43 213.73 T
(.) 253.24 213.73 T
1.16 (If an integer literal is to be used in a program,) 99 191.73 P
0.27 (then the method of computing its type must \336rst) 99 179.73 P
(have been introduced using this pragma.) 99 167.73 T
1.11 (The) 99 145.73 P
3 F
1.11 (lit-class-type-list) 120.11 145.73 P
1 F
1.11 (, Figure 3.7, is the speci\336-) 191.18 145.73 P
0.13 (cation of the type computation for the integer lit-) 99 133.73 P
(eral class identi\336ed by) 99 121.73 T
3 F
(literal-class) 200.09 121.73 T
1 F
(.) 250.07 121.73 T
0 F
(3.4.1) 329.15 461.73 T
(The type computation speci\336cation) 365.15 461.73 T
1 F
0.55 (The values of the integer literals of any particu-) 329.15 444.73 P
5.27 (lar class are divided into contiguous sub-) 329.15 432.73 P
6.52 (ranges. The) 329.15 420.73 P
4 F
6.52 (integer-constant) 398.29 420.73 P
1 F
6.52 (s de\336ne the) 476.59 420.73 P
-0.14 (upper limits of these sub-ranges. That is the \336rst) 329.15 408.73 P
3.77 (integer-constant, say) 329.15 396.73 P
3 F
3.77 (i1) 432.23 396.73 P
1 F
3.77 (, identi\336es the range) 440 396.73 P
-0.09 ([0,) 329.15 384.73 P
3 F
-0.09 (i1) 340.26 384.73 P
1 F
-0.09 (]; the second integer literal, say) 348.04 384.73 P
3 F
-0.09 ( i2) 485.92 384.73 P
1 F
-0.09 (, identi\336es) 496.39 384.73 P
1.3 (the range [) 329.15 372.73 P
3 F
1.3 (i1) 379.53 372.73 P
1 F
1.3 (+1,) 387.31 372.73 P
3 F
1.3 (i2) 401.48 372.73 P
1 F
1.3 (]. The symbol) 409.26 372.73 P
0 F
1.3 (*) 475.92 372.73 P
1 F
1.3 ( identi\336es the) 479.81 372.73 P
2.03 (unlimited range upwards from the last integer) 329.15 360.73 P
0.45 (constant. Each integer constant must be strictly) 329.15 348.73 P
0.39 (larger than the one that precedes it. Associated) 329.15 336.73 P
0 (with each sub-range is an) 329.15 324.73 P
3 F
0 ( int-type-spec) 443.01 324.73 P
1 F
0 ( which is) 502.99 324.73 P
1.82 (either a type, a procedure token \050see Section) 329.15 312.73 P
1.94 (2.10\051, or a failure. The) 329.15 300.73 P
3 F
1.94 (int-type-spec) 439.93 300.73 P
1 F
1.94 ( identi\336es) 497.14 300.73 P
0.13 (the method by which integer literals, which lie in) 329.15 288.73 P
1.9 (the sub-range with which it is associated, are) 329.15 276.73 P
(computed.) 329.15 264.73 T
0.45 (If the) 329.15 242.73 P
3 F
0.45 (int-type-spec) 355.06 242.73 P
1 F
0.45 ( associated with a sub-range) 412.27 242.73 P
0.34 (is a) 329.15 230.73 P
4 F
0.34 (type-name) 348.16 230.73 P
1 F
0.34 (, then the type which it speci\336es) 398.14 230.73 P
2.15 (must be an integral type and this is the type) 329.15 218.73 P
0.73 (associated with integers lying in the sub-range.) 329.15 206.73 P
3.64 (For example, consider line 2 in Figure 3.8,) 329.15 194.73 P
0.02 (which divides the unsuf) 329.15 182.73 P
0.02 (\336xed decimal literals into) 432.36 182.73 P
5.36 (three ranges. Integer literals in the range) 329.15 170.73 P
1.77 ([0,0x7f) 329.15 158.73 P
1.77 (f) 358.97 158.73 P
1.77 (f] are of type) 361.57 158.73 P
0 F
1.77 (int) 427 158.73 P
1 F
1.77 (, integer literals in the) 439.21 158.73 P
2.02 (range [0x8000,0x7f) 329.15 146.73 P
2.02 (f) 416.55 146.73 P
2.02 (f) 419.15 146.73 P
2.02 (f) 421.75 146.73 P
2.02 (f) 424.35 146.73 P
2.02 (f) 426.94 146.73 P
2.02 (f] are of type) 429.54 146.73 P
0 F
2.02 (long) 495.95 146.73 P
1 F
2.02 (, and) 517.05 146.73 P
(the remainder are of type) 329.15 134.73 T
0 F
(unsigned long) 443.58 134.73 T
1 F
(.) 511.89 134.73 T
0.45 (If the) 329.15 112.73 P
3 F
0.45 (int-type-spec) 355.06 112.73 P
1 F
0.45 ( associated with a sub-range) 412.27 112.73 P
0.79 (is an) 329.15 100.73 P
4 F
0.79 (identi\336er) 354.61 100.73 P
1 F
0.79 (, with an optional) 396.26 100.73 P
0 F
0.79 (warning) 477.18 100.73 P
1 F
0.79 (, then) 515.5 100.73 P
99 481.9 540 562.9 R
7 X
V
5 F
0 X
(#pragma integer literal decimal\134) 106.2 544.23 T
( 0x7fff:int|0x7fffffff:long|*:unsigned long) 135 532.23 T
(/*line 2*/) 432 532.23 T
0 F
(Figure 3.8) 303.09 496.23 T
99 481.9 540 562.9 R
0.5 H
2 Z
N
99 576.4 540 715.9 R
7 X
V
7 F
0 X
(lit-class-type-list:) 106.2 697.23 T
6 F
(*) 117 685.23 T
7 F
(int-type-spec) 128.99 685.23 T
8 F
(integer-constant) 117 673.23 T
7 F
( int-type-spec) 212.95 673.23 T
6 F
(|) 302.9 673.23 T
7 F
(lit-class-type-list) 314.89 673.23 T
(int-type-spec:) 106.2 649.23 T
6 F
(:) 117 637.23 T
8 F
(type-name) 128.99 637.23 T
6 F
(* warning) 117 625.23 T
7 8 Q
(opt) 170.97 622.73 T
6 10 Q
(:) 191.36 625.23 T
8 F
(identif) 203.35 625.23 T
(ier) 245.33 625.23 T
6 F
(* * :) 117 613.23 T
0 F
(Figure 3.7) 303.09 589.23 T
99 576.4 540 715.9 R
N
FMENDPAGE
%%EndPage: "42" 43
%%Page: "43" 43
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(43) 519.89 755.24 T
0.67 (the type of the integer is computed by a proce-) 99 533.73 P
1.75 (dure token \050see Section 2.10\051. The procedure) 99 521.73 P
2.05 (token takes the integer value as a parameter) 99 509.73 P
0.55 (and delivers its type. Since the type of the inte-) 99 497.73 P
1.02 (ger is determined by a procedure token, which) 99 485.73 P
2.91 (potentially can be implemented dif) 99 473.73 P
2.91 (ferently on) 261.57 473.73 P
0.01 (dif) 99 461.73 P
0.01 (ferent targets, there is the option of producing) 109.37 461.73 P
1.58 (a warning whenever the token is applied. The) 99 449.73 P
3.32 (procedure token must have been introduced) 99 437.73 P
(previously with) 99 425.73 T
5 F
(#pragma token PROC\050VARIETY\051VARIETY) 106.2 403.73 T
1 F
0.62 (and the identi\336er in the) 99 379.73 P
3 F
0.62 (int-type-spec) 205.99 379.73 P
1 F
0.62 ( is its local) 263.2 379.73 P
(identi\336cation in the) 99 367.73 T
3 F
(macro) 184.55 367.73 T
1 F
( name space.) 212.32 367.73 T
0.96 (At present, within the language, It is not possi-) 99 345.73 P
2.85 (ble to de\336ne any such tokens taking integer) 99 333.73 P
1.1 (parameters and delivering integral types. How-) 99 321.73 P
0.63 (ever) 99 309.73 P
0.63 (, it is possible to provide de\336nitions directly) 117.89 309.73 P
0.06 (in TDF) 99 297.73 P
0.06 (. Along with the TDF system there should) 127.94 297.73 P
0.49 (be, in the token de\336nition libraries, a set of pre-) 99 285.73 P
0.78 (de\336ned TDF token de\336nitions that can be used) 99 273.73 P
2.12 (to compute integer literal types. These de\336ni-) 99 261.73 P
0.49 (tions can then be TDF linked to the TDF output) 99 249.73 P
-0.25 (of the C compiler to provide the de\336nitions of the) 99 237.73 P
(tokens used in the type computation.) 99 225.73 T
1.52 (The TDF de\336ned tokens for use in these type) 99 203.73 P
3.13 (computations are de\336ned dif) 99 191.73 P
3.13 (ferently on each) 233.77 191.73 P
(target:) 99 179.73 T
(1.) 99 157.73 T
3.19 (\322~lit_int\323 is the external identi\336cation of a) 113.4 157.73 P
0.37 (token that returns the integer type according) 113.4 145.73 P
2.15 (to the rules of ANSI C Section 3.1.3.2 for) 113.4 133.73 P
1.92 (unsuf) 113.4 121.73 P
1.92 (\336xed decimal, taking into account the) 137.67 121.73 P
1.17 (ranges of the integer types of the target on) 113.4 109.73 P
(which the token is de\336ned.) 113.4 97.73 T
(2.) 329.15 533.73 T
2.27 (\322~lit_hex\323 is the external identi\336cation of a) 343.55 533.73 P
0.37 (token that returns the integer type according) 343.55 521.73 P
2.15 (to the rules of ANSI C Section 3.1.3.2 for) 343.55 509.73 P
1.15 (unsuf) 343.55 497.73 P
1.15 (\336xed hexadecimal, taking into account) 367.82 497.73 P
0.83 (the ranges of the integer types of the target) 343.55 485.73 P
(on which the token is de\336ned.) 343.55 473.73 T
(3.) 329.15 451.73 T
2.15 (\322~lit_unsigned\323 is the external identi\336cation) 343.55 451.73 P
4.12 (of a token that returns the integer type) 343.55 439.73 P
2.7 (according to the rules of ANSI C Section) 343.55 427.73 P
0.21 (3.1.3.2 for integers suf) 343.55 415.73 P
0.21 (\336xed by) 443.44 415.73 P
0 F
0.21 (U) 481.07 415.73 P
1 F
0.21 ( only) 488.29 415.73 P
0.21 (, taking) 508.86 415.73 P
0.87 (into account the ranges of the integer types) 343.55 403.73 P
(of the target on which the token is de\336ned.) 343.55 391.73 T
(4.) 329.15 369.73 T
1.8 (\322~lit_long\323 is the external identi\336cation of a) 343.55 369.73 P
0.37 (token that returns the integer type according) 343.55 357.73 P
2.15 (to the rules of ANSI C Section 3.1.3.2 for) 343.55 345.73 P
5.24 (integers suf) 343.55 333.73 P
5.24 (\336xed by) 400.27 333.73 P
0 F
5.24 (L) 447.98 333.73 P
1 F
5.24 ( only) 454.09 333.73 P
5.24 (, taking into) 479.7 333.73 P
1.98 (account the ranges of the integer types of) 343.55 321.73 P
(the target on which the token is de\336ned.) 343.55 309.73 T
0.92 (An example of the use of a procedure token is) 329.15 287.73 P
0.95 (given in Figure 3.9. This describes a speci\336ca-) 329.15 275.73 P
(tion for an integer literal as follows:) 329.15 263.73 T
(1.) 329.15 241.73 T
0.33 (If it is less than or equal to 0x7f) 343.55 241.73 P
0.33 (f) 483.81 241.73 P
0.33 (f, it has type) 486.41 241.73 P
0 F
(int) 343.55 229.73 T
1 F
(.) 355.76 229.73 T
(2.) 329.15 207.73 T
2.38 (If it is greater than 0x7f) 343.55 207.73 P
2.38 (f) 456.95 207.73 P
2.38 (f, then its type is) 459.54 207.73 P
0.46 (computed by the token with external identi\336-) 343.55 195.73 P
4.79 (cation \322~lit_int\323 and internal identi\336cation) 343.55 183.73 P
(\322l_i\323.) 343.55 171.73 T
(3.) 329.15 149.73 T
0.35 (Since the de\336nition of \322~lit_int\323, bound to the) 343.55 149.73 P
3.24 (output of the program being compiled, is) 343.55 137.73 P
1.73 (potentially dif) 343.55 125.73 P
1.73 (ferent on dif) 403.43 125.73 P
1.73 (ferent targets, the) 459.49 125.73 P
0 (compiler will output a warning every time it is) 343.55 113.73 P
(called.) 343.55 101.73 T
99 657.4 540 733.9 R
7 X
V
5 F
0 X
(#pragma token PROC \050VARIETY\051VARIETY l_i#~lit_int) 106.2 715.23 T
(#pragma integer literal decimal 0x7fff:int|**warning : l_i) 106.2 691.23 T
0 F
(Figure 3.9) 303.09 667.23 T
99 657.4 540 733.9 R
0.5 H
2 Z
N
99 558.4 540 639.4 R
7 X
V
5 F
0 X
(#pragma token PROC \050VARIETY\051VARIETY l_i#~lit_int) 106.2 620.73 T
(#pragma integer literal decimal 0x7fff:int|0xffffffff*warning:l_i|***:) 106.2 596.73 T
0 F
(Figure 3.10) 300.31 572.73 T
99 558.4 540 639.4 R
N
FMENDPAGE
%%EndPage: "43" 44
%%Page: "44" 44
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(44) 519.89 755.24 T
0.45 (If the) 99 380.73 P
3 F
0.45 (int-type-spec) 124.91 380.73 P
1 F
0.45 ( associated with a sub-range) 182.12 380.73 P
1.04 (is) 99 368.73 P
4 F
1.04 (**:) 110.04 368.73 P
1 F
1.04 ( then any integer literal lying in this range) 121.14 368.73 P
0.62 (will cause the compiler to terminate with a con-) 99 356.73 P
0.31 (straint error) 99 344.73 P
0.31 (. A typical use of this is where some) 149.85 344.73 P
-0.15 (of the envisaged targets for the program can not) 99 332.73 P
2.69 (accept integer literals that are too large. For) 99 320.73 P
2.69 (example the program in Figure 3.9 could be) 99 308.73 P
1.93 (modi\336ed to that of Figure 3.10 to prevent the) 99 296.73 P
(use of integer literals over 0xf) 99 284.73 T
(f) 229.36 284.73 T
(f) 231.96 284.73 T
(f) 234.55 284.73 T
(f) 237.15 284.73 T
(f) 239.75 284.73 T
(f) 242.35 284.73 T
(f.) 244.95 284.73 T
0 F
(3.4.2) 99 258.73 T
(ANSI C Compliance) 135 258.73 T
1 F
0 (This pragma allows considerable freedom in the) 99 241.73 P
1.5 (speci\336cation of the types of integer literals, so) 99 229.73 P
1.11 (much so that it is possible to express rules for) 99 217.73 P
0.94 (the computation of integer literal types that are) 99 205.73 P
1.5 (not consistent with the ANSI C Standard Sec-) 99 193.73 P
1.58 (tion 3.1.3.2. The compiler is usually called via) 99 181.73 P
0.86 (tcc \050Ref [4]\051 which calls a sequence of start up) 99 169.73 P
2.03 (\336les consisting of a set of pragmas to give a) 99 157.73 P
-0.16 (speci\336cation of integer literal types which is con-) 99 145.73 P
(sistent with the ANSI C standard.) 99 133.73 T
329.15 377.4 541.3 387.4 C
329.15 386.4 797.15 386.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 353.4 541.3 363.4 C
329.15 362.4 797.15 362.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.5) 329.15 368.07 T
(User de\336ned conversions) 365.15 368.07 T
1 10 Q
-0.14 (There is a pragma, whose syntax is illustrated in) 329.15 336.73 P
1.04 (Figure 3.1) 329.15 324.73 P
1.04 (1, for replacing or adding conversion) 374.44 324.73 P
(operators between values of dif) 329.15 312.73 T
(ferent types.) 467.85 312.73 T
1.52 (Each identi\336er in the) 329.15 290.73 P
3 F
1.52 (conv-list) 428.57 290.73 P
1 F
1.52 (must be a local) 469.52 290.73 P
3.05 (identi\336er for a procedure token \050see Section) 329.15 278.73 P
0.09 (2.10\051 which has precisely one program parame-) 329.15 266.73 P
1.82 (ter) 329.15 254.73 P
1.82 (, which must be an expression. The proce-) 340.26 254.73 P
0.07 (dure token must deliver an expression. Both the) 329.15 242.73 P
2.44 (parameter and resulting expressions must be) 329.15 230.73 P
3 F
(lvalue) 329.15 218.73 T
1 F
(s.) 355.25 218.73 T
3.32 (When attempting the conversion of a value,) 329.15 196.73 P
2.21 (either by assignment or by casting, from one) 329.15 184.73 P
-0.15 (type to another) 329.15 172.73 P
-0.15 (, if that conversion would not nor-) 394.98 172.73 P
1.38 (mally be permitted, because of the constraints) 329.15 160.73 P
1.82 (of the language or portability checks, then for) 329.15 148.73 P
(each token introduced as a conversion token:) 329.15 136.73 T
99 643.9 540 733.9 R
7 X
V
6 F
0 X
(# pragma accept conversion) 106.2 715.23 T
7 F
(conv-list) 268.11 715.23 T
7 8 Q
(opt) 322.08 712.73 T
7 10 Q
(conv-list:) 106.2 691.23 T
8 F
(identif) 117 679.23 T
(ier) 158.98 679.23 T
7 F
( conv-list) 176.97 679.23 T
7 8 Q
(opt) 236.93 676.73 T
0 10 Q
(Figure 3.1) 300.59 655.23 T
(1) 347.25 655.23 T
99 643.9 540 733.9 R
0.5 H
2 Z
N
99 405.4 540 630.4 R
7 X
V
5 F
0 X
(#pragma token TYPE IP#) 106.2 611.73 T
(#pragma token PROC{TYPE t,EXP rvalue:*t:e|EXP e}EXP rvalue:IP:p_to_ip#) 106.2 599.73 T
(#pragma token PROC{VARIETY v,EXP rvalue:v:e|EXP e}EXP rvalue:IP:i_to_ip#) 106.2 587.73 T
(#pragma token PROC{TYPE t,EXP rvalue:IP:e|EXP e}EXP rvalue:*t:ip_to_p#) 106.2 575.73 T
(#pragma token PROC{VARIETY v,EXP rvalue:IP:e|EXP e}EXP rvalue:v:ip_to_i#) 106.2 563.73 T
(#pragma accept conversion p_to_ip i_to_ip ip_to_p ip_to i) 106.2 539.73 T
(void f\050void\051{) 106.2 515.73 T
(IP ip, *pip=&ip;short s=6;) 117 503.73 T
(ip = s;) 117 491.73 T
(/*using i_to_ip*/) 225 491.73 T
(s = ip;) 117 479.73 T
(/*using ip_to_i*/) 225 479.73 T
(ip = pip;) 117 467.73 T
(/*using p_to_ip*/) 225 467.73 T
(pip = ip;) 117 455.73 T
(/*using ip_to_p*/) 225 455.73 T
(}) 117 443.73 T
0 F
(Figure 3.12) 300.31 419.73 T
99 405.4 540 630.4 R
N
FMENDPAGE
%%EndPage: "44" 45
%%Page: "45" 45
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(45) 519.89 755.24 T
(1.) 99 709.23 T
1.25 (An attempt to resolve the type of the token) 113.4 709.23 P
0.43 (result to the type to which the value is being) 113.4 697.23 P
(converted is made.) 113.4 685.23 T
(2.) 99 663.23 T
0.8 (If the result is resolved, and the value to be) 113.4 663.23 P
3.7 (converted is a suitable argument for the) 113.4 651.23 P
4.22 (token procedure, the token procedure is) 113.4 639.23 P
(applied to implement the conversion.) 113.4 627.23 T
1.97 (If no suitable conversion token can be found,) 99 605.23 P
(then the compiler exist with a constraint error) 99 593.23 T
(.) 297.3 593.23 T
0.48 (An example is shown in Figure 3.12. This intro-) 99 571.23 P
0.34 (duces a token for a type whose intended imple-) 99 559.23 P
4.59 (mentation is a type that can represent all) 99 547.23 P
2.45 (varieties on integer and all kinds of pointers.) 99 535.23 P
0.31 (Ordinarily conversions to or from the token type) 99 523.23 P
0.11 (would not be allowed, but because of the use of) 99 511.23 P
4.43 (user-de\336ned conversions, both integers and) 99 499.23 P
0 (pointers can be converted to and from the token) 99 487.23 P
(type.) 99 475.23 T
FMENDPAGE
%%EndPage: "45" 46
%%Page: "46" 46
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(46) 519.89 755.24 T
99 699.4 540 711.4 C
99 710.4 567 710.4 2 L
1 H
2 Z
0 X
0 K
N
99 707.4 567 707.4 2 L
N
0 0 595.3 841.9 C
99 663.4 540 675.4 C
99 674.4 567 674.4 2 L
1 H
2 Z
0 X
0 K
N
99 671.4 567 671.4 2 L
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(4) 99 683.4 T
(C V) 126 683.4 T
(ariants) 164.67 683.4 T
1 10 Q
-0.25 (The C to TDF compiler is designed to be compli-) 102.67 433.47 P
0.1 (ant to the ANSI C Standard \050Ref [1]\051. In order to) 102.67 421.47 P
3.23 (accommodate the many other dialects of C,) 102.67 409.47 P
0.07 (pragmas have been introduced to allow the pro-) 102.67 397.47 P
0.76 (grammer to specify the use of facilities in other) 102.67 385.47 P
0.64 (dialects. Usually these pragmas appear in) 102.67 373.47 P
3 F
0.64 (star-) 294.83 373.47 P
0.64 (tup) 102.67 361.47 P
1 F
0.64 ( \336les \050Section 6.1\051 automatically supplied by) 116.56 361.47 P
3 F
0.55 (tcc) 102.67 349.47 P
1 F
0.55 ( \050Ref [4]\051 to make the compiler behave in an) 115.44 349.47 P
(identical fashion to the dialect.) 102.67 337.47 T
0.27 (Some of the variants are pure extensions to the) 102.67 315.47 P
0.71 (ANSI C Standard, for example allowing a more) 102.67 303.47 P
0.55 (generous syntax \050Section 4.10\051. Others provide) 102.67 291.47 P
-0.12 (alternative semantics for existing constructs and) 102.67 279.47 P
0.57 (concepts of ANSI C, for example dif) 102.67 267.48 P
0.57 (ferent rules) 264.25 267.48 P
(for integer promotion \050Section 4.1\051.) 102.67 255.48 T
0.41 (In addition to the facilities described in this sec-) 102.67 233.48 P
-0.09 (tion, there are, described in other sections, facil-) 102.67 221.48 P
-0.17 (ities to provide ANSI C extensions and semantic) 102.67 209.48 P
2.05 (variants. They have not been included in this) 102.67 197.48 P
-0.07 (section because it is not their primary reason for) 102.67 185.48 P
0.47 (being introduced. They can be found in Section) 102.67 173.48 P
(3.4.2.) 102.67 161.48 T
329.15 430.14 541.3 440.14 C
329.15 439.14 797.15 439.14 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 406.14 541.3 416.14 C
329.15 415.14 797.15 415.14 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.1) 329.15 420.81 T
(Integer Promotions) 365.15 420.81 T
1 10 Q
0.63 (There are two common algorithms for the com-) 329.15 389.47 P
1.38 (putation of integer promotions \050ANSI C Stand-) 329.15 377.47 P
0.62 (ard Section 3.2.1.1\051. The one adopted by ANSI) 329.15 365.47 P
1.52 (C is often called) 329.15 353.47 P
3 F
1.52 (value preserving) 409.12 353.47 P
1 F
1.52 (, but a com-) 483.96 353.47 P
(mon alternative is) 329.15 341.47 T
3 F
(sign preserving) 410.24 341.47 T
1 F
(.) 478.01 341.47 T
3.66 (The) 329.15 319.47 P
3 F
3.66 (value preserving) 352.81 319.47 P
1 F
3.66 ( promotions convert all) 429.78 319.47 P
4.2 (objects of type) 329.15 307.47 P
0 F
4.2 (char) 408.96 307.47 P
1 F
4.2 ( and) 430.07 307.47 P
0 F
4.2 (short) 460.69 307.47 P
1 F
4.2 (, both their) 485.68 307.47 P
0.23 (signed and unsigned varieties, to) 329.15 295.47 P
0 F
0.23 (int) 479.19 295.47 P
1 F
0.23 (, unless) 491.4 295.47 P
0 F
0.23 (int) 529.08 295.47 P
1 F
-0.08 (cannot represent all the values of the type being) 329.15 283.47 P
3.88 (converted, in which case it is converted to) 329.15 271.47 P
0 F
(unsigned int) 329.15 259.47 T
1 F
(.) 388.57 259.47 T
3.99 (The) 329.15 237.47 P
3 F
3.99 (sign preserving) 353.14 237.47 P
1 F
3.99 ( promotions convert the) 424.89 237.47 P
-0.19 (signed varieties of) 329.15 225.47 P
0 F
-0.19 (char) 411.9 225.47 P
1 F
-0.19 ( and) 433.01 225.47 P
0 F
-0.19 (short) 454.85 225.47 P
1 F
-0.19 ( to) 479.84 225.47 P
0 F
-0.19 (int) 493.35 225.47 P
1 F
-0.19 ( and the) 505.56 225.47 P
2.31 (unsigned varieties to) 329.15 213.47 P
0 F
2.31 (unsigned int) 430.51 213.47 P
1 F
2.31 (. The type) 492.23 213.47 P
0 F
(char) 329.15 201.47 T
1 F
( is converted to) 350.26 201.47 T
0 F
(int) 420.81 201.47 T
1 F
(.) 433.02 201.47 T
3.33 (The compiler allows programmers to specify) 329.15 179.47 P
2.12 (precisely the promotions they will obtain from) 329.15 167.47 P
1.1 (the promotion of an object of a particular type.) 329.15 155.47 P
-0.13 (This is done with the two pragmas shown in Fig-) 329.15 143.47 P
0.83 (ure 4.1. The \336rst pragma provides a) 329.15 131.47 P
3 F
0.83 (literal) 496.04 131.47 P
1 F
0.83 ( pro-) 519.92 131.47 P
(motion and the second a) 329.15 119.47 T
3 F
(computed) 441.38 119.47 T
1 F
( promotion.) 485.26 119.47 T
99 538.35 540 621.4 R
7 X
V
6 F
0 X
(# pragma promote) 106.2 602.73 T
8 F
(type-name) 208.14 602.73 T
6 F
( :) 262.11 602.73 T
8 F
(type-name) 280.1 602.73 T
6 F
(# pragma compute promote) 106.2 578.73 T
8 F
(identif) 256.12 578.73 T
(ier) 298.1 578.73 T
0 F
(Figure 4.1) 303.09 554.73 T
99 538.35 540 621.4 R
0.5 H
2 Z
N
98.21 458 540.14 524.96 R
7 X
V
5 F
0 X
(# pragma promote char : int) 105.41 506.29 T
(# pragma promote unsigned short : unsigned int) 105.41 494.29 T
0 F
(Figure 4.2) 302.77 470.29 T
98.21 458 540.14 524.96 R
N
FMENDPAGE
%%EndPage: "46" 47
%%Page: "47" 47
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(47) 519.89 755.24 T
0 F
(4.1.1) 99 513.83 T
(Literal Integer Promotion) 135 513.83 T
1 F
0.46 (Literal integer promotion is where the promoted) 99 496.83 P
0 (type is provided directly) 99 484.83 P
0 (. The \336rst) 202.71 484.83 P
8 F
0.02 (type-name) 247.17 484.83 P
1 F
0 ( is) 301.14 484.83 P
0.41 (the type for which the promotion is being speci-) 99 472.83 P
2.28 (\336ed, it must be an integral type. The second) 99 460.83 P
8 F
-0.34 (type-name) 99 448.83 P
1 F
-0.16 ( is its promoted type; it must also be) 152.97 448.83 P
(an integral type.) 99 436.83 T
1.11 (An example of a literal promotions is shown in) 99 414.83 P
3.14 (Figure 4.2. The second promotion is slightly) 99 402.83 P
3.05 (controversial. If the promotion is intended to) 99 390.83 P
1.18 (re\337ect the ANSI promotion rules, then the pro-) 99 378.83 P
1.42 (moted type of) 99 366.83 P
0 F
1.42 (unsigned short) 166.6 366.83 P
1 F
1.42 ( will depend on) 240.22 366.83 P
-0.22 (whether the type) 99 354.83 P
0 F
-0.22 (int) 175.02 354.83 P
1 F
-0.22 ( can represent all the values) 187.23 354.83 P
2.13 (of type) 99 342.83 P
0 F
2.13 (unsigned short) 136.03 342.83 P
1 F
2.13 ( or not. Programmers) 210.35 342.83 P
(are faced with a choice. They can:) 99 330.83 T
(1.) 99 308.83 T
3.8 (Restrict the portability of the program to) 113.4 308.83 P
2.13 (those machines where they know the pro-) 113.4 296.83 P
(moted type of unsigned short.) 113.4 284.83 T
(2.) 99 262.83 T
4.89 (Choose a promotion type for) 113.4 262.83 P
0 F
4.89 ( unsigned) 259.05 262.83 P
0.79 (short) 113.4 250.83 P
1 F
0.79 ( and produce a program that does not) 138.39 250.83 P
1.9 (conform the ANSI C Standard on some of) 113.4 238.83 P
(the machines to which they port.) 113.4 226.83 T
(3.) 99 204.83 T
0.34 (Represent the promotion of) 113.4 204.83 P
0 F
0.34 (unsigned short) 238.62 204.83 P
1 F
1.11 (by a integral type token \050see Section 2.8.3\051) 113.4 192.83 P
1.11 (and de\336ne this token appropriately on each) 113.4 180.83 P
(target to which the program is being ported.) 113.4 168.83 T
(4.) 99 146.83 T
5.69 (Use computed promotions \050see Section) 113.4 146.83 P
(4.1.2\051.) 113.4 134.83 T
(An example of option3 is shown in Figure 4.3) 99 112.83 T
0 F
(4.1.2) 329.15 513.83 T
(Computed Promotions) 365.15 513.83 T
1 F
0.37 (If a promotion is required of a value whose pro-) 329.15 496.83 P
2.4 (motion has not been speci\336ed with) 329.15 484.83 P
0 F
2.4 (#pragma) 499.64 484.83 P
0.48 (promote) 329.15 472.83 P
1 F
0.48 (, then the compiler will exit with a con-) 369.13 472.83 P
2.06 (straint error unless there is a) 329.15 460.83 P
0 F
2.06 (#pragma com-) 470.92 460.83 P
7.89 (pute) 329.15 448.83 P
1 F
7.89 ( directive. This directive allows the) 350.25 448.83 P
2.77 (programmer to provide the identi\336cation of a) 329.15 436.83 P
2.32 (procedure token \050Section 2.10\051 for computing) 329.15 424.83 P
2.13 (the promotion type, of any integral type. This) 329.15 412.83 P
0.69 (token is then called whenever a promotion of a) 329.15 400.83 P
-0.17 (type, without a literal promotion, is required. The) 329.15 388.83 P
(procedure token must be declared as) 329.15 376.83 T
5 F
(PROC\050VARIETY\051VARIETY) 336.35 354.83 T
1 F
-0.25 (and an example is shown in Figure 4.4. The pro-) 329.15 330.83 P
2.36 (motion of all types except for) 329.15 318.83 P
0 F
2.36 (char) 473.27 318.83 P
1 F
2.36 ( are com-) 494.38 318.83 P
(puted using) 329.15 306.83 T
0 F
(comp_p) 383.6 306.83 T
1 F
(.) 421.92 306.83 T
0.85 (Currently) 329.15 284.83 P
0.85 (, it is not possible to de\336ne, within the) 368.95 284.83 P
1.47 (C language, tokens for performing the integral) 329.15 272.83 P
4.65 (promotions, although these can be de\336ned) 329.15 260.83 P
-0.07 (directly in TDF) 329.15 248.83 P
-0.07 (. With the TDF system, with token) 392.31 248.83 P
1.66 (de\336nition libraries are bound the following two) 329.15 236.83 P
(tokens for performing integral promotions:) 329.15 224.83 T
(1.) 329.15 202.83 T
2.83 (\322~promote\323 is the external identi\336cation of) 343.55 202.83 P
0.31 (the token, de\336ned on each target, to provide) 343.55 190.83 P
0.55 (the) 343.55 178.83 P
3 F
0.55 (value preserving) 360.77 178.83 P
1 F
0.55 ( promotions appropriate) 434.65 178.83 P
(to that target.) 343.55 166.83 T
(2.) 329.15 144.83 T
3.54 (\322~sign_promote\323 is the external identi\336ca-) 343.55 144.83 P
0.96 (tion of the token, de\336ned on each target, to) 343.55 132.83 P
6.39 (provide the) 343.55 120.83 P
3 F
6.39 (sign preserving) 408.55 120.83 P
1 F
6.39 ( promotions) 482.7 120.83 P
(appropriate to that target.) 343.55 108.83 T
98.21 645.48 540.14 725.84 R
7 X
V
5 F
0 X
(#pragma token VARIETY prom_t#) 105.41 707.17 T
(#pragma promote unsigned short : prom_t) 105.41 683.17 T
0 F
(Figure 4.3) 302.77 659.17 T
98.21 645.48 540.14 725.84 R
0.5 H
2 Z
N
98.21 538.35 540.14 627.63 R
7 X
V
5 F
0 X
(#pragma token PROC\050VARIETY\051VARIETY comp_p#) 105.41 608.96 T
(#pragma promote char : int) 105.41 584.96 T
(#pragma compute promote comp_p) 105.41 572.96 T
0 F
(Figure 4.4) 302.77 548.96 T
98.21 538.35 540.14 627.63 R
N
FMENDPAGE
%%EndPage: "47" 48
%%Page: "48" 48
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(48) 519.89 755.24 T
99 358.72 311.15 368.72 C
99 367.72 567 367.72 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 334.72 311.15 344.72 C
99 343.72 567 343.72 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.2) 99 349.38 T
(T) 135 349.38 T
(ag Name Classi\336cations) 142.51 349.38 T
1 10 Q
4.25 (Associated with identi\336ers in the) 99 318.05 P
3 F
4.25 (tag) 265.23 318.05 P
1 F
4.25 ( name) 279.12 318.05 P
1.26 (space \050ANSI C Standard, Section 3.1.2.3\051 is a) 99 306.05 P
2.78 (classi\336cation \050) 99 294.05 P
0 F
2.78 (struct) 164.53 294.05 P
1 F
2.78 (,) 192.3 294.05 P
0 F
2.78 (union) 200.63 294.05 P
1 F
2.78 ( or) 227.83 294.05 P
0 F
2.78 (enum) 247.83 294.05 P
1 F
2.78 (\051 of the) 274.48 294.05 P
0.62 (type to which they refer) 99 282.05 P
0.62 (. When any such identi-) 204.24 282.05 P
1.32 (\336er is used, it is preceded by its classi\336cation,) 99 270.05 P
3.6 (which must be identical to the classi\336cation) 99 258.05 P
0.18 (associated with the identi\336er \050ANSI C Standard,) 99 246.05 P
0.31 (Section 3.5.2.3\051. The inclusion of the pragma of) 99 234.05 P
1.66 (Figure 4.5 instructs the compiler to ignore the) 99 222.05 P
0.55 (classi\336cation at the use of the tag identi\336er and) 99 210.05 P
2.66 (assume the classi\336cation associated with the) 99 198.05 P
1.74 (identi\336er) 99 186.05 P
1.74 (. For example, in the presence of the) 136.22 186.05 P
0.97 (pragma, the program in Figure 4.6 is valid and) 99 174.05 P
-0.1 (semantically equivalent to the program in Figure) 99 162.05 P
(4.7.) 99 150.05 T
0.06 (If) 99 128.05 P
0 F
0.06 (warning) 107.4 128.05 P
1 F
0.06 ( is present in the pragma, then when-) 145.72 128.05 P
1.04 (ever the classi\336cation of the use of a tag does) 99 116.05 P
0.47 (not agree with that associated with its identi\336er) 330.33 362.05 P
0.47 (,) 539.7 362.05 P
(a warning message is reported.) 330.33 350.05 T
330.33 314.72 542.48 324.72 C
330.33 323.72 798.34 323.72 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
330.33 290.72 542.48 300.72 C
330.33 299.72 798.34 299.72 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.3) 330.33 305.38 T
(Re-de\336nition of types) 366.33 305.38 T
1 10 Q
1.66 (The ANSI C Standard \050Section 3.1.2.2\051 states) 330.33 274.05 P
0.65 (that identi\336ers corresponding to type de\336nitions) 330.33 262.05 P
-0.09 (have no linkage and consequently cannot be re-) 330.33 250.05 P
0.41 (de\336ned in the same scope. The inclusion of the) 330.33 238.05 P
0.76 (pragma of Figure 4.8 allow the rede\336nition of a) 330.33 226.05 P
0.07 (type, with an optional warning, provided that the) 330.33 214.05 P
0.95 (new de\336nition is compatible with the old de\336ni-) 330.33 202.05 P
3.88 (tion. The type associated with the identi\336er) 330.33 190.05 P
-0.1 (becomes the composite type \050ANSI C Standard,) 330.33 178.05 P
1.38 (Section 3.1.2.6\051 of the old and the new de\336ni-) 330.33 166.05 P
(tions.) 330.33 154.05 T
1.38 (An example of such a re-de\336nition is given by) 330.33 132.05 P
0.16 (the program in Figure 4.9, which is semantically) 330.33 120.05 P
(equivalent to the program in Figure 4.10.) 330.33 108.05 T
98.21 676.73 540.14 730.3 R
7 X
V
6 F
0 X
(# pragma TAG ignore class warning) 105.41 711.63 T
7 8 Q
(opt) 303.3 709.13 T
0 10 Q
(Figure 4.5) 302.77 687.63 T
98.21 676.73 540.14 730.3 R
0.5 H
2 Z
N
98.21 556.2 540.14 658.88 R
7 X
V
5 F
0 X
(#pragma TAG ignore class) 105.41 640.21 T
(struct s {int x,y;};) 105.41 616.21 T
(union s co-ord;) 105.41 592.21 T
0 F
(Figure 4.6) 302.77 568.21 T
98.21 556.2 540.14 658.88 R
N
98.21 462.46 540.14 542.81 R
7 X
V
5 F
0 X
(struct s {int x,y;};) 105.41 524.15 T
(struct s co-ord;) 105.41 500.15 T
0 F
(Figure 4.7) 302.77 476.15 T
98.21 462.46 540.14 542.81 R
N
98.21 391.04 540.14 449.07 R
7 X
V
6 F
0 X
(# pragma accept extra type def) 105.41 430.4 T
(initions warning) 285.31 430.4 T
7 8 Q
(opt) 381.26 427.9 T
0 10 Q
(Figure 4.8) 302.77 406.4 T
98.21 391.04 540.14 449.07 R
N
FMENDPAGE
%%EndPage: "48" 49
%%Page: "49" 49
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(49) 519.89 755.24 T
99 309.61 311.15 319.61 C
99 318.61 567 318.61 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 285.61 311.15 295.61 C
99 294.61 567 294.61 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.4) 99 300.28 T
(Generic pointers) 135 300.28 T
1 10 Q
3.25 (Historically) 99 268.95 P
0 F
3.25 (char *) 153.33 268.95 P
1 F
3.25 ( was used as the generic) 184.35 268.95 P
1.94 (pointer of C, but more recently this has been) 99 256.95 P
0.06 (replaced by) 99 244.95 P
0 F
0.06 (void *) 153.57 244.95 P
1 F
0.06 (. There are some old applica-) 180.85 244.95 P
1.94 (tions which, because they interact with newer) 99 232.95 P
2.69 (APIs, require the compatibility of) 99 220.95 P
0 F
2.69 (char *) 258.54 220.95 P
1 F
2.69 ( and) 289.01 220.95 P
0 F
1.73 (void *) 99 208.95 P
1 F
1.73 (. The inclusion of the pragma of Figure) 127.94 208.95 P
1.54 (4.1) 99 196.95 P
1.54 (1 instructs the compiler to treat) 112.15 196.95 P
0 F
1.54 (char *) 260.84 196.95 P
1 F
1.54 ( and) 290.15 196.95 P
0 F
1.5 (void *) 99 184.95 P
1 F
1.5 (as compatible, with the composite type) 132 184.95 P
1.42 (being) 99 172.95 P
0 F
1.42 (void *) 127.65 172.95 P
1 F
1.42 (. If the pragma includes) 156.28 172.95 P
0 F
1.42 (warning) 270.05 172.95 P
1 F
1.42 (,) 308.37 172.95 P
0.63 (then a warning is produced whenever the com-) 99 160.95 P
(patibility of) 99 148.95 T
0 F
(char *) 148.99 148.95 T
1 F
( and) 176.77 148.95 T
0 F
(void *) 198.99 148.95 T
1 F
( is required.) 226.21 148.95 T
329.15 309.61 541.3 319.61 C
329.15 318.61 797.15 318.61 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 285.61 541.3 295.61 C
329.15 294.61 797.15 294.61 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.5) 329.15 300.28 T
(Parameter Compatibility) 365.15 300.28 T
1 10 Q
0.13 (Many targets/systems pass function arguments,) 329.15 268.95 P
0.11 (of dif) 329.15 256.95 P
0.11 (fering types, in the same way) 350.74 256.95 P
0.11 (. For example) 479.98 256.95 P
4.9 (on the majority of systems characters are) 329.15 244.95 P
3.17 (passed as if they were integers. Some pro-) 329.15 232.95 P
1.34 (grams take advantage of this. The three prag-) 329.15 220.95 P
2.53 (mas introduced in Figure 4.12 are to specify) 329.15 208.95 P
0 (extra compatibility of function types by providing) 329.15 196.95 P
1.44 (extra compatibility for the function parameters.) 329.15 184.95 P
3.05 (They are referred to as) 329.15 172.95 P
3 F
3.05 (type-type parameter) 448.82 172.95 P
-0.23 (compatibility) 329.15 160.95 P
1 F
-0.23 (,) 383.39 160.95 P
3 F
-0.23 ( type-ellipsis compatibility) 386.17 160.95 P
1 F
-0.23 ( and) 498.44 160.95 P
3 F
-0.23 (ellip-) 520.2 160.95 P
(sis compatibility) 329.15 148.95 T
1 F
( respectively) 399.12 148.95 T
(.) 453.92 148.95 T
98.21 618.7 540.14 734.76 R
7 X
V
5 F
0 X
(#pragma accept extra type def) 105.41 716.1 T
(initions) 279.31 716.1 T
(typedef int t[];) 105.41 692.1 T
(typedef int t[6];) 105.41 680.1 T
(t z = {1,2,3,4,5,6};) 105.41 656.1 T
0 F
(Figure 4.9) 302.77 632.1 T
98.21 618.7 540.14 734.76 R
0.5 H
2 Z
N
98.21 524.96 540.14 600.85 R
7 X
V
5 F
0 X
(typedef int t[6];) 105.41 582.18 T
(t z = {1,2,3,4,5,6};) 105.41 558.18 T
0 F
(Figure 4.10) 299.99 534.18 T
98.21 524.96 540.14 600.85 R
N
98.21 453.53 540.14 511.57 R
7 X
V
6 F
0 X
(# pragma accept char * as void * warning) 105.41 492.9 T
7 8 Q
(opt) 345.28 490.4 T
0 10 Q
(Figure 4.1) 300.27 468.9 T
(1) 346.93 468.9 T
98.21 453.53 540.14 511.57 R
N
98.21 350.86 540.14 431.21 R
7 X
V
6 F
0 X
(# pragma accept argument) 105.41 412.55 T
8 F
(type-name) 255.32 412.55 T
6 F
( as) 309.3 412.55 T
8 F
(type-name) 333.28 412.55 T
6 F
(# pragma accept argument) 105.41 400.55 T
8 F
(type-name) 255.32 400.55 T
6 F
( ...) 309.3 400.55 T
(# pragma accept extra ...) 105.41 388.55 T
0 F
(Figure 4.12) 299.99 364.55 T
98.21 350.86 540.14 431.21 R
N
FMENDPAGE
%%EndPage: "49" 50
%%Page: "50" 50
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(50) 519.89 755.24 T
0 F
(4.5.1) 99 433.47 T
(T) 135 433.47 T
(ype-type parameter compatibility) 140.37 433.47 T
1 F
0.64 (When comparing two parameter types for com-) 99 416.47 P
-0.22 (patibility) 99 404.47 P
-0.22 (, as part of checking for the compatibility) 134.36 404.47 P
2.12 (of two function prototypes \050ANSI C Standard,) 99 392.47 P
1.84 (Section 3.1.2.6\051, if the parameter types would) 99 380.47 P
1.29 (otherwise be incompatible, they are treated as) 99 368.47 P
1.94 (compatible if they have previously been intro-) 99 356.47 P
0.81 (duced with a) 99 344.47 P
3 F
0.81 (type-type parameter compatibility) 160.31 344.47 P
1 F
0.81 (.) 308.37 344.47 P
1.8 (In this case, the second type in the) 99 332.47 P
3 F
1.8 ( type-type) 265.47 332.47 P
0.83 (parameter compatibility) 99 320.47 P
1 F
0.83 ( pragma is taken as the) 203.13 320.47 P
(composite type.) 99 308.47 T
0.88 (The) 99 286.47 P
3 F
0.88 (type-type parameter compatibility) 119.88 286.47 P
1 F
0.88 ( is transi-) 268.84 286.47 P
1.27 (tive, that is if type) 99 274.47 P
3 F
1.27 (A) 185.36 274.47 P
1 F
1.27 ( is compatible with type) 192.03 274.47 P
3 F
1.27 (B) 304.48 274.47 P
1 F
0.49 (and type) 99 262.48 P
3 F
0.49 (B) 141.09 262.48 P
1 F
0.49 (is compatible with type) 151.02 262.48 P
3 F
0.49 (C) 256.28 262.48 P
1 F
0.49 (, then type) 263.5 262.48 P
3 F
(A) 99 250.48 T
1 F
( is compatible with type) 105.67 250.48 T
3 F
(C) 211.76 250.48 T
1 F
(.) 218.97 250.48 T
0 F
(4.5.2) 99 224.48 T
(T) 135 224.48 T
(ype-ellipsis compatibility) 140.37 224.48 T
1 F
3.32 (When comparing two function prototypes for) 99 207.48 P
3.62 (compatibility) 99 195.48 P
3.62 (, if the prototypes have dif) 153.24 195.48 P
3.62 (ferent) 285.59 195.48 P
1.94 (numbers of arguments, they are compatible if) 99 183.48 P
(the following holds:) 99 171.48 T
(1.) 99 149.48 T
(Both prototypes have an ellipsis) 113.4 149.48 T
(2.) 99 127.48 T
0.28 (Each parameter type common to both proto-) 113.4 127.48 P
(types is compatible.) 113.4 115.48 T
(3.) 329.15 433.47 T
1.38 (Each extra parameter type in the prototype) 343.55 433.47 P
-0.08 (with more parameters, is either speci\336ed in a) 343.55 421.47 P
3 F
5.56 (type-ellipsis compatibility) 343.55 409.47 P
1 F
5.56 ( or is) 459.07 409.47 P
3 F
5.56 (type-type) 500.19 409.47 P
0.16 (parameter compatible) 343.55 397.47 P
1 F
0.16 ( to a type that is speci-) 440.35 397.47 P
(\336ed in a) 343.55 385.47 T
3 F
(type-ellipsis compatibility) 381.33 385.47 T
1 F
(.) 490.55 385.47 T
0.34 (The composite type of the two prototypes is the) 329.15 363.47 P
(prototype with the fewer arguments.) 329.15 351.47 T
0 F
(4.5.3) 329.15 325.47 T
(Ellipsis compatibility) 365.15 325.47 T
1 F
0.73 (If, when comparing two prototypes for compati-) 329.15 308.47 P
-0.05 (bility) 329.15 296.47 P
-0.05 (, one has an ellipsis and the other does not,) 348.4 296.47 P
1.02 (but otherwise the two types would be compati-) 329.15 284.47 P
0.87 (ble, then if) 329.15 272.47 P
3 F
0.87 (ellipsis compatibility) 380.64 272.47 P
1 F
0.87 ( has been intro-) 469.25 272.47 P
0.13 (duced by its pragma \050the third pragma of Figure) 329.15 260.47 P
(4.12\051, the two types are compatible.) 329.15 248.48 T
(The composite type has an ellipsis.) 329.15 226.48 T
0 F
(4.5.4) 329.15 200.48 T
(Examples) 365.15 200.48 T
1 F
-0.07 (Figure 4.13 is an example of the use of parame-) 329.15 183.48 P
1.37 (ter compatibility) 329.15 171.48 P
1.37 (, and Figure 4.14 is a program) 399.2 171.48 P
(with equivalent semantics.) 329.15 159.48 T
98.21 560.67 540.14 734.76 R
7 X
V
5 F
0 X
(#pragma accept argument char as short) 105.41 716.1 T
(#pragma accept argument short as int) 105.41 704.1 T
(#pragma accept argument char * ...) 105.41 692.1 T
(int f1\050char,...\051;) 105.41 668.1 T
(int f1\050int,char*,...\051;) 105.41 656.1 T
(#pragma accept extra ellipsis) 105.41 632.1 T
(int f2\050short\051;) 105.41 608.1 T
(int f2\050char,...\051;) 105.41 596.1 T
0 F
(Figure 4.13) 299.99 572.1 T
98.21 560.67 540.14 734.76 R
0.5 H
2 Z
N
98.21 466.93 540.14 538.35 R
7 X
V
5 F
0 X
(int f1\050int,...\051;) 105.41 519.68 T
(int f2\050short,...\051;) 105.41 507.68 T
0 F
(Figure 4.14) 299.99 483.68 T
98.21 466.93 540.14 538.35 R
N
FMENDPAGE
%%EndPage: "50" 51
%%Page: "51" 51
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(51) 519.89 755.24 T
99 514.96 311.15 524.96 C
99 523.96 567 523.96 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 490.96 311.15 500.96 C
99 499.96 567 499.96 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.6) 99 505.62 T
(External Name Space) 135 505.62 T
1 10 Q
5.09 (Consider the program in Figure 4.15, this) 99 474.29 P
1.87 (declares, on line 2, a function) 99 462.29 P
3 F
1.87 (g) 242.98 462.29 P
1 F
1.87 ( with external) 248.54 462.29 P
-0.07 (linkage. The scope of) 99 450.29 P
3 F
-0.07 (g) 196.5 450.29 P
1 F
-0.07 ( terminates at line 4, and) 202.05 450.29 P
3.88 (so, according to ANSI C Standard, Section) 99 438.29 P
(3.3.2.2,) 99 426.29 T
3 F
(g) 135.12 426.29 T
1 F
( is implicitly declared as:) 140.68 426.29 T
5 F
(extern int g\050\051;) 106.2 404.29 T
1 F
0.79 (This re-introduces) 99 380.29 P
3 F
0.79 (g) 183.33 380.29 P
1 F
0.79 ( as a function with external) 188.89 380.29 P
3.25 (linkage but now as a function delivering) 99 368.29 P
0 F
3.25 (int) 298.93 368.29 P
1 F
0.13 (instead of) 99 356.29 P
0 F
0.13 (void) 145.38 356.29 P
1 F
0.13 (. This is clearly an error because) 165.93 356.29 P
0.55 (both declarations must relate to the same func-) 99 344.29 P
1.19 (tion because they have external linkage \050ANSI) 99 332.29 P
(C Standard, Section 3.1.2.2\051.) 99 320.29 T
(If the pragma) 99 298.29 T
5 F
(#pragma name space backdrop) 106.2 276.29 T
1 F
0.43 (is included in a program, then after that point in) 99 252.29 P
1.2 (the program, before implicitly declaring a func-) 99 240.29 P
2.98 (tion, it is searched for in the external name) 99 228.29 P
2.46 (space. If it is found, the type in the external) 99 216.29 P
(name space is assumed.) 99 204.29 T
-0.26 (In the example of Figure 4.15, the second use of) 99 182.29 P
3 F
0.94 (g) 99 170.29 P
1 F
0.94 (, on line 5, would assume the type) 104.56 170.29 P
0 F
0.94 (void \050\051) 265.95 170.29 P
1 F
0.94 ( as) 296.88 170.29 P
(opposed to) 99 158.29 T
0 F
(int\050\051) 151.23 158.29 T
1 F
(.) 170.1 158.29 T
329.15 514.96 541.3 524.96 C
329.15 523.96 797.15 523.96 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 490.96 541.3 500.96 C
329.15 499.96 797.15 499.96 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.7) 329.15 505.62 T
(External V) 365.15 505.62 T
(olatility) 432.55 505.62 T
1 10 Q
(The inclusion of the pragma) 329.15 474.29 T
5 F
(# pragma external volatile) 336.35 452.29 T
1 F
2.49 (instructs the compiler) 329.15 418.29 P
2.49 (, thereafter) 427.99 418.29 P
2.49 (, to treat any) 478.27 418.29 P
1.94 (object declared with external linkage \050ANSI C) 329.15 406.29 P
1.26 (Standard, Section 3.1.2.2\051 as if it were volatile) 329.15 394.29 P
(\050ANSI C Standard, Section 3.5.3\051.) 329.15 382.29 T
329.15 346.96 541.3 356.96 C
329.15 355.96 797.15 355.96 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 322.96 541.3 332.96 C
329.15 331.96 797.15 331.96 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.8) 329.15 337.62 T
(Enumeration Constants) 365.15 337.62 T
1 10 Q
0.27 (The ANSI C Standard, Section 3.5.2.3, requires) 329.15 306.29 P
0.78 (that the \336rst introduction of an enumeration tag) 329.15 294.29 P
0.55 (shall declare the constants associated with that) 329.15 282.29 P
0.12 (tag. This can be relaxed by using the pragma of) 329.15 270.29 P
1.47 (Figure 4.16 which, when included, permits the) 329.15 258.29 P
4.15 (declaration and use of an enumeration tag) 329.15 246.29 P
0.18 (before the declaration of its associated enumer-) 329.15 234.29 P
5.55 (ation constants. If) 329.15 222.29 P
0 F
5.55 (warning) 426.9 222.29 P
1 F
5.55 ( occurs in the) 465.22 222.29 P
3.88 (pragma, then a warning message is output) 329.15 210.29 P
(whenever this facility is used.) 329.15 198.29 T
329.15 162.96 541.3 172.96 C
329.15 171.96 797.15 171.96 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 138.96 541.3 148.96 C
329.15 147.96 797.15 147.96 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.9) 329.15 153.62 T
(Lvalue Conditionals) 365.15 153.62 T
1 10 Q
0.73 (The ANSI C Standard, Section 3.2.2.1 requires) 329.15 122.29 P
0 (that the) 329.15 110.29 P
3 F
0 (lvalue) 365.25 110.29 P
1 F
0 ( conversion is applied to the oper-) 391.36 110.29 P
0.08 (ands of most operators including the conditional) 329.15 98.29 P
98.21 623.16 540.14 739.23 R
7 X
V
5 F
0 X
(void f\050void\051{) 105.41 720.56 T
({) 116.21 708.56 T
(extern void g\050\051;) 134.21 708.56 T
(/*line 2*/) 431.21 708.56 T
(g\0503\051;) 134.21 696.56 T
(}) 134.21 684.56 T
(/*line 4*/) 431.21 684.56 T
(g\0507\051;) 116.21 672.56 T
(/*line 5*/) 431.21 672.56 T
(}) 116.21 660.56 T
0 F
(Figure 4.15) 299.99 636.56 T
98.21 623.16 540.14 739.23 R
0.5 H
2 Z
N
98.21 547.28 540.14 605.31 R
7 X
V
6 F
0 X
(# pragma warning) 105.41 586.64 T
7 8 Q
(opt) 201.35 584.14 T
6 10 Q
(forward enum declarations) 221.74 586.64 T
0 F
(Figure 4.16) 299.99 562.64 T
98.21 547.28 540.14 605.31 R
N
FMENDPAGE
%%EndPage: "51" 52
%%Page: "52" 52
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(52) 519.89 755.24 T
3.32 (operator \050ANSI C Standard, Section 3.3.15\051.) 99 406.69 P
0.23 (From this it follows that the expression resulting) 99 394.69 P
(from a conditional cannot be an) 99 382.69 T
3 F
(lvalue) 241.22 382.69 T
1 F
(.) 267.33 382.69 T
1.77 (There is no dif) 99 360.69 P
1.77 (\336culty in implementing a condi-) 167.45 360.69 P
0.7 (tional that delivers an) 99 348.69 P
3 F
0.7 (lvalue) 199.04 348.69 P
1 F
0.7 ( when both options) 225.14 348.69 P
0.48 (of the conditional are) 99 336.69 P
3 F
0.48 (lvalue) 196.47 336.69 P
1 F
0.48 (s of objects of com-) 222.58 336.69 P
0.17 (patible types. However) 99 324.69 P
0.17 (, because of the possible) 199.89 324.69 P
1.02 (conversions that take place to match the oper-) 99 312.69 P
0.24 (ands of a conditional it is only sensible to return) 99 300.69 P
0.13 (an) 99 288.69 P
3 F
0.13 (lvalue) 113.02 288.69 P
1 F
0.13 ( when the) 139.13 288.69 P
3 F
0.13 (lvalue) 185.64 288.69 P
1 F
0.13 ( conversion is the only) 211.74 288.69 P
0.23 (conversion that can be applied. For this reason,) 99 276.69 P
0 (the pragma of Figure 4.17 instructs the compiler) 99 264.69 P
(to deliver an lvalue from a conditional when:) 99 252.69 T
(1.) 99 230.69 T
-0.1 (Both options of the conditional operator have) 113.4 230.69 P
3.75 (compatible compound types \050see Section) 113.4 218.69 P
(2.8.6\051.) 113.4 206.69 T
(2.) 99 184.69 T
(Both options of the conditional are) 113.4 184.69 T
3 F
(lvalues) 267.3 184.69 T
1 F
(.) 298.4 184.69 T
0.34 (in which case the) 99 162.69 P
3 F
0.34 (lvalue) 179.8 162.69 P
1 F
0.34 ( delivered has the com-) 205.91 162.69 P
2.56 (posite type of the two options. If) 99 150.69 P
0 F
2.56 (warning) 260.27 150.69 P
1 F
2.56 ( is) 298.59 150.69 P
0.62 (include in the pragma, then a warning is output) 99 138.69 P
1.74 (whenever this facility is used by the program-) 99 126.69 P
(mer) 99 114.69 T
(.) 115.66 114.69 T
0.55 (An example of the use of this pragma is shown) 329.15 406.69 P
(in Figure 4.18.) 329.15 394.69 T
329.15 359.36 541.3 369.36 C
329.15 368.36 797.15 368.36 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 335.36 541.3 345.36 C
329.15 344.36 797.15 344.36 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.10) 329.15 350.02 T
(Syntactic Extensions) 365.15 350.02 T
1 10 Q
0.47 (There are a collection of pragmas \050Figure 4.19\051) 329.15 318.69 P
1.75 (for allowing non-semantic extensions to the C) 329.15 306.69 P
1.84 (language. They are described in the following) 329.15 294.69 P
(sub-sections.) 329.15 282.69 T
0 F
(4.10.1) 329.15 256.69 T
(No external declarations) 365.15 256.69 T
1 F
0.79 (The inclusion of this pragma instructs the com-) 329.15 239.69 P
0.69 (piler to allow a program with no external decla-) 329.15 227.69 P
3.18 (rations/de\336nitions \050ANSI C Standard, Section) 329.15 215.69 P
2.06 (3.7\051, that is a program without a) 329.15 203.69 P
4 F
2.06 (translation-) 486.88 203.69 P
(unit) 329.15 191.69 T
1 F
(.) 347.47 191.69 T
0 F
(4.10.2) 329.15 165.69 T
(Extra Semi-colons) 365.15 165.69 T
1 F
-0.24 (The inclusion of this pragma allows the inclusion) 329.15 148.69 P
0.63 (of extra semi-colons before and after the exter-) 329.15 136.69 P
2.67 (nal declarations and de\336nitions that form the) 329.15 124.69 P
4 F
4.44 (translation-unit) 329.15 112.69 P
1 F
4.44 ( \050ANSI C Standard, Section) 401.89 112.69 P
(3.7\051.) 329.15 100.69 T
98.21 681.2 540.14 734.76 R
7 X
V
6 F
0 X
(# pragma accept conditional lvalue warning) 105.41 716.1 T
7 8 Q
(opt) 357.27 713.6 T
0 10 Q
(Figure 4.17) 299.99 692.1 T
98.21 681.2 540.14 734.76 R
0.5 H
2 Z
N
98.21 551.74 540.14 667.8 R
7 X
V
5 F
0 X
(#pragma accept conditional lvalue) 105.41 649.14 T
(struct s {int x,y;};) 105.41 625.14 T
(int f\050int c, int sx, struct s *s1, struct s *s2\051{) 105.41 613.14 T
(return \050c?s1:s2\051->x = sx;) 116.21 601.14 T
(}) 116.21 589.14 T
0 F
(Figure 4.18) 299.99 565.14 T
98.21 551.74 540.14 667.8 R
N
98.21 431.21 540.14 538.35 R
7 X
V
6 F
0 X
(# pragma accept no def) 105.41 519.68 T
(initions) 237.34 519.68 T
5 F
(/*Section 4.10.1*/) 431.21 519.68 T
6 F
(# pragma accept extra ;) 105.41 507.68 T
5 F
(/*Section 4.10.2*/) 431.21 507.68 T
6 F
(# pragma accept unknown escapes warning) 105.41 495.68 T
7 8 Q
(opt) 339.28 493.18 T
5 10 Q
(/*Section 4.10.3*/) 431.21 495.68 T
6 F
(# pragma accept weak equal macro warning) 105.41 483.68 T
7 8 Q
(opt) 345.28 481.18 T
5 10 Q
(/*Section 4.10.4*/) 431.21 483.68 T
6 F
(# pragma accept implicit integer type warning) 105.41 471.68 T
7 8 Q
(opt) 375.26 469.18 T
5 10 Q
(/*Section 4.10.5*/) 431.21 471.68 T
0 F
(Figure 4.19) 299.99 447.68 T
98.21 431.21 540.14 538.35 R
N
FMENDPAGE
%%EndPage: "52" 53
%%Page: "53" 53
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(53) 519.89 755.24 T
0 F
(4.10.3) 99 460.26 T
(Unknown Escape Sequences) 135 460.26 T
1 F
0.79 (The inclusion of this pragma instructs the com-) 99 443.26 P
3.79 (piler to allow escape sequences other than) 99 431.26 P
2.77 (those speci\336ed in ANSI C Standard, Section) 99 419.26 P
0.34 (3.1.3.4. In this case the program is compiled as) 99 407.26 P
4.71 (if the \324\134\324, marking the start of the escape) 99 395.26 P
5.08 (sequence, was not present. If) 99 383.26 P
0 F
5.08 (warning) 257.75 383.26 P
1 F
5.08 ( is) 296.07 383.26 P
0.07 (present in the pragma, then a warning message) 99 371.26 P
(is output whenever this pragma is used.) 99 359.26 T
0 F
(4.10.4) 99 333.26 T
(Macro Equality) 135 333.26 T
1 F
3.23 (The ANSI C Standard, Section 3.8.3, states) 99 316.26 P
2.13 (that: for) 99 304.26 P
3 F
2.13 (function-like) 139.94 304.26 P
1 F
2.13 ( macros to be equal, the) 193.26 304.26 P
0.55 (spelling of the parameters and the replacement) 99 292.26 P
2.7 (lists must be equal. Since the names of the) 99 280.26 P
0.77 (parameters to) 99 268.26 P
3 F
0.77 (function-like) 164.98 268.26 P
1 F
0.77 ( macros are inciden-) 218.3 268.26 P
4.28 (tal to their semantics, the inclusion of this) 99 256.26 P
2.4 (pragma allows \050with an optional warning\051 the) 99 244.26 P
3.1 (equality of two function-like macros provided) 99 232.26 P
0.31 (there is a consistent substitution of the parame-) 99 220.26 P
(ters of the one macro to obtain the other) 99 208.26 T
(.) 276.23 208.26 T
2.14 (An example of a valid function-like macro re-) 99 186.26 P
(de\336nition is given in Figure 4.20.) 99 174.26 T
0 F
(4.10.5) 99 148.26 T
(Implicit integer type) 135 148.26 T
4 F
0.55 (External-declaration) 99 131.26 P
1 F
0.55 (s \050ANSI C Standard, Sec-) 195.09 131.26 P
0.09 (tion 3.7\051 are either) 99 119.26 P
4 F
0.09 (function-de\336nition) 183.25 119.26 P
1 F
0.09 (s or) 270.98 119.26 P
4 F
0.09 (dec-) 290.6 119.26 P
1.39 (laration) 99 107.26 P
1 F
1.39 (s.) 135.1 107.26 P
4 F
1.39 (Function-de\336nition) 147.04 107.26 P
1 F
1.39 (s do not require) 237.54 107.26 P
12.39 (the presence of) 329.15 460.26 P
4 F
12.39 (declaration-speci\336ers) 437.98 460.26 P
1 F
0.92 (whereas) 329.15 448.26 P
4 F
0.92 (declaration) 370.61 448.26 P
1 F
0.92 (s do. The inclusion of this) 423.93 448.26 P
2.21 (pragma relieves the need for the) 329.15 436.26 P
3 F
2.21 (declaration-) 489.08 436.26 P
0.31 (speci\336ers) 329.15 424.26 P
1 F
0.31 ( \050with an optional warning\051 in the case) 371.36 424.26 P
0.55 (of) 329.15 412.26 P
3 F
0.55 (declaration) 340.81 412.26 P
1 F
0.55 (s, consistently assuming that they) 389.69 412.26 P
(consist only of) 329.15 400.26 T
0 F
(int) 395.25 400.26 T
1 F
(.) 407.46 400.26 T
329.15 364.93 541.3 374.93 C
329.15 373.93 797.15 373.93 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 340.93 541.3 350.93 C
329.15 349.93 797.15 349.93 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.1) 329.15 355.59 T
(1) 347.83 355.59 T
(Directive Control) 365.15 355.59 T
1 10 Q
1.94 (The pragmas of are for controlling the use of) 329.15 324.26 P
(pre-processing directives.) 329.15 312.26 T
0 F
(4.1) 329.15 286.26 T
(1.1) 342.49 286.26 T
(Pragma Control) 365.15 286.26 T
1 F
0.15 (Except for those pragmas described in this doc-) 329.15 269.26 P
1.58 (ument, all pragmas cause the compiler to exit) 329.15 257.26 P
-0.16 (with a constraint error) 329.15 245.26 P
-0.16 (. This pragma instructs the) 424.2 245.26 P
0.79 (compiler to accept, but ignore \050with an optional) 329.15 233.26 P
1.98 (warning\051 any pragmas that it does not recog-) 329.15 221.26 P
(nise.) 329.15 209.26 T
0 F
(4.1) 329.15 183.26 T
(1.2) 342.49 183.26 T
(Extra directives) 365.15 183.26 T
1 F
5.44 (There are four pre-processing \050) 329.15 166.26 P
0 F
5.44 (\336le) 489.2 166.26 P
1 F
5.44 (,) 503.65 166.26 P
0 F
5.44 (ident) 514.64 166.26 P
1 F
5.44 (,) 538.52 166.26 P
0 F
2.12 (assert) 329.15 154.26 P
1 F
2.12 (,) 358.59 154.26 P
0 F
2.12 (unassert) 366.27 154.26 P
1 F
2.12 (\051 directives that are used by) 407.93 154.26 P
0.23 (programs that are designed to be compiled with) 329.15 142.26 P
0.07 (C compilers meeting the speci\336cation of Ref [5].) 329.15 130.26 P
1.38 (These directives are accepted by the compiler) 329.15 118.26 P
1.38 (by using the second pragma of Figure 4.21. If) 329.15 106.26 P
98.21 632.09 540.14 734.76 R
7 X
V
5 F
0 X
(# pragma weak equal macro) 105.41 716.1 T
(#def) 105.41 692.1 T
(ine A\050x\051x+2) 129.4 692.1 T
(#def) 105.41 668.1 T
(ine A\050y\051y+2) 129.4 668.1 T
0 F
(Figure 4.20) 299.99 644.1 T
98.21 632.09 540.14 734.76 R
0.5 H
2 Z
N
98.21 480.32 540.14 614.24 R
7 X
V
6 F
0 X
(# pragma unknown pragma warning) 105.41 595.57 T
7 8 Q
(opt) 291.31 593.07 T
5 10 Q
(/*Section 4.11.1*/) 431.21 595.57 T
6 F
(# pragma accept directive ignore) 105.41 583.57 T
7 8 Q
(opt) 297.3 581.07 T
7 10 Q
( standard-dir) 311.69 583.57 T
5 F
(/*Section 4.11.2*/) 431.21 583.57 T
7 F
(standard-dir:) 105.41 559.57 T
6 F
(f) 116.21 547.57 T
(ile) 122.2 547.57 T
(ident) 116.21 535.57 T
(assert) 116.21 523.57 T
(unassert) 116.21 511.57 T
0 F
(Figure 4.21) 299.99 487.57 T
98.21 480.32 540.14 614.24 R
N
FMENDPAGE
%%EndPage: "53" 54
%%Page: "54" 54
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(54) 519.89 755.24 T
0 F
1.17 (ignore) 99 709.23 P
1 F
1.17 ( is present in the pragma, then the pre-) 129.54 709.23 P
5.46 (processing directive, to which it refers, is) 99 697.23 P
7.88 (ignored, otherwise it has the semantics) 99 685.23 P
(expressed in Ref [5].) 99 673.23 T
5.99 (The compiler also accepts two directives,) 99 651.23 P
0 F
4.88 (#pragma weak) 99 639.23 P
1 F
4.88 ( and) 172.76 639.23 P
0 F
4.88 (#pragma ident) 204.75 639.23 P
1 F
4.88 ( which) 277.94 639.23 P
(implement the semantics expressed in Ref [5].) 99 627.23 T
FMENDPAGE
%%EndPage: "54" 55
%%Page: "55" 55
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(55) 519.89 755.24 T
99 699.4 540 711.4 C
99 710.4 567 710.4 2 L
1 H
2 Z
0 X
0 K
N
99 707.4 567 707.4 2 L
N
0 0 595.3 841.9 C
99 663.4 540 675.4 C
99 674.4 567 674.4 2 L
1 H
2 Z
0 X
0 K
N
99 671.4 567 671.4 2 L
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(5) 99 683.4 T
(Correctness checking) 126 683.4 T
1 10 Q
3.33 (The compiler has the capability of providing) 99 353.73 P
-0.22 (some checks to help in the detection of common) 99 341.73 P
-0.07 (errors made in programming in C. These can be) 99 329.73 P
1.31 (thought of as similar to Lint checks, but rather) 99 317.73 P
0.64 (than being performed separately from the com-) 99 305.73 P
4.43 (pilation process, they are performed during) 99 293.73 P
(compilation.) 99 281.73 T
99 246.4 311.15 256.4 C
99 255.4 567 255.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 222.4 311.15 232.4 C
99 231.4 567 231.4 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(5.1) 99 237.07 T
(Non-prototype checking) 135 237.07 T
1 10 Q
4.44 (There is still considerable use of functions) 99 205.73 P
2.58 (de\336ned without prototypes. One of the major) 99 193.73 P
1.1 (reasons being the need to compile an applica-) 99 181.73 P
0.95 (tion with as many compilers as possible, some) 99 169.73 P
(of which do not readily support prototypes.) 99 157.73 T
0.63 (The major problem, from a correctness point of) 99 135.73 P
1.87 (view) 99 123.73 P
1.87 (, of the absence of prototypes is that the) 118.44 123.73 P
4.71 (function declarations provide no information) 99 111.73 P
0.31 (about the types of the arguments. For example,) 99 99.73 P
0.18 (consider the program in Figure 5.1. The call of) 329.15 353.73 P
0 F
0.18 (f) 537.97 353.73 P
1 F
0.3 (on line 4 is unde\336ned if) 329.15 341.73 P
0 F
0.3 (f) 435.93 341.73 P
1 F
0.3 (is de\336ned as in Figure) 442.34 341.73 P
0.61 (5.3 \050because 6 is passed through as an) 329.15 329.73 P
0 F
0.61 (int) 511.8 329.73 P
1 F
0.61 ( not) 524.02 329.73 P
-0.05 (a) 329.15 317.73 P
0 F
-0.05 (long) 337.43 317.73 P
1 F
-0.05 (\051, but well de\336ned if it is de\336ned as in Fig-) 358.53 317.73 P
(ure 5.2 \050ANSI C Standard, Section 3.3.2.2\051.) 329.15 305.73 T
-0.07 (On a system where) 329.15 283.73 P
0 F
-0.07 (int) 417.76 283.73 P
1 F
-0.07 ( and) 429.97 283.73 P
0 F
-0.07 (long) 452.06 283.73 P
1 F
-0.07 ( have the same) 473.16 283.73 P
0.41 (representation and) 329.15 271.73 P
3 F
0.41 (f) 416.08 271.73 P
1 F
0.41 ( is de\336ned as in Figure 5.3,) 418.86 271.73 P
-0.22 (there are no dif) 329.15 259.73 P
-0.22 (\336culties. However) 395.54 259.73 P
-0.22 (, if this program) 473.08 259.73 P
-0.14 (were compiled on a machine with 32 bit integers) 329.15 247.73 P
-0.23 (and 64 bit longs then there is no guarantee as to) 329.15 235.73 P
(what will be the ef) 329.15 223.73 T
(fect of the call.) 408.4 223.73 T
-0.12 (In order to get a handle on this problem, the lan-) 329.15 201.73 P
0.26 (guage has been extended to accept a new type) 329.15 189.73 P
1.58 (constructor to represent the type of a function) 329.15 177.73 P
0.36 (de\336ned without a prototype. This type construc-) 329.15 165.73 P
(tor is called the) 329.15 153.73 T
3 F
(weak prototype constructor) 399.14 153.73 T
1 F
(.) 518.57 153.73 T
0 F
(5.1.1) 329.15 127.73 T
(The weak prototype constructor) 365.15 127.73 T
1 F
2.31 (The) 329.15 110.73 P
3 F
2.31 (weak prototype constructor) 351.45 110.73 P
1 F
2.31 ( is a keyword) 476.05 110.73 P
2.53 (which is introduced into the language as the) 329.15 98.73 P
99 517.9 540 621.4 R
7 X
V
5 F
0 X
(int f\050\051;) 106.2 602.73 T
(int g\050void\051{) 106.2 578.73 T
(return f\0506\051;) 117 566.73 T
(/*line 4*/) 432 566.73 T
(}) 117 554.73 T
0 F
(Figure 5.1) 303.09 530.73 T
99 517.9 540 621.4 R
0.5 H
2 Z
N
99 450.4 540 504.4 R
7 X
V
5 F
0 X
(int f\050i\051int i;{return i+1;}) 106.2 485.73 T
0 F
(Figure 5.2) 303.09 461.73 T
99 450.4 540 504.4 R
N
99 378.4 540 432.4 R
7 X
V
5 F
0 X
(int f\050i\051long i;{return i+1;}) 106.2 413.73 T
0 F
(Figure 5.3) 303.09 389.73 T
99 378.4 540 432.4 R
N
FMENDPAGE
%%EndPage: "55" 56
%%Page: "56" 56
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(56) 519.89 755.24 T
4 F
0 (identi\336er) 99 394.23 P
1 F
0 ( of the pragma of Figure 5.4. This con-) 141.21 394.23 P
1.66 (structor can be placed immediately before the) 99 382.23 P
1.18 (opening round bracket of a parameter type list) 99 370.23 P
3.01 (of a function prototype. The inclusion of the) 99 358.23 P
1.1 (weak prototype constructor in a function proto-) 99 346.23 P
1.03 (type is to introduce a type that describes func-) 99 334.23 P
4.1 (tions de\336ned without prototypes and whose) 99 322.23 P
0.39 (parameters have the types given by the param-) 99 310.23 P
(eter type list.) 99 298.23 T
0.49 (The program in Figure 5.5 is an example of the) 99 276.23 P
1.42 (use of a weak prototype constructor) 99 264.23 P
1.42 (. The key-) 263.87 264.23 P
0.48 (word) 99 252.23 P
0 F
0.48 (_WEAK) 123.92 252.23 P
1 F
0.48 ( is introduced on line 1. Then, the) 160.01 252.23 P
0.3 (declaration of a function) 99 240.23 P
0 F
0.3 (f) 209.1 240.23 P
1 F
0.3 (occurs on line 3. This) 215.51 240.23 P
0.86 (function is de\336ned without a prototype and has) 99 228.23 P
0.94 (one parameter of type) 99 216.23 P
0 F
0.94 (long) 203.33 216.23 P
1 F
0.94 (, that is declaration) 224.43 216.23 P
(corresponds to the one de\336ned in Figure 5.3.) 99 204.23 T
0 F
(5.1.2) 99 178.23 T
(Argument checking) 135 178.23 T
1 F
-0.17 (If, in a function call, the function has a weak pro-) 99 161.23 P
0.43 (totype type, then the compiler is in a position to) 99 149.23 P
1.02 (check the correctness of the arguments as fol-) 99 137.23 P
(lows:) 99 125.23 T
(1.) 327.85 394.23 T
2.22 (The default argument promotions \050ANSI C) 342.25 394.23 P
0.27 (Standard, Section 3.3.2.2\051 are applied to the) 342.25 382.23 P
0.69 (argument. The default argument promotions) 342.25 370.23 P
1.22 (are applied to the corresponding parameter) 342.25 358.23 P
1.19 (type in the weak prototype. If the promoted) 342.25 346.23 P
2.59 (parameter type is not compatible with the) 342.25 334.23 P
1.67 (promoted argument type the compiler exits) 342.25 322.23 P
(with a constraint error) 342.25 310.23 T
(.) 437.79 310.23 T
(2.) 327.85 288.23 T
3.98 (The promoted argument is passed as a) 342.25 288.23 P
(parameter to the function being called.) 342.25 276.23 T
-0.21 (The call of) 327.85 254.23 P
0 F
-0.21 (f) 376.11 254.23 P
1 F
-0.21 (on line 6 is illegal because the argu-) 382.02 254.23 P
1.1 (ment promotion of the argument is) 327.85 242.23 P
0 F
1.1 (int) 489.46 242.23 P
1 F
1.1 ( and the) 501.67 242.23 P
2.12 (argument promotion of the parameter is) 327.85 230.23 P
0 F
2.12 (long) 518.9 230.23 P
1 F
(which are incompatible.) 327.85 218.23 T
0 F
(5.1.3) 327.85 192.23 T
(W) 363.85 192.23 T
(eak Argument conversion) 373.11 192.23 T
1 F
0.55 (Consider the program in Figure 5.6. In terms of) 327.85 175.23 P
-0.15 (the function call, it is well de\336ned. The promoted) 327.85 163.23 P
0.86 (type of the argument is) 327.85 151.23 P
0 F
0.86 (int) 436.58 151.23 P
1 F
0.86 (, as is the promoted) 448.8 151.23 P
3.01 (type of the parameter) 327.85 139.23 P
3.01 (. However) 431.32 139.23 P
3.01 (, there is an) 478.76 139.23 P
2.12 (implicit conversion that takes place within the) 327.85 127.23 P
1.34 (function body to convert the argument back to) 327.85 115.23 P
0 F
2.69 (short) 327.85 103.23 P
1 F
2.69 (. If the program is being compiled with) 352.84 103.23 P
99 684.4 540 738.4 R
7 X
V
6 F
0 X
(# pragma accept weak prototype) 106.2 719.73 T
8 F
(identif) 292.1 719.73 T
(ier) 334.08 719.73 T
0 F
(Figure 5.4) 303.09 695.73 T
99 684.4 540 738.4 R
0.5 H
2 Z
N
99 535.9 540 666.4 R
7 X
V
5 F
0 X
(# pragma accept weak prototype _WEAK) 106.2 647.73 T
(/*line 1*/) 432 647.73 T
(int f _WEAK\050long\051;) 106.2 623.73 T
(/*line 3*/) 432 623.73 T
(int g\050void\051{) 106.2 599.73 T
(return f\0506\051;) 117 587.73 T
(/*line 6*/) 432 587.73 T
(}) 117 575.73 T
0 F
(Figure 5.5) 303.09 551.73 T
99 535.9 540 666.4 R
N
99 418.9 540 522.4 R
7 X
V
5 F
0 X
(#pragma accept weak prototype _WEAK) 106.2 503.73 T
(int f _WEAK\050short\051;) 106.2 479.73 T
(int g\050int a\051{ return f\050a\051;}) 106.2 455.73 T
0 F
(Figure 5.6) 303.09 431.73 T
99 418.9 540 522.4 R
N
FMENDPAGE
%%EndPage: "56" 57
%%Page: "57" 57
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(57) 519.89 755.24 T
0.46 (implicit conversion checks this program will \337ag) 98.35 646.23 P
0.06 (an error because it is not an allowed conversion) 98.35 634.23 P
0.13 (under Section 3.3. The rules for the detection of) 98.35 622.23 P
3.19 (implicit conversions during argument passing) 98.35 610.23 P
(are as follows: If) 98.35 598.23 T
(1.) 98.35 576.23 T
0.62 ( The program is being compiled in the pres-) 112.75 576.23 P
(ence of implicit conversion checks.) 112.75 564.23 T
(2.) 98.35 542.23 T
4.02 (The un-promoted argument would, under) 112.75 542.23 P
0.33 (conversion to the un-promoted weak param-) 112.75 530.23 P
1.58 (eter type cause a conversion check to \337ag) 112.75 518.23 P
(an error) 112.75 506.23 T
(.) 147.19 506.23 T
0.06 (then the passing of the argument to the function) 98.35 484.23 P
3.09 (will cause an implicit conversion error to be) 98.35 472.23 P
(\337agged.) 98.35 460.23 T
0.55 (If the function) 98.35 438.23 P
0 F
0.55 (g) 162.77 438.23 P
1 F
0.55 ( in Figure 5.6 had been de\336ned) 168.88 438.23 P
1.52 (to take a) 98.35 426.23 P
0 F
1.52 (short) 144.03 426.23 P
1 F
1.52 ( or) 169.01 426.23 P
0 F
1.52 (char) 186.5 426.23 P
1 F
1.52 ( parameter) 207.6 426.23 P
1.52 (, then there) 256.9 426.23 P
1.57 (would be no implicit conversion error because) 98.35 414.23 P
0.06 (both) 98.35 402.23 P
0 F
0.06 (short) 120.64 402.23 P
1 F
0.06 ( and) 145.63 402.23 P
0 F
0.06 (char) 167.98 402.23 P
1 F
0.06 ( can be converted to) 189.09 402.23 P
0 F
0.06 (short) 282.73 402.23 P
1 F
0.06 (.) 307.72 402.23 P
0.94 (Note that, in such cases, the argument promo-) 98.35 390.23 P
1.31 (tion to the type int and its subsequent conver-) 98.35 378.23 P
0.08 (sion back to) 98.35 366.23 P
0 F
0.08 (short) 154.71 366.23 P
1 F
0.08 ( does not af) 179.7 366.23 P
0.08 (fect the portability) 232 366.23 P
(or the well-de\336nedness of the program.) 98.35 354.23 T
0 F
(5.1.4) 98.35 328.23 T
(The type of a function de\336nition) 134.35 328.23 T
1 F
1.57 (Unless instructed otherwise, by a pragma, the) 98.35 311.23 P
0.41 (type of a function de\336ned without a prototype is) 98.35 299.23 P
-0.01 (the weak function prototype corresponding to its) 98.35 287.23 P
3.21 (de\336nition. This enables all the non-prototype) 98.35 275.23 P
1.24 (checks to operate in the remainder of the pro-) 98.35 263.23 P
0.83 (gram. For example, the function) 98.35 251.23 P
0 F
0.83 (f) 246.36 251.23 P
1 F
0.83 ( in Figure 5.3) 249.69 251.23 P
2.45 (behaves as though it were declared with the) 98.35 239.23 P
1.35 (weak prototype type of line 3 on Figure 5.5. If) 98.35 227.23 P
2.22 (the programmer wishes to disable this facility) 98.35 215.23 P
(then there is a pragma) 98.35 203.23 T
5 F
(#pragma no extra prototype checks) 105.55 181.23 T
1 F
3.04 (which causes subsequent function de\336nitions) 98.35 157.23 P
0.32 (without prototypes to have non-prototype types.) 98.35 145.23 P
2.63 (That is) 98.35 133.23 P
0 F
2.63 ( f) 130.98 133.23 P
1 F
2.63 (would subsequently behave as if it) 145.12 133.23 P
(were declared) 98.35 121.23 T
5 F
(int f\050\051;) 336.35 646.23 T
1 F
4.67 (This action can be reversed by using the) 329.15 622.23 P
(pragma) 329.15 610.23 T
5 F
(#pragma extra prototype checks) 336.35 588.23 T
0 F
(5.1.5) 329.15 550.23 T
(Function type compatibility) 365.15 550.23 T
1 F
1.1 (A weak prototype function type is incompatible) 329.15 533.23 P
0.55 (with all function prototype types, but in all other) 329.15 521.23 P
3.66 (respects the compatibility of weak prototype) 329.15 509.23 P
2.13 (function types is identical to that of prototype) 329.15 497.23 P
(function types.) 329.15 485.23 T
329.15 449.9 541.3 459.9 C
329.15 458.9 797.15 458.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 425.9 541.3 435.9 C
329.15 434.9 797.15 434.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(5.2) 329.15 440.57 T
(Implicit declarations) 365.15 440.57 T
1 10 Q
-0.1 (The ANSI C Standard \050Section 3.3.2.2\051 instructs) 329.15 409.23 P
0 (compilers to implicitly declare out of scope iden-) 329.15 397.23 P
2.49 (ti\336ers that are used to identify functions in a) 329.15 385.23 P
(function call.) 329.15 373.23 T
1.04 (This is a common source of error) 329.15 351.23 P
1.04 (, often occur-) 480.89 351.23 P
0.62 (ring when the appropriate header has not been) 329.15 339.23 P
2.67 (included and frequently leading to the wrong) 329.15 327.23 P
-0.09 (declaration of the function with its inherent prob-) 329.15 315.23 P
(lems.) 329.15 303.23 T
3.09 (The compiler can be instructed to detect all) 329.15 281.23 P
1.85 (such implicit declarations and then either pro-) 329.15 269.23 P
1.66 (duce a warning or exit with a constraint error) 329.15 257.23 P
1.66 (.) 538.52 257.23 P
0.79 (The syntax for the appropriate pragma is given) 329.15 245.23 P
(in Figure 5.7.) 329.15 233.23 T
(This pragma is vital for proper API checking.) 329.15 211.23 T
99 670.9 540 729.4 R
7 X
V
6 F
0 X
(# pragma no implicit def) 106.2 710.73 T
(initions warning) 250.12 710.73 T
7 8 Q
(opt) 346.07 708.23 T
0 10 Q
(Figure 5.7) 303.09 686.73 T
99 670.9 540 729.4 R
0.5 H
2 Z
N
FMENDPAGE
%%EndPage: "57" 58
%%Page: "58" 58
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(58) 519.89 755.24 T
99 699.4 540 711.4 C
99 710.4 567 710.4 2 L
1 H
2 Z
0 X
0 K
N
99 707.4 567 707.4 2 L
N
0 0 595.3 841.9 C
99 663.4 540 675.4 C
99 674.4 567 674.4 2 L
1 H
2 Z
0 X
0 K
N
99 671.4 567 671.4 2 L
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(6) 99 683.4 T
(Implementation De\336ned Behaviour) 126 683.4 T
1 10 Q
0.78 (Many aspects of the C language are described) 99 286.23 P
0.99 (as having implementation de\336ned behaviour or) 99 274.23 P
-0.01 (unde\336ned behaviour \050ANSI C Standard, Section) 99 262.23 P
(1.6\051.) 99 250.23 T
2.77 (Many of the other sections in this document) 99 228.23 P
-0.1 (describe properties of the implementation of this) 99 216.23 P
1.99 (compiler) 99 204.23 P
1.99 (, thereby explaining how the compiler) 136.21 204.23 P
4.99 (behaves with respect to implementation or) 99 192.23 P
2.99 (unde\336ned behaviour in particular areas. This) 99 180.23 P
3.14 (section provides details of pragmas that are) 99 168.23 P
1.57 (explicitly designed to allow the programmer to) 99 156.23 P
5.95 (control implementation de\336ned / unde\336ned) 99 144.23 P
(behaviour) 99 132.23 T
(.) 142.34 132.23 T
329.15 282.9 541.3 292.9 C
329.15 291.9 797.15 291.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
329.15 258.9 541.3 268.9 C
329.15 267.9 797.15 267.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(6.1) 329.15 273.57 T
(Linkage Resolution) 365.15 273.57 T
1 10 Q
1.84 (The ANSI C Standard, Section 3.1.2.2, states) 329.15 242.23 P
-0.15 (that if an identi\336er has both internal and external) 329.15 230.23 P
0.55 (linkage, its behaviour is unde\336ned. An example) 329.15 218.23 P
0.06 (of such an identi\336er is) 329.15 206.23 P
3 F
0.06 (x) 428.87 206.23 P
1 F
0.06 ( of Figure 6.1. Ordinarily) 433.87 206.23 P
1.42 (the compiler would make) 329.15 194.23 P
3 F
1.42 (x) 448.15 194.23 P
1 F
1.42 ( have external link-) 453.15 194.23 P
-0.19 (age, but in the presence of the pragma of Figure) 329.15 182.23 P
3.6 (6.2, the compiler \050with an optional warning\051) 329.15 170.23 P
(makes) 329.15 158.23 T
3 F
(x) 361.36 158.23 T
1 F
( have internal linkage.) 366.36 158.23 T
99 526.9 540 625.9 R
7 X
V
5 F
0 X
(void f\050void\051{) 106.2 607.23 T
(extern int x;) 117 595.23 T
(}) 117 583.23 T
(static int x;) 106.2 559.23 T
0 F
(Figure 6.1) 303.09 535.23 T
99 526.9 540 625.9 R
0.5 H
2 Z
N
99 463.9 540 513.4 R
7 X
V
6 F
0 X
(# pragma warning) 106.2 494.73 T
7 8 Q
(opt) 202.15 492.23 T
6 10 Q
(resolve linkage internal) 222.54 494.73 T
0 F
(Figure 6.2) 303.09 470.73 T
99 463.9 540 513.4 R
N
99 315.4 540 450.4 R
7 X
V
6 F
0 X
(# pragma preserve) 106.2 431.73 T
7 F
(static-list) 214.14 431.73 T
(static-list:) 106.2 407.73 T
6 F
(*) 117 395.73 T
7 F
(static-id-list) 117 383.73 T
7 8 Q
(opt) 200.95 381.23 T
7 10 Q
(static-id-list:) 106.2 359.73 T
8 F
(identif) 117 347.73 T
(ier) 158.98 347.73 T
7 F
( static-id-list) 176.97 347.73 T
7 8 Q
(opt) 266.92 345.23 T
0 10 Q
(Figure 6.3) 303.09 323.73 T
99 315.4 540 450.4 R
N
FMENDPAGE
%%EndPage: "58" 59
%%Page: "59" 59
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(59) 519.89 755.24 T
99 705.9 311.15 715.9 C
99 714.9 567 714.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 681.9 311.15 691.9 C
99 690.9 567 690.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(6.2) 99 696.57 T
(Static identi\336cations) 135 696.57 T
1 10 Q
1.26 (In the absence of instructions to do otherwise,) 99 665.23 P
2.49 (the compiler does not output any information) 99 653.23 P
3.51 (about the identi\336cation of static objects and) 99 641.23 P
0.15 (functions. Since they are not required for linking) 99 629.23 P
0.48 (there is no need of their output. However) 99 617.23 P
0.48 (, there) 282.34 617.23 P
0.31 (are some programs for example C pro\336ling pro-) 99 605.23 P
1.11 (grams and C front which require the identi\336ca-) 99 593.23 P
(tion of some or all of the static identi\336ers.) 99 581.23 T
0.31 (The pragma of Figure 6.3 instructs the compiler) 99 559.23 P
-0.19 (to output the static identi\336cation of some or all of) 99 547.23 P
(the static identi\336ers.) 99 535.23 T
0.24 (If the) 99 513.23 P
3 F
0.24 (static-list) 124.49 513.23 P
1 F
0.24 ( is) 163.36 513.23 P
0 F
0.24 (*) 176.62 513.23 P
1 F
0.24 (, then the compiler will output) 180.51 513.23 P
0.39 (the identi\336cation of all identi\336ers with static link-) 99 501.23 P
0.07 (age introduced after the pragma. If the) 99 489.23 P
3 F
0.07 (static-list) 272.28 489.23 P
1 F
(is a) 99 477.23 T
3 F
(static-id-list) 117.33 477.23 T
1 F
( then:) 167.3 477.23 T
(1.) 99 455.23 T
0.69 (Every identi\336er in the) 113.4 455.23 P
3 F
0.69 (id-list) 212.28 455.23 P
1 F
0.69 (must refer to an) 239.07 455.23 P
(object or function with internal linkage.) 113.4 443.23 T
(2.) 99 421.23 T
0.16 (The identi\336cation of every object in the) 113.4 421.23 P
3 F
0.16 ( id-list) 284.89 421.23 P
1 F
(is output by the compiler) 113.4 409.23 T
(.) 221.17 409.23 T
FMENDPAGE
%%EndPage: "59" 60
%%Page: "60" 60
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(60) 519.89 755.24 T
99 699.4 540 711.4 C
99 710.4 567 710.4 2 L
1 H
2 Z
0 X
0 K
N
99 707.4 567 707.4 2 L
N
0 0 595.3 841.9 C
99 663.4 540 675.4 C
99 674.4 567 674.4 2 L
1 H
2 Z
0 X
0 K
N
99 671.4 567 671.4 2 L
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(7) 99 683.4 T
(References) 126 683.4 T
1 10 Q
([1]) 99 583.23 T
0.36 (Draft Proposed American National Standard for Information Systems - Programming Language) 117 583.23 P
(C, ANSI, X3J1) 117 571.23 T
(1/88-002, May 13, 1988.) 180.7 571.23 T
([2]) 99 545.23 T
0.03 (POSIX, IEEE Standard, Portable Operating System Interface for Computer Environments, IEEE) 117 545.23 P
(1003.1-1988.) 117 533.23 T
([3]) 99 507.23 T
(TDF Release Notes, DRA Document, June 1993) 117 507.23 T
([4]) 99 481.23 T
(tcc User) 117 481.23 T
(\325) 154.02 481.23 T
(s Guide, DRA Document, June 1993.) 156.06 481.23 T
([5]) 99 455.23 T
(C Language Speci\336cation for C Issue 5.0, USL Document, August 16, 1988.) 117 455.23 T
FMENDPAGE
%%EndPage: "60" 61
%%Page: "61" 61
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(61) 519.89 755.24 T
99 699.4 540 711.4 C
99 710.4 567 710.4 2 L
1 H
2 Z
0 X
0 K
N
99 707.4 567 707.4 2 L
N
0 0 595.3 841.9 C
99 663.4 540 675.4 C
99 674.4 567 674.4 2 L
1 H
2 Z
0 X
0 K
N
99 671.4 567 671.4 2 L
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(Appendix A:) 99 683.4 T
(Pragma Syntax) 261 683.4 T
99 579.9 540 589.9 C
99 588.9 567 588.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 555.9 540 565.9 C
99 564.9 567 564.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(A.1) 99 570.57 T
(Basic pragma syntax: # pragma) 135 570.57 T
3 10 Q
(pragma-syntax) 349.63 570.57 T
7 F
(pragma-syntax:) 171 532.23 T
(token-syntax) 207 518.23 T
(def) 207 504.23 T
(inition-syntax) 224.99 504.23 T
(token-control) 207 490.23 T
(portability-checks) 207 476.23 T
(c-variants) 207 462.23 T
(correctness-checks) 207 448.23 T
(implementation-control) 207 434.23 T
99 398.9 540 408.9 C
99 407.9 567 407.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 374.9 540 384.9 C
99 383.9 567 383.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(A.2) 99 389.57 T
(T) 135 389.57 T
(oken syntax) 142.51 389.57 T
5 10 Q
(\0502.3\051) 99 351.23 T
7 F
(token-syntax:) 171 351.23 T
6 F
(token) 207 337.23 T
7 F
(token-introduction token-identif) 242.98 337.23 T
(ication) 434.87 337.23 T
5 F
(\0502.4\051) 99 310.23 T
7 F
(token-identif) 171 310.23 T
(ication:) 248.96 310.23 T
(name-space) 207 296.23 T
7 8 Q
(opt) 266.97 293.73 T
8 10 Q
(identif) 287.36 296.23 T
(ier) 329.33 296.23 T
6 F
( #) 347.32 296.23 T
7 F
(ext-identif) 365.31 296.23 T
(ier) 431.28 296.23 T
5 F
(\0502.4.1.1\051) 99 269.23 T
7 F
(name-space:) 171 269.23 T
6 F
(TAG) 207 255.23 T
5 F
(\0502.5\051) 99 228.23 T
7 F
(token-introduction:) 171 228.23 T
(exp-token) 207 214.23 T
(statement-token) 207 200.23 T
(type-token) 207 186.23 T
(selector-token) 207 172.23 T
(procedure-token) 207 158.23 T
FMENDPAGE
%%EndPage: "61" 62
%%Page: "62" 62
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(62) 519.89 755.24 T
0 F
(A.2.1) 99 709.23 T
(Expression token syntax) 135 709.23 T
5 F
(\0502.6\051) 99 682.23 T
7 F
(exp-token:) 171 682.23 T
6 F
(EXP) 207 668.23 T
7 F
(exp-storage) 230.99 668.23 T
6 F
(:) 302.95 668.23 T
8 F
(type-name) 314.94 668.23 T
6 F
( :) 368.91 668.23 T
(NAT) 207 654.23 T
5 F
(\0502.6\051) 99 627.23 T
7 F
(exp-storage:) 171 627.23 T
6 F
(rvalue) 207 613.23 T
(lvalue) 207 599.23 T
0 F
(A.2.2) 99 573.23 T
(Statement token syntax) 135 573.23 T
5 F
(\0502.7\051) 99 546.23 T
7 F
(statement-token:) 171 546.23 T
6 F
(STATEMENT) 207 532.23 T
0 F
(A.2.3) 99 506.23 T
(T) 135 506.23 T
(ype token syntax) 140.37 506.23 T
5 F
(\0502.8\051) 99 479.23 T
7 F
(type-token:) 171 479.23 T
6 F
(TYPE) 207 465.23 T
(VARIETY) 207 451.23 T
(ARITHMETIC) 207 437.23 T
(STRUCT) 207 423.23 T
(UNION) 207 409.23 T
0 F
(A.2.4) 99 383.23 T
(Selector token syntax) 135 383.23 T
5 F
(\0502.9\051) 99 356.23 T
7 F
(selector-token:) 171 356.23 T
6 F
(MEMBER) 207 342.23 T
8 F
(type-name) 248.98 342.23 T
6 F
( :) 302.95 342.23 T
8 F
(type-name) 320.94 342.23 T
6 F
( :) 374.91 342.23 T
0 F
(A.2.5) 99 316.23 T
(Procedure token syntax) 135 316.23 T
5 F
(\0502.10\051) 99 289.23 T
7 F
(procedure-token:) 171 289.23 T
(general-procedure) 207 275.23 T
(simple-procedure) 207 261.23 T
(function-procedure) 207 247.23 T
5 F
(\0502.10.1\051) 99 220.23 T
7 F
(general-procedure:) 171 220.23 T
6 F
(PROC {) 207 206.23 T
7 F
(bound-toks) 248.98 206.23 T
7 8 Q
(opt) 308.94 203.73 T
6 10 Q
(|) 329.33 206.23 T
7 F
(prog-pars) 341.33 206.23 T
7 8 Q
(opt) 395.3 203.73 T
6 10 Q
(}) 415.68 206.23 T
7 F
(token-introduction) 427.68 206.23 T
5 F
(\0502.10.1.1\051) 99 179.23 T
7 F
(bound-toks:) 171 179.23 T
(bound-token) 207 165.23 T
(bound-token) 207 151.23 T
6 F
(,) 278.96 151.23 T
7 F
(bound-toks) 290.95 151.23 T
5 F
(\0502.10.1.1\051) 99 124.23 T
7 F
(bound-token:) 171 124.23 T
(token-introduction name-space) 207 110.23 T
7 8 Q
(opt) 380.9 107.73 T
8 10 Q
(identif) 401.29 110.23 T
(ier) 443.27 110.23 T
FMENDPAGE
%%EndPage: "62" 63
%%Page: "63" 63
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(63) 519.89 755.24 T
5 F
(\0502.10.1.2\051) 99 709.23 T
7 F
(prog-pars:) 171 709.23 T
(program-parameter) 207 695.23 T
(program-parameter) 207 681.23 T
6 F
(,) 314.94 681.23 T
7 F
(prog-pars) 326.93 681.23 T
5 F
(\0502.10.1.2\051) 99 654.23 T
7 F
(program-parameter:) 171 654.23 T
6 F
(EXP) 207 640.23 T
8 F
(identif) 230.99 640.23 T
(ier) 272.96 640.23 T
6 F
(STATEMENT) 207 626.23 T
8 F
(identif) 266.97 626.23 T
(ier) 308.94 626.23 T
6 F
(TYPE) 207 612.23 T
8 F
(type-name) 236.98 612.23 T
6 F
(MEMBER) 207 598.23 T
8 F
(type-name) 248.98 598.23 T
6 F
( :) 302.95 598.23 T
8 F
(identif) 320.94 598.23 T
(ier) 362.91 598.23 T
6 F
(PROC) 207 584.23 T
8 F
(identif) 236.98 584.23 T
(ier) 278.96 584.23 T
5 F
(\0502.10.2\051) 99 557.23 T
7 F
(simple-procedure:) 171 557.23 T
6 F
(PROC \050) 207 543.23 T
7 F
(simp_tok_pars) 248.98 543.23 T
7 8 Q
(opt) 326.93 540.73 T
6 10 Q
(\051) 347.32 543.23 T
7 F
(token-introduction) 359.32 543.23 T
5 F
(\0502.10.2\051) 99 516.23 T
7 F
(simp_tok_pars:) 171 516.23 T
(simple-token) 207 502.23 T
(simple-token) 207 488.23 T
6 F
(,) 284.96 488.23 T
7 F
(simp_tok_pars) 296.95 488.23 T
5 F
(\0502.10.2\051) 99 461.23 T
7 F
(simple-token:) 171 461.23 T
(token-introduction name-space) 207 447.23 T
7 8 Q
(opt) 380.9 444.73 T
8 10 Q
(identif) 401.29 447.23 T
(ier) 443.27 447.23 T
7 8 Q
(opt) 461.26 444.73 T
5 10 Q
(\0502.10.3\051) 99 420.23 T
7 F
(function-procedure:) 171 420.23 T
6 F
(FUNC) 207 406.23 T
8 F
(type-name) 236.98 406.23 T
6 F
( :) 290.95 406.23 T
99 370.9 540 380.9 C
99 379.9 567 379.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 346.9 540 356.9 C
99 355.9 567 355.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(A.3) 99 361.57 T
(De\336nition Syntax) 135 361.57 T
7 10 Q
(def) 171 323.23 T
(inition-syntax:) 188.99 323.23 T
(mem-selector-defn) 207 309.23 T
0 F
(A.3.1) 99 283.23 T
(Member selector de\336nition syntax) 135 283.23 T
5 F
(\0502.9.4.2\051) 99 256.23 T
7 F
(mem-selector-defn:) 171 256.23 T
6 F
(DEFINE MEMBER) 207 242.23 T
8 F
(type-name identif) 290.95 242.23 T
(ier) 392.9 242.23 T
6 F
( :) 410.89 242.23 T
7 F
(member-designator) 428.88 242.23 T
5 F
(\0502.9.4.2\051) 99 215.23 T
7 F
(member-designator:) 171 215.23 T
8 F
(identif) 207 201.23 T
(ier) 248.98 201.23 T
(identif) 207 187.23 T
(ier) 248.98 187.23 T
6 F
( .) 266.97 187.23 T
7 F
(member-designator) 284.96 187.23 T
FMENDPAGE
%%EndPage: "63" 64
%%Page: "64" 64
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(64) 519.89 755.24 T
99 705.9 540 715.9 C
99 714.9 567 714.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 681.9 540 691.9 C
99 690.9 567 690.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(A.4) 99 696.57 T
(T) 135 696.57 T
(oken control) 142.51 696.57 T
7 10 Q
(token-control:) 171 658.23 T
(token-operation) 207 644.23 T
(interface-control) 207 630.23 T
5 F
(\0502.11\051) 99 603.23 T
7 F
(token-operation:) 171 603.23 T
(token-op token-id-list) 207 589.23 T
7 8 Q
(opt) 338.93 586.73 T
5 10 Q
(\0502.11\051) 99 562.23 T
7 F
(token-id-list:) 171 562.23 T
6 F
(TAG) 207 548.23 T
7 8 Q
(opt) 224.99 545.73 T
8 10 Q
(identif) 245.38 548.23 T
(ier) 287.36 548.23 T
7 F
( dot-list) 305.35 548.23 T
7 8 Q
(opt) 359.32 545.73 T
7 10 Q
( token-id-list) 373.71 548.23 T
7 8 Q
(opt) 457.66 545.73 T
5 10 Q
(\0502.11\051) 99 521.23 T
7 F
(dot-list:) 171 521.23 T
6 F
(.) 207 507.23 T
7 F
(member-designator) 218.99 507.23 T
5 F
(\0502.11.1\051) 99 480.23 T
7 F
(token-op:) 171 480.23 T
6 F
(def) 207 466.23 T
(ine) 224.99 466.23 T
(no_def) 207 452.23 T
(ignore) 207 438.23 T
(interface) 207 424.23 T
5 F
(\0502.11.2\051) 99 397.23 T
7 F
(interface-control:) 171 397.23 T
6 F
(implement interface) 207 383.23 T
7 F
(header) 326.93 383.23 T
6 F
(extend interface) 207 369.23 T
7 F
(header) 308.94 369.23 T
99 333.9 540 343.9 C
99 342.9 567 342.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 309.9 540 319.9 C
99 318.9 567 318.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(A.5) 99 324.57 T
(Syntax for Portability Checks) 135 324.57 T
7 10 Q
(portability-checks:) 171 286.23 T
(conversion-checks) 207 272.23 T
(integer-literal-specif) 207 258.23 T
(ication) 338.93 258.23 T
(user-def) 207 244.23 T
(ined-conversion) 254.97 244.23 T
0 F
(A.5.1) 99 218.23 T
(Conversion checks) 135 218.23 T
5 F
(\0503.3\051) 99 191.23 T
7 F
(conversion-checks:) 171 191.23 T
6 F
(no implicit conversion warning) 207 177.23 T
7 8 Q
(opt) 386.9 174.73 T
6 10 Q
(no explicit conversion warning) 207 163.23 T
7 8 Q
(opt) 386.9 160.73 T
0 10 Q
(A.5.2) 99 137.23 T
(Integer literal speci\336cations) 135 137.23 T
5 F
(\0503.4\051) 99 110.23 T
7 F
(integer-literal-specif) 171 110.23 T
(ication:) 302.93 110.23 T
6 F
(integer literal) 207 96.23 T
7 F
(literal-class lit-class-type-list) 302.95 96.23 T
FMENDPAGE
%%EndPage: "64" 65
%%Page: "65" 65
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(65) 519.89 755.24 T
5 F
(\0503.4\051) 99 709.23 T
7 F
(literal-class:) 171 709.23 T
(denomination) 207 695.23 T
6 F
(unsigned) 284.96 695.23 T
7 8 Q
(opt) 332.93 692.73 T
6 10 Q
(long) 353.32 695.23 T
7 8 Q
(opt) 377.31 692.73 T
5 10 Q
(\0503.4\051) 99 668.23 T
7 F
(denomination:) 171 668.23 T
6 F
(octal) 207 654.23 T
(decimal) 207 640.23 T
(hexadecimal) 207 626.23 T
5 F
(\0503.4.1\051) 99 599.23 T
7 F
(lit-class-type-list:) 171 599.23 T
6 F
(*) 207 585.23 T
7 F
(int-type-spec) 218.99 585.23 T
8 F
(integer-constant) 207 571.23 T
7 F
( int-type-spec) 302.95 571.23 T
6 F
(|) 392.9 571.23 T
7 F
(lit-class-type-list) 404.89 571.23 T
5 F
(\0503.4.1\051) 99 544.23 T
7 F
(int-type-spec:) 171 544.23 T
6 F
(:) 207 530.23 T
8 F
(type-name) 218.99 530.23 T
6 F
(* warning) 207 516.23 T
7 8 Q
(opt) 260.97 513.73 T
6 10 Q
(:) 281.36 516.23 T
8 F
(identif) 293.35 516.23 T
(ier) 335.33 516.23 T
6 F
(* * :) 207 502.23 T
5 F
(\0503.5\051) 99 475.23 T
7 F
(user-def) 171 475.23 T
(ined-conversion:) 218.97 475.23 T
6 F
(accept conversion) 207 461.23 T
7 F
(conv-list) 314.94 461.23 T
7 8 Q
(opt) 368.91 458.73 T
5 10 Q
(\0503.5\051) 99 434.23 T
7 F
(conv-list:) 171 434.23 T
8 F
(identif) 207 420.23 T
(ier) 248.98 420.23 T
7 F
( conv-list) 266.97 420.23 T
7 8 Q
(opt) 326.93 417.73 T
99 384.9 540 394.9 C
99 393.9 567 393.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 360.9 540 370.9 C
99 369.9 567 369.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(A.6) 99 375.57 T
(Syntax for C V) 135 375.57 T
(ariants) 229.87 375.57 T
7 10 Q
(c-variants:) 171 337.23 T
(promotion-types) 207 323.23 T
(tag-classes) 207 309.23 T
(type-redef) 207 295.23 T
(inition) 266.97 295.23 T
(generic-pointers) 207 281.23 T
(parameter-compatibility) 207 267.23 T
(external-name-space) 207 253.23 T
(object-volatility) 207 239.23 T
(enum-tag-constants) 207 225.23 T
(conditional-lvalues) 207 211.23 T
(syntactic-extensions) 207 197.23 T
(directive-control) 207 183.23 T
5 F
(\0504.1\051) 99 156.23 T
7 F
(promotion-types:) 171 156.23 T
6 F
(promote) 207 142.23 T
8 F
(type-name) 254.97 142.23 T
6 F
( :) 308.94 142.23 T
8 F
(type-name) 326.93 142.23 T
6 F
(compute promote) 207 128.23 T
8 F
(identif) 302.95 128.23 T
(ier) 344.92 128.23 T
FMENDPAGE
%%EndPage: "65" 66
%%Page: "66" 66
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(66) 519.89 755.24 T
5 F
(\0504.2\051) 99 709.23 T
7 F
(tag-classes:) 171 709.23 T
6 F
(TAG ignore class warning) 207 695.23 T
7 8 Q
(opt) 350.92 692.73 T
5 10 Q
(\0504.3\051) 99 668.23 T
7 F
(type-redef) 171 668.23 T
(inition:) 230.97 668.23 T
6 F
(accept extra type def) 207 654.23 T
(initions warning) 332.93 654.23 T
7 8 Q
(opt) 428.88 651.73 T
5 10 Q
(\0504.4\051) 99 627.23 T
7 F
(generic-pointers:) 171 627.23 T
6 F
(accept char * as void * warning) 207 613.23 T
7 8 Q
(opt) 392.9 610.73 T
5 10 Q
(\0504.5\051) 99 586.23 T
7 F
(parameter-compatibility:) 171 586.23 T
6 F
(accept argument) 207 572.23 T
8 F
(type-name) 302.95 572.23 T
6 F
( as) 356.92 572.23 T
8 F
(type-name) 380.9 572.23 T
6 F
(accept argument) 207 558.23 T
8 F
(type-name) 302.95 558.23 T
6 F
( as ...) 356.92 558.23 T
(accept extra ...) 207 544.23 T
5 F
(\0504.6\051) 99 517.23 T
7 F
(external-name-space:) 171 517.23 T
6 F
(name space backdrop) 207 503.23 T
5 F
(\0504.7\051) 99 476.23 T
7 F
(object-volatility:) 171 476.23 T
6 F
(external volatile) 207 462.23 T
5 F
(\0504.8\051) 99 435.23 T
7 F
(enum-tag-constants:) 171 435.23 T
6 F
(warning) 207 421.23 T
7 8 Q
(opt) 248.98 418.73 T
6 10 Q
(forward enum declarations) 269.37 421.23 T
5 F
(\0504.9\051) 99 394.23 T
7 F
(conditional-lvalues:) 171 394.23 T
6 F
(accept conditional lvalue warning) 207 380.23 T
7 8 Q
(opt) 404.89 377.73 T
5 10 Q
(\0504.10\051) 99 353.23 T
7 F
(syntactic-extensions:) 171 353.23 T
6 F
(accept no def) 207 339.23 T
(initions) 284.96 339.23 T
(accept extra ;) 207 325.23 T
(accept unknown escapes warning) 207 311.23 T
7 8 Q
(opt) 386.9 308.73 T
6 10 Q
(accept weak equal macro warning) 207 297.23 T
7 8 Q
(opt) 392.9 294.73 T
6 10 Q
(accept implicit integer type warning) 207 283.23 T
7 8 Q
(opt) 422.88 280.73 T
5 10 Q
(\0504.11\051) 99 256.23 T
7 F
(directive-control:) 171 256.23 T
6 F
(unknown pragma warning) 207 242.23 T
7 8 Q
(opt) 338.93 239.73 T
6 10 Q
(accept directive ignore) 207 228.23 T
7 8 Q
(opt) 344.92 225.73 T
7 10 Q
( standard-dir) 359.32 228.23 T
5 F
(\0504.11.2\051) 99 201.23 T
7 F
(standard-dir:) 171 201.23 T
6 F
(f) 207 187.23 T
(ile) 213 187.23 T
(ident) 207 173.23 T
(assert) 207 159.23 T
(unassert) 207 145.23 T
FMENDPAGE
%%EndPage: "66" 67
%%Page: "67" 67
595.3 841.9 0 FMBEGINPAGE
99 741.91 540 751.91 C
99 750.91 567 750.91 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
(C to TDF Producer) 99 755.24 T
(, Issue 2.1.0 \050June 1993\051) 182.31 755.24 T
(67) 519.89 755.24 T
99 705.9 540 715.9 C
99 714.9 567 714.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 681.9 540 691.9 C
99 690.9 567 690.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(A.7) 99 696.57 T
(Correctness checks) 135 696.57 T
7 10 Q
(correctness-checks:) 171 658.23 T
(non-prototype-checks) 207 644.23 T
(declaration-checks) 207 630.23 T
5 F
(\0505.1\051) 99 603.23 T
7 F
(non-prototype-checks:) 171 603.23 T
6 F
(accept weak prototype) 207 589.23 T
8 F
(identif) 338.93 589.23 T
(ier) 380.9 589.23 T
6 F
(extra prototype checks) 207 575.23 T
(no extra prototype checks) 207 561.23 T
5 F
(\0505.2\051) 99 534.23 T
7 F
(declaration-checks:) 171 534.23 T
6 F
(no implicit def) 207 520.23 T
(initions warning) 296.95 520.23 T
7 8 Q
(opt) 392.9 517.73 T
99 484.9 540 494.9 C
99 493.9 567 493.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
99 460.9 540 470.9 C
99 469.9 567 469.9 2 L
1 H
2 Z
0 X
0 K
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(A.8) 99 475.57 T
(Implementation Control) 135 475.57 T
7 10 Q
(implementation-control:) 171 437.23 T
(linkage-resolution) 207 423.23 T
(static-identif) 207 409.23 T
(ication) 290.95 409.23 T
5 F
(\0506.1\051) 99 382.23 T
7 F
(linkage-resolution:) 171 382.23 T
6 F
(warning) 207 368.23 T
7 8 Q
(opt) 248.98 365.73 T
6 10 Q
(resolve linkage internal) 269.37 368.23 T
5 F
(\0506.2\051) 99 341.23 T
7 F
(static-identif) 171 341.23 T
(ication:) 254.95 341.23 T
6 F
(preserve) 207 327.23 T
7 F
(static-list) 260.97 327.23 T
5 F
(\0506.2\051) 99 300.23 T
7 F
(static-list:) 171 300.23 T
6 F
(*) 207 286.23 T
7 F
(static-id-list) 207 272.23 T
7 8 Q
(opt) 290.95 269.73 T
5 10 Q
(\0506.2\051) 99 245.23 T
7 F
(static-id-list:) 171 245.23 T
8 F
(identif) 207 231.23 T
(ier) 248.98 231.23 T
7 F
( static-id-list) 266.97 231.23 T
7 8 Q
(opt) 356.92 228.73 T
FMENDPAGE
%%EndPage: "67" 68
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%Pages: 67 1
%%DocumentFonts: Helvetica-Bold
%%+ Helvetica
%%+ Symbol
%%+ Helvetica-Oblique
%%+ Helvetica-BoldOblique
%%+ Courier
%%+ Courier-Bold
%%+ Courier-Oblique
%%+ Courier-BoldOblique
