%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 595.3 841.9 0 1 7 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
0 24 Q
0 X
0 K
(PL_TDF De\336nition) 191.29 564.9 T
0 14 Q
(Issue 2.1.0 \050Aug 1993\051) 224.76 515.57 T
1 12 Q
(Crown Copyright \251June 1993) 217.56 494.9 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "1" 2
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 1) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
1 12 Q
0 X
(T) 236.83 761.9 T
(ABLE OF CONTENTS) 243.2 761.9 T
1 10 Q
(1) 72 739.23 T
(Introduction) 90 739.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 142.42 739.23 T
(1) 499 739.23 T
(2) 72 721.23 T
(Notation) 90 721.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 129.93 721.23 T
(2) 499 721.23 T
(2.1) 79.2 704.23 T
(Syntax description) 108 704.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 184.9 704.23 T
(2) 499 704.23 T
(2.2) 79.2 687.23 T
(Lexical Units) 108 687.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 164.91 687.23 T
(2) 499 687.23 T
(2.3) 79.2 670.23 T
(Pre-processing) 108 670.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 169.91 670.23 T
(3) 499 670.23 T
(3) 72 652.23 T
(The Language) 90 652.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 152.42 652.23 T
(4) 499 652.23 T
(3.1) 79.2 635.23 T
(Program) 108 635.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 144.92 635.23 T
(5) 499 635.23 T
(3.1.1) 86.4 622.23 T
(Tokdec) 126 622.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 157.41 622.23 T
( 5) 496.5 622.23 T
(3.1.2) 86.4 609.23 T
(Tokdef) 126 609.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 157.41 609.23 T
(5) 499 609.23 T
(3.1.3) 86.4 596.23 T
(Tagdec) 126 596.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 159.91 596.23 T
(6) 499 596.23 T
(3.1.4) 86.4 583.23 T
(Tagdef) 126 583.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 157.41 583.23 T
(6) 499 583.23 T
(3.1.5) 86.4 570.23 T
(Altagdef) 126 570.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 164.91 570.23 T
(6) 499 570.23 T
(3.1.6) 86.4 557.23 T
(Structdef) 126 557.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 167.41 557.23 T
(7) 499 557.23 T
(3.1.7) 86.4 544.23 T
(Procdef) 126 544.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 159.91 544.23 T
(7) 499 544.23 T
(3.2) 79.2 527.23 T
(First-class SORT expansions) 108 527.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 227.38 527.23 T
(8) 499 527.23 T
(3.2.1) 86.4 514.23 T
(Access) 126 514.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 157.41 514.23 T
(8) 499 514.23 T
(3.2.2) 86.4 501.23 T
(Al_tag) 126 501.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 157.41 501.23 T
(8) 499 501.23 T
(3.2.3) 86.4 488.23 T
(Alignment) 126 488.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 172.4 488.23 T
(8) 499 488.23 T
(3.2.4) 86.4 475.23 T
(Bitfield_variety) 126 475.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 192.39 475.23 T
(9) 499 475.23 T
(3.2.5) 86.4 462.23 T
(Bool) 126 462.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 147.42 462.23 T
( 9) 496.5 462.23 T
(3.2.6) 86.4 449.23 T
(Error_treatment) 126 449.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 192.39 449.23 T
(9) 499 449.23 T
(3.2.7) 86.4 436.23 T
(Exp) 126 436.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 142.42 436.23 T
( 9) 496.5 436.23 T
(3.2.7.1) 93.6 423.23 T
(ExpTerm) 144 423.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 184.9 423.23 T
(10) 494.01 423.23 T
(3.2.8) 86.4 410.23 T
(Floating_variety) 126 410.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 194.89 410.23 T
(11) 494.01 410.23 T
(3.2.9) 86.4 397.23 T
(Label) 126 397.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 152.42 397.23 T
(11) 494.01 397.23 T
(3.2.10) 86.4 384.23 T
(Nat) 126 384.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 144.92 384.23 T
(12) 494.01 384.23 T
(3.2.11) 86.4 371.23 T
(Ntest) 126 371.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 149.92 371.23 T
(12) 494.01 371.23 T
(3.2.12) 86.4 358.23 T
(Rounding_mode) 126 358.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.39 358.23 T
(13) 494.01 358.23 T
(3.2.13) 86.4 345.23 T
(Shape) 126 345.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 154.91 345.23 T
(13) 494.01 345.23 T
(3.2.14) 86.4 332.23 T
(Signed_Nat) 126 332.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 177.4 332.23 T
(13) 494.01 332.23 T
(3.2.15) 86.4 319.23 T
(Tag) 126 319.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 144.92 319.23 T
(14) 494.01 319.23 T
(3.2.16) 86.4 306.23 T
(Token) 126 306.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 152.42 306.23 T
(14) 494.01 306.23 T
(3.2.17) 86.4 293.23 T
(Transfer_mode) 126 293.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 189.9 293.23 T
(14) 494.01 293.23 T
(3.2.18) 86.4 280.23 T
(Variety) 126 280.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 159.91 280.23 T
(14) 494.01 280.23 T
(3.3) 79.2 263.23 T
(Control structure and local declarations) 108 263.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 269.85 263.23 T
(15) 494.01 263.23 T
(3.3.1) 86.4 250.23 T
(ConditionalExp and Assertion) 126 250.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 249.86 250.23 T
(15) 494.01 250.23 T
(3.3.2) 86.4 237.23 T
(RepeatExp) 126 237.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 172.4 237.23 T
(16) 494.01 237.23 T
(3.3.3) 86.4 224.23 T
(LabelledExp) 126 224.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 179.9 224.23 T
(16) 494.01 224.23 T
(3.3.4) 86.4 211.23 T
(Local_Defn) 126 211.23 T
(  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 174.9 211.23 T
(16) 494.01 211.23 T
(4) 72 193.23 T
(Example PL_TDF programs) 90 193.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 207.39 193.23 T
(17) 494.01 193.23 T
(4.1) 79.2 176.23 T
(Sieve of Erastothenes) 108 176.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.39 176.23 T
(17) 494.01 176.23 T
(4.2) 79.2 159.23 T
(Example with structures) 108 159.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 209.88 159.23 T
(19) 494.01 159.23 T
(4.3) 79.2 142.23 T
(Test for case) 108 142.23 T
(   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 162.41 142.23 T
(20) 494.01 142.23 T
(4.4) 79.2 125.23 T
(Example of use of high-order TOKENs) 108 125.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 269.85 125.23 T
(21) 494.01 125.23 T
(4.5) 79.2 108.23 T
(A test for long jumps) 108 108.23 T
( .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 197.39 108.23 T
(22) 494.01 108.23 T
(5) 72 90.23 T
(Use of the PL_TDF compiler) 90 90.23 T
(.   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .) 209.88 90.23 T
(23) 494.01 90.23 T
FMENDPAGE
%%EndPage: "1" 3
%%Page: "1" 3
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 1) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(1) 72 741.88 T
(Intr) 99 741.88 T
(oduction) 139.87 741.88 T
1 10 Q
0.34 (PL_TDF is a language in the lineage of W) 72 665.19 P
0.34 (irth\325) 243.61 665.19 P
0.34 (s PL360 and its later derivatives. The basic idea in PL360 was to) 260.27 665.19 P
0.09 (give one an assembler in which one could express all of the order) 72 653.19 P
0.09 (-code of the IBM 360 while still preserving the) 334.36 653.19 P
0.49 (logical structure of the program using familiar programming constructs. If one had to produce a program at the) 72 641.19 P
0.58 (code level, this approach was much preferable to writing \322\337at\323 assembly code using a traditional assembler) 72 629.19 P
0.58 (, as) 509.39 629.19 P
(anyone who has used both can testify) 72 617.19 T
(.) 220.69 617.19 T
0.23 (In the TDF \322machine\323 the problem is not lack of structure at its \322assembly\323 level, but rather too much of it; one) 72 595.19 P
-0.18 (loses the sense of a TDF program because of its deeply nested structure. Also the naming conventions of TDF are) 72 583.19 P
0.21 (designed to make them tractable to machine manipulation, rather than human reading and writing. However) 72 571.19 P
0.21 (, the) 505.88 571.19 P
0.25 (approach is basically the same. PL_TDF provides shorthand notations for the commonly occuring control struc-) 72 559.19 P
-0.19 (tures and operations while still allowing one to use the standard TDF constructors which, in turn, may have short-) 72 547.19 P
1.34 (hand notations for their parameters. The naming is always done by identi\336ers where the sort of the name is) 72 535.19 P
(determined by its declaration, or by context.) 72 523.19 T
-0.16 (The TDF derived from PL_TDF is guaranteed to be SOR) 72 501.19 P
-0.16 (T correct; however) 298.95 501.19 P
-0.16 (, there is no SHAPE checking, so one) 374.26 501.19 P
(can still make illegal TDF) 72 489.19 T
(.) 175.58 489.19 T
FMENDPAGE
%%EndPage: "1" 4
%%Page: "2" 4
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 2) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(2) 72 741.88 T
(Notation) 99 741.88 T
72 661.84 523.3 671.85 C
72 661.84 523.3 671.85 R
7 X
0 K
V
72 670.84 541.01 670.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 637.84 523.3 647.84 C
72 637.84 523.3 647.84 R
7 X
0 K
V
72 646.84 541.01 646.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.1) 72 652.51 T
(Syntax description) 108 652.51 T
1 10 Q
0.85 (W) 72 621.17 P
0.85 (ords enclosed in angle brackets, < >, form non-terminal symbols. Other symbols and words stand for them-) 80.64 621.17 P
0.47 (selves as terminal symbols. An expansion of a non-terminal is indicated using ::= with its expansion given as a) 72 609.17 P
(sequence \050possibly empty\051 of terminals and non-terminals. For example:) 72 597.17 T
2 F
(<Exp> ::= * <ident>) 108 575.17 T
1 F
-0.21 (is a possible expansion of an EXP SOR) 72 560.17 P
-0.21 (T) 227.91 560.17 P
-0.21 (. If the word for the non-terminal starts with a capital letter then it will be) 233.28 560.17 P
0.09 (totally described by a set of such expansions; otherwise the expansion of the non-terminal will be given by other) 72 548.17 P
(methods in the text.) 72 536.17 T
(The post-\336x -Opt on a non terminal is an abreviation allowing an empty expansion. For example:) 72 514.17 T
2 F
(<Access>-Opt) 108 492.17 T
1 F
(is equivalent to the use of another non-terminal <AccessOption> whose expansions are:) 72 477.17 T
2 F
(<AccessOption> ::=) 108 455.17 T
(<AccessOption> ::= <Access>) 108 440.17 T
1 F
(The post-\336x -List on a non terminal is an abreviation for lists of objects seperated by the ,-symbol. For example:) 72 425.17 T
2 F
(<Exp>-List) 108 403.17 T
1 F
(is equivalent to the use of another non-terminal <ExpList> whose expansions are:) 72 388.17 T
2 F
(<ExpList> ::= <Exp>) 108 366.17 T
(<ExpList> ::= <ExpList> , <Exp>) 108 351.17 T
1 F
1 (Both of these post-\336x notations are also used with sequences of terminals and non-terminals within the angle) 72 336.17 P
-0.06 (brackets with the same kind of expansion. In these cases, the expansion within the angle brackets form an anony-) 72 324.17 P
(mous non-terminal.) 72 312.17 T
72 276.83 523.3 286.84 C
72 276.83 523.3 286.84 R
7 X
0 K
V
72 285.83 541.01 285.83 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 252.82 523.3 262.83 C
72 252.82 523.3 262.83 R
7 X
0 K
V
72 261.82 541.01 261.82 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.2) 72 267.49 T
(Lexical Units) 108 267.49 T
1 10 Q
-0.19 (The terminal symbols \050 \051, [ ], and { } always occur as parenthetic pairs and never form part of other terminal sym-) 72 236.15 P
(bols.) 72 224.15 T
(The terminal symbols , ; and : are similarly terminators for other terminal symbols.) 72 202.15 T
(White space is a terminator for other terminal symbols but is otherwise ignored except in strings.) 72 180.15 T
1.26 (All other terminal symbols are sequences of ACSII symbols not including the above. These are divided into) 72 158.15 P
0.1 (seven classes: keywords, TDF constructors, operators, <integer_denotation>s, <\337oating_denotation>s, <string>s) 72 146.15 P
(and <ident>s.) 72 134.15 T
1.07 (The keywords and operators are expressed directly in the syntax description. The TDF constructors are those) 72 112.15 P
(given in the TDF speci\336cation which have \336rst-class SOR) 72 100.15 T
(T) 304.03 100.15 T
(s as parameters and results.) 309.44 100.15 T
FMENDPAGE
%%EndPage: "2" 5
%%Page: "3" 5
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 3) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
0 X
(An <integer_denotatation> allows one to express an integer in any base less than 16, with the default being 10.) 72 763.23 T
2 F
(<integer_denotation> ::= <digit>) 108 741.23 T
(<integer_denotation> ::= <integer_denotation> <digit>) 108 726.23 T
(<integer_denotation> ::= <base> <integer_denotation>) 108 711.23 T
(<base> :: = <integer_denotation> r) 108 681.23 T
1 F
(Examples are 31, 16r1f, 8r37, 2r1) 72 666.23 T
(1) 206.53 666.23 T
(1) 211.15 666.23 T
(1) 215.78 666.23 T
(1 - all giving the same value.) 220.41 666.23 T
-0.09 (A <\337oating_denotation> is an <integer_denotation> followed by the . symbol and a sequence of digits. The radix) 72 644.23 P
(of the <\337oating_denotation> is given by the base of its component <integer_denotation>) 72 632.23 T
0.33 (A <string> is the same as a C string - any sequence of characters within \322 \322. The same C conventions hold for \134) 72 610.23 P
(within strings for single characters.) 72 598.23 T
(A <character> is an string character within \324 \324. The same \134 conventions hold.) 72 576.23 T
-0.17 (An <ident> is any other sequence of characters. They will be used to form names for T) 72 554.23 P
-0.17 (AGs, T) 415.81 554.23 P
-0.17 (OKENs, AL_T) 444.88 554.23 P
-0.17 (AGs) 504.98 554.23 P
(and LABELs.) 72 542.23 T
72 506.89 523.3 516.9 C
72 506.89 523.3 516.9 R
7 X
0 K
V
72 515.89 541.01 515.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 482.88 523.3 492.89 C
72 482.88 523.3 492.89 R
7 X
0 K
V
72 491.88 541.01 491.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(2.3) 72 497.56 T
(Pr) 108 497.56 T
(e-pr) 122.51 497.56 T
(ocessing) 147.12 497.56 T
1 10 Q
0.13 (At the moment there is only one pre-processing directive. A line starting with #include will textually include the) 72 466.22 P
(following \336le \050named within string quotes\051, using the same path conventions as C.) 72 454.22 T
0.43 (Comments may be included in the text using the /* ... */ notation; this dif) 72 432.22 P
0.43 (fers slightly from the C convention in) 370.23 432.22 P
(that comments may be nested.) 72 420.22 T
FMENDPAGE
%%EndPage: "3" 6
%%Page: "4" 6
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 4) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(3) 72 741.88 T
(The Language) 99 741.88 T
1 10 Q
-0.05 (The basic philosophy of PL_TDF is to provide the \322glue\323 constructors of TDF automatically) 72 665.19 P
-0.05 (, while still allowing) 441.27 665.19 P
0.93 (the programmer to use the signi\336cant constructors in their most general form. By \322glue\323 constructors, I mean) 72 653.19 P
-0.17 (those like make_link, make_group etc. which are there to provide tedious, but vital, constructions concerned with) 72 641.19 P
1.74 (linking and naming. The \322signi\336cant\323 constructors really come in two groups, depending on their resulting) 72 629.19 P
0.08 (SOR) 72 617.19 P
0.08 (T) 90.84 617.19 P
0.08 (s. There are those SOR) 96.25 617.19 P
0.08 (T) 188.4 617.19 P
0.08 (s like T) 193.8 617.19 P
0.08 (OKDEC, whose SOR) 223.76 617.19 P
0.08 (T) 310.22 617.19 P
0.08 (s are purely syntactic and can\325) 315.62 617.19 P
0.08 (t be used as results of) 437.12 617.19 P
1 (token applications or _cond constructions. On the other hand, the \336rst-class SOR) 72 605.19 P
1 (T) 405.83 605.19 P
1 (s, like EXP) 411.24 605.19 P
1 (, can be used in) 457.39 605.19 P
0.06 (those situations and generally have a much richer set of constructors. These \336rst-class SOR) 72 593.19 P
0.06 (T) 436.94 593.19 P
0.06 (s are precisely those) 442.35 593.19 P
(which have SOR) 72 581.19 T
(TNAMEs. These SOR) 139.13 581.19 T
(TNAMEs appear in PL_TDF as expansions of <Sortname>:) 228.75 581.19 T
2 F
(<Sortname> :: = ACCESS) 108 559.19 T
(<Sortname> :: = AL_T) 108 544.19 T
(AG) 205.88 544.19 T
(<Sortname> :: = ALIGNMENT) 108 529.19 T
(<Sortname> :: = BITFIELD_V) 108 514.19 T
(ARIETY) 238.09 514.19 T
(<Sortname> :: = BOOL) 108 499.19 T
(<Sortname> :: = ERROR_TREA) 108 484.19 T
(TMENT) 250.29 484.19 T
(<Sortname> :: =EXP) 108 469.19 T
(<Sortname> :: =FLOA) 108 454.19 T
(TING_V) 205.32 454.19 T
(ARIETY) 240.68 454.19 T
(<Sortname> :: =LABEL) 108 439.19 T
(<Sortname> :: = NA) 108 424.19 T
(T) 195.87 424.19 T
(<Sortname> :: = NTEST) 108 409.19 T
(<Sortname> ::= ROUNDING_MODE) 108 394.19 T
(<Sortname> ::= SHAPE) 108 379.19 T
(<Sortname> ::= SIGNED_NA) 108 364.19 T
(T) 236.97 364.19 T
(<Sortname> ::= T) 108 349.19 T
(AG) 185.32 349.19 T
(<Sortname> ::= TRANSFER_MODE) 108 334.19 T
(<Sortname> ::= V) 108 319.19 T
(ARIETY) 185.88 319.19 T
1 F
0.03 (All of the signi\336cant constructors are expanded by non-terminals with names related to their resulting SOR) 72 289.19 P
0.03 (T e.g.) 500.23 289.19 P
0.72 (all EXPs are expanded by <Exp> and all T) 72 277.19 P
0.72 (OKDECs are expanded by <T) 248.72 277.19 P
0.72 (okdec>. Any \336rst-class SOR) 371.44 277.19 P
0.72 (T can be) 487.45 277.19 P
0.09 (expanded by using the constructor names given in the TDF speci\336cation, provided that the parameter SOR) 72 265.19 P
0.09 (T) 499.2 265.19 P
0.09 (s are) 504.61 265.19 P
(also \336rst-class. For example, the following are all valid expansions of <Exp> :) 72 253.19 T
2 F
(make_top) 108 231.19 T
(return\050E\051) 108 216.19 T
(where E is an expansion of <Exp>) 219.67 216.19 T
(goto\050L\051) 108 201.19 T
(where L is an expansion of <Label>) 220.24 201.19 T
(assign\050E1, E2\051) 108 186.19 T
(where E1 and E2 are expansions of <Exp>) 220.78 186.19 T
1 F
0.68 (Any such use of TDF constructors will be checked for the SOR) 72 171.19 P
0.68 (T) 332.26 171.19 P
0.68 (-correctness of their parameters. I will denote) 337.45 171.19 P
(such a constructor as an <exp_constructor>; similarly for all the other \336rst-class sorts.) 72 159.19 T
0.5 (Any of the \336rst-class sorts may also be expanded by a token application. T) 72 137.19 P
0.5 (okens in PL_TDF are given <ident>) 375.98 137.19 P
0.03 (names by <T) 72 125.19 P
0.03 (okdef> or <T) 123.63 125.19 P
0.03 (okdec> which must occur before their use in applications. In applications, these names) 176.45 125.19 P
(will be denoted by <exp_token>, <shape_token> etc. , depending on the result sort of their introduction.) 72 113.19 T
(The principle of \322no use before declaration\323 also applies to <ident> names given to T) 72 91.19 T
(AGs.) 412.78 91.19 T
FMENDPAGE
%%EndPage: "4" 7
%%Page: "5" 7
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 5) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.1) 72 750.56 T
(Pr) 108 750.56 T
(ogram) 122.51 750.56 T
1 10 Q
(The root expansion of a PL_TDF program is given by <Program>:) 72 719.22 T
2 F
(<Program> ::= <ElementList> Keep \050 <Item>-List-Opt \051) 108 697.22 T
(<ElementList> ::= <Element> ;) 108 667.22 T
(<ElementList> ::= <Element> ; <ElementList>) 108 652.22 T
(<Element> ::= <T) 108 622.22 T
(okdec>) 184.12 622.22 T
(<Element> ::= <T) 108 607.22 T
(okdef>) 184.12 607.22 T
(<Element> ::= <T) 108 592.22 T
(agdec>) 184.12 592.22 T
(<Element> ::= <T) 108 577.22 T
(agdef>) 184.12 577.22 T
(<Element> ::= <Altagdef>) 108 562.22 T
(<Element> ::= <Structdef>) 108 547.22 T
(<Element> ::= <Procdef>) 108 532.22 T
(<Item> :: = <tag>) 108 502.22 T
(<Item> ::= <token>) 108 487.22 T
(<item> ::= <altag>) 108 472.22 T
1 F
1.2 (A <Program> consists of a list of de\336nitions and declarations giving meaning to various <ident>s, as T) 72 457.22 P
1.2 (AGs,) 502.48 457.22 P
0.71 (T) 72 445.22 P
0.71 (OKENs and AL_T) 77.93 445.22 P
0.71 (AGs. The <Item>-List-Opt indicates which of these names will be externally available via) 154.04 445.22 P
-0.19 (CAPSULE_LINKs; in addition any other names which are declared but not de\336ned will also be linked externally) 72 433.22 P
-0.19 (.) 520.8 433.22 P
(A <Program> will produce a single TDF CAPSULE.) 72 411.22 T
0 F
(3.1.1) 72 385.22 T
(T) 108 385.22 T
(okdec) 113.75 385.22 T
1 F
(A <T) 72 368.22 T
(okdec> introduces an <ident> as a T) 92.76 368.22 T
(OKEN:) 238.28 368.22 T
2 F
(<T) 108 346.22 T
(okdec> ::= T) 118.83 346.22 T
(okdec <ident> : [ <T) 173.28 346.22 T
(okDecPar>-List-Opt ] <ResultSort>) 260.8 346.22 T
(<ResultSort> ::= <Sortname>) 108 316.22 T
(<T) 108 286.22 T
(okDecPar> ::= <Sortname>) 118.83 286.22 T
(<T) 108 271.22 T
(okDecPar> ::= T) 118.83 271.22 T
(OKEN [ <T) 191.42 271.22 T
(okDecPar>-List-Opt ] <ResultSort>) 238.92 271.22 T
1 F
0.63 (This produces a T) 72 256.22 P
0.63 (OKDEC in a tokdec UNIT of the CAPSULE. Further uses of the introduced <ident> will be) 145.6 256.22 P
(treated as a <x-token> where x is given by the <ResultSort>.) 72 244.22 T
0 F
(3.1.2) 72 218.22 T
(T) 108 218.22 T
(okdef) 113.75 218.22 T
1 F
(A <T) 72 201.22 T
(okdef> de\336nes an <ident> as a T) 92.76 201.22 T
(OKEN; this <ident> may have previously been introduced by a <T) 223.85 201.22 T
(okdec>:) 490.44 201.22 T
2 F
(<T) 108 179.22 T
(okdef> ::= T) 118.83 179.22 T
(okdef <ident> = <T) 171.07 179.22 T
(ok_Defn>) 253.86 179.22 T
(<T) 108 149.22 T
(ok_Defn> ::= [ <T) 118.83 149.22 T
(okDefPar>-List-Opt ] <ResultSort> <result_sort>) 195.23 149.22 T
(<T) 108 119.22 T
(okDefPar> ::= <ident> : <T) 118.83 119.22 T
(okDecPar>) 235.79 119.22 T
1 F
1.51 (This produces a T) 72 89.22 P
1.51 (OKDEF in a tokdef UNIT of the CAPSULE. The expansion of <result_sort> depends on) 148.23 89.22 P
(<ResultSort>, e.g. if <ResultSort> is EXP then <result_sort> ::= <Exp> and so on.) 72 77.22 T
FMENDPAGE
%%EndPage: "5" 8
%%Page: "6" 8
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 6) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
0 X
0.15 (Each of the <ident>s in the <T) 72 763.23 P
0.15 (okDefPar>s will be names for tokens whose scope is <result_sort>. A use of such) 194.61 763.23 P
-0.02 (a name within its scope will be expanded as a parameterless token application of the appropriate sort given by its) 72 751.23 P
(<T) 72 739.23 T
(okDecPar>. Note that this is still true if the <T) 83.04 739.23 T
(okDecPar> is a T) 268.51 739.23 T
(OKEN - if a <T) 338.08 739.23 T
(okDefPar> is:) 400.75 739.23 T
2 F
(x: T) 108 717.23 T
(OKEN[ LABEL ]EXP) 124.48 717.23 T
1 F
(then x[L] is expanded as:) 72 702.23 T
2 F
(exp_apply_token\050 token_apply_token\050x, \050\051\051, L\051) 108 680.23 T
1 F
(<T) 72 650.23 T
(ok_defn> also occurs in an expansion of <T) 83.04 650.23 T
(oken>, as a parameter of a token application.) 258.22 650.23 T
0 F
(3.1.3) 72 624.23 T
(T) 108 624.23 T
(agdec) 113.75 624.23 T
1 F
(A <T) 72 607.23 T
(agdec> introduces an <ident> as a T) 92.76 607.23 T
(AG:) 237.1 607.23 T
2 F
(<T) 108 585.23 T
(agdec> ::= <DecT) 118.83 585.23 T
(ype> <ident> <Access>-Opt : <Shape>) 198.01 585.23 T
(<DecT) 108 555.23 T
(ype> ::= V) 137.16 555.23 T
(ardec) 181.99 555.23 T
(<DecT) 108 540.23 T
(ype> ::= Iddec) 137.16 540.23 T
(<DecT) 108 525.23 T
(ype> ::= Commondec) 137.16 525.23 T
1 F
0.47 (This produces a T) 72 495.23 P
0.47 (AGDEC in a tagdec UNIT of the CAPSULE, using a make_id_tagdec for the Iddec option, a) 144.51 495.23 P
(make_var_tagdec for the V) 72 483.23 T
(ardec option and a common_tagdec for the Commondec option.) 179.96 483.23 T
-0.02 (The <Shape>s in both <T) 72 461.23 P
-0.02 (agdec>s and <T) 173.63 461.23 P
-0.02 (agdef>s will produce SHAPE T) 236.89 461.23 P
-0.02 (OKENs in a tagdef UNIT) 363.84 461.23 P
-0.02 (; these may be) 465.9 461.23 P
(applied in various shorthand operations on T) 72 449.23 T
(AG <ident>s.) 249.97 449.23 T
0 F
(3.1.4) 72 423.23 T
(T) 108 423.23 T
(agdef) 113.75 423.23 T
1 F
0.22 (A <T) 72 406.23 P
0.22 (agdef> de\336nes an <ident> as a T) 92.98 406.23 P
0.22 (AG. This <ident> may have previously been introduced by a <T) 224.22 406.23 P
0.22 (agdec>; if) 482.75 406.23 P
(it has not the < : <Shape> >-Opt below must not be empty and a T) 72 394.23 T
(AGDEC will be produced for it.) 336.65 394.23 T
2 F
(<T) 108 372.23 T
(agdef> ::= V) 118.83 372.23 T
(ar <ident> < : <Shape> >-Opt < = <Exp>>-Opt) 172.55 372.23 T
1 F
(Produces a make_var_tagdef.) 72 357.23 T
2 F
(<T) 108 335.23 T
(agdef> ::= Common <ident> < : <Shape> >-Opt < = <Exp> >-Opt) 118.83 335.23 T
1 F
(Produces a common_tagdef.) 72 320.23 T
2 F
(<T) 108 298.23 T
(agdef> ::= Let <ident> < : <Shape> >-Opt = <Exp>) 118.83 298.23 T
1 F
(Produces a make_id_tagdef.) 72 283.23 T
2 F
(<T) 108 261.23 T
(agdef> ::= String <ident> <V) 118.83 261.23 T
(ariety>-Opt =<string>) 243.4 261.23 T
1 F
0.93 (This is a shorthand for producing names which have the properties of C strings. The <V) 72 246.23 P
0.93 (ariety>-Opt gives the) 436.4 246.23 P
0.43 (variety of the characters with the string, an empty option giving unsigned chars. The TDF produced is a make_) 72 234.23 P
(var_tagdef initialised by a make_nof_int. This means that given a String de\336nition:) 72 222.23 T
2 F
(String format = \322Result = %d\134n\323) 108 200.23 T
1 F
0.17 (the tag <ident>, format, could be used straightforwardly as the \336rst parameter of printf - see Section 4 \050Example) 72 185.23 P
(PL_TDF programs\051.) 72 173.23 T
0 F
(3.1.5) 72 147.23 T
(Altagdef) 108 147.23 T
1 F
(An <Altagdef> de\336nes an <ident> as an AL_T) 72 130.23 T
(AG:) 258.35 130.23 T
2 F
(<Altagdef> ::= Al_tagdef <ident> = <Alignment>) 108 108.23 T
1 F
0.64 (This produces an AL_T) 72 93.23 P
0.64 (AGDEF in an al_tagdef UNIT of the CAPSULE. The <ident> concerned can be previ-) 168.34 93.23 P
(ously used in as an expansion of <Alignment>.) 72 81.23 T
FMENDPAGE
%%EndPage: "6" 9
%%Page: "7" 9
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 7) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
0 F
0 X
(3.1.6) 72 763.23 T
(Structdef) 108 763.23 T
1 F
0.3 (A <Structdef> de\336nes a T) 72 746.23 P
0.3 (OKEN for a structure SHAPE, together with two T) 177.01 746.23 P
0.3 (OKENs for each \336eld of the struc-) 383.82 746.23 P
(ture to allow easy access to the of) 72 734.23 T
(fsets and contents of the \336eld:) 206.44 734.23 T
2 F
(<Structdef> ::= Struct <Structname> \050 <Field>-List \051) 108 712.23 T
(<Structname> ::= <ident>) 108 682.23 T
(<Field> ::= <Fieldname> : <Shape>) 108 652.23 T
(<Fieldname> ::= <ident>) 108 622.23 T
1 F
0.67 (This produces a T) 72 607.23 P
0.67 (OKDEF in a tokdef UNIT de\336ning <Structname> as a SHAPE token whose expansion is an) 145.71 607.23 P
0.17 (EXP OFFSET\050a1,a2\051 where the OFFSET is the size of the structure with standard TDF padding and of) 72 595.23 P
0.17 (fset addi-) 485.66 595.23 P
(tion of the component SHAPEs and sizes) 72 583.23 T
1 8 Q
(1) 236.9 587.23 T
1 10 Q
(.) 240.9 583.23 T
1.08 (Each <Fieldname> will produce two T) 72 561.23 P
1.08 (OKENs. The \336rst is named by <Fieldname> itself and is a [EXP]EXP) 232 561.23 P
0.43 (which gives the value of the \336eld of its structure parameter) 72 549.23 P
0.43 (. The second is named by pre\336xing <Fieldname> by) 311.17 549.23 P
(the .-symbol and is an [ ]EXP giving the OFFSET of the \336eld from the start of the structure. Thus given:) 72 537.23 T
2 F
(Struct Complex \050re: Double, im: Double\051) 108 515.23 T
1 F
0.96 (Complex is a T) 72 500.23 P
0.96 (OKEN for a SHAPE de\336ning two Doubles; re[E] and im[E] will extract the components of E) 136.06 500.23 P
0.26 (where E is an EXP of shape Complex; .re and .im give EXP OFFSET) 72 488.23 P
0.26 (s of the the two \336elds from the start of the) 353.07 488.23 P
(structure.) 72 476.23 T
0 F
(3.1.7) 72 450.23 T
(Pr) 108 450.23 T
(ocdef) 118.36 450.23 T
1 F
(A <Procdef> de\336nes a T) 72 433.23 T
(AG to be a procedure; it is simply an abreviation of a an Iddec <T) 169.63 433.23 T
(agdef>:) 432.7 433.23 T
2 F
(<Procdef> ::= Proc <ident> = <Proc_Defn>) 108 411.23 T
(<Proc_defn> ::= <Shape> \050 <T) 108 381.23 T
(agShAcc>-List-Opt <V) 242.47 381.23 T
(arIntro>-Opt \051 <ClosedExp>) 341.16 381.23 T
(<T) 108 351.23 T
(agShAcc> ::= <Parametername> <Access>-Opt : <Shape>) 118.83 351.23 T
(<Parametername> ::= <ident>) 108 321.23 T
(<V) 108 291.23 T
(arIntro> ::= V) 119.76 291.23 T
(arpar <V) 177.36 291.23 T
(arparname> : <Alignment>) 215.23 291.23 T
(<V) 108 261.23 T
(arparname> ::= <ident>) 119.76 261.23 T
1 F
0.23 (A <Procdef> produces a T) 72 231.23 P
0.23 (AGDEF in a tagdef UNIT and and, possibly) 178.31 231.23 P
0.23 (, a T) 355.82 231.23 P
0.23 (AGDEC in a tagdef UNIT) 373.52 231.23 P
0.23 (. A <Proc_) 479.17 231.23 P
0.11 (Defn> produces a make_proc with the obvious operands. The scope of the tag names introduced by <Parameter-) 72 219.23 P
(name> and <V) 72 207.23 T
(arparname> is the <ClosedExp> \050see section 3.3 on page 15\051.) 130.46 207.23 T
72 82 523.3 96.98 C
72 82 523.3 96.98 R
7 X
0 K
V
81 94.96 225 94.96 2 L
V
0.5 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 8 Q
0 X
0 K
(1. Note that this may not correspond precisely with C sizes.) 90 76.67 T
FMENDPAGE
%%EndPage: "7" 10
%%Page: "8" 10
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 8) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.2) 72 750.56 T
(First-class SOR) 108 750.56 T
(T expansions) 201.18 750.56 T
1 10 Q
-0.14 (All of the \336rst-class sorts have similar expansions for native TDF constructions and for token applications. I shall) 72 719.22 P
(take <Shape> as the paradigm sort and allow the reader to conjugate the following for the the other sorts.) 72 707.22 T
(Those \336rst-class sorts which include the _cond constructions denote them in the same way:) 72 685.22 T
2 F
(<Shape> ::= SHAPE ? \050 <Exp>, <Shape>, <Shape> \051) 108 663.22 T
1 F
(This produces a shape_cond with the obvious parameters.) 72 648.22 T
(Each constructor for <Shape> with parameters which are \336rst-class sorts can be expanded:) 72 626.22 T
2 F
(<Shape> :: = <shape_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 604.22 T
1 F
-0.2 (Each <constructor_param> will be the \336rst_class SOR) 72 589.22 P
-0.2 (T expansion, required by the <shape_constructor> as in the) 287.98 589.22 P
(TDF speci\336cation eg the constructor) 72 577.22 T
(, pointer) 217.61 577.22 T
(, requires a <constructor_param> ::= <Alignment> .) 250.52 577.22 T
(Any <ident> which is declared to be a <shape_token> by a T) 72 555.22 T
(OKDEF or T) 316.15 555.22 T
(OKDEC can be expanded:) 368.71 555.22 T
2 F
(<Shape> ::= <shape_token> < [ <token_param>-List ] >-Opt) 108 533.22 T
1 F
0.56 (This will produce a shape_apply_token with the appropriate parameters. Each <token_param> will be the \336rst-) 72 518.22 P
0.79 (class SOR) 72 506.22 P
0.79 (T expansion required by the SOR) 113.55 506.22 P
0.79 (T given by the <T) 250.96 506.22 P
0.79 (okDecPar> of the T) 325.67 506.22 P
0.79 (OKDEF or T) 407.03 506.22 P
0.79 (OKDEC which) 461.16 506.22 P
(introduced <shape_token>.) 72 494.22 T
0 F
(3.2.1) 72 468.22 T
(Access) 108 468.22 T
2 F
(<Access> ::= ACCESS ? \050 <Exp> , <Access> , <Access> \051) 108 451.22 T
(<Access> ::= <access_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 436.22 T
(<Access> ::= <access_token> < [ <token_param>-List ] >-Opt) 108 421.22 T
1 F
(There are no expansions of <Access> other than the standard ones.) 72 406.22 T
0 F
(3.2.2) 72 380.22 T
(Al_tag) 108 380.22 T
2 F
(<Al_tag> ::= <al_tag_token> < [ <token_param>-List ] >-Opt) 108 363.22 T
1 F
(The standard token expansion.) 72 348.22 T
2 F
(<Al_tag> ::= <ident>) 108 326.22 T
1 F
(Any <ident> found as an expansion of <Al_tag> will be declared as the name for an AL_T) 72 311.22 T
(AG.) 434.6 311.22 T
0 F
(3.2.3) 72 285.22 T
(Alignment) 108 285.22 T
2 F
(<Alignment> ::= ALIGNMENT ? \050 <Exp> , <Alignment> , <Alignment> \051) 108 268.22 T
(<Alignment> ::= <alignment_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 253.22 T
(<Alignment> ::= <alignment_token> < [ <token_param>-List ] >-Opt) 108 238.22 T
1 F
(The standard expansions.) 72 223.22 T
2 F
(<Alignment> ::= <Al_tag>) 108 201.22 T
1 F
(This results in an obtain_al_tag of the AL_T) 72 186.22 T
(AG.) 249.14 186.22 T
2 F
(<Alignment> ::= \050 <Alignment>-List-Opt \051) 108 164.22 T
1 F
0.54 (The <Alignment>s in the <Alignment>-List are united using unite_alignments. The empty option results in the) 72 149.22 P
(top ALIGNMENT) 72 137.22 T
(.) 145.93 137.22 T
FMENDPAGE
%%EndPage: "8" 11
%%Page: "9" 11
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 9) 496.5 36 T
72 72 523.3 769.9 R
7 X
V
0 F
0 X
(3.2.4) 72 763.23 T
(Bit\336eld_variety) 108 763.23 T
2 F
(<Bit\336eld_variety> ::= BITFIELD_V) 108 746.23 T
(ARIETY ? \050 <Exp> , <Bit\336eld_variety>, <Bit\336eld_variety>\051) 256.97 746.23 T
(<Bit\336eld_variety> ::= <bit\336eld_variety_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 731.23 T
(<Bit\336eld_variety> ::= <bit\336eld_variety__token> < [ <token_param>-List ] >-Opt) 108 716.23 T
1 F
(The standard expansions.) 72 701.23 T
2 F
(<Bit\336eld_variety> ::= <BfSign>-Opt <Nat>) 108 679.23 T
(<BfSign> ::= <Bool>) 108 649.23 T
(<BfSign> ::= Signed) 108 634.23 T
(<BfSign> ::= Unsigned) 108 619.23 T
1 F
(This expands to bfvar_bits. The empty default on the sign is Signed.) 72 604.23 T
0 F
(3.2.5) 72 578.23 T
(Bool) 108 578.23 T
2 F
(<Bool> ::= BOOL ? \050 <Exp> , <Bool>, <Bool>\051) 108 561.23 T
(<Bool> ::= <bool_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 546.23 T
(<Bool> ::= <bool_token> < [ <token_param>-List ] >-Opt) 108 531.23 T
1 F
(There are no expansions of <Bool> other than the standard ones.) 72 516.23 T
0 F
(3.2.6) 72 490.23 T
(Err) 108 490.23 T
(or_tr) 123.36 490.23 T
(eatment) 145.38 490.23 T
2 F
(<Error_treatment> ::= ERROR_TREA) 108 473.23 T
(TMENT ?) 274.17 473.23 T
(\050 <Exp> , <Error_treatment>, <Error_treatment>\051) 249.7 458.23 T
(<Error_treatment> ::= <error_treatment_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 443.23 T
(<Error_treatment> ::= <error_treatment__token> < [ <token_param>-List ] >-Opt) 108 428.23 T
1 F
(The standard expansions.) 72 413.23 T
2 F
(<Error_treatment> ::= <Label>) 108 391.23 T
1 F
(This gives an error_jump to the label.) 72 376.23 T
0 F
(3.2.7) 72 350.23 T
(Exp) 108 350.23 T
2 F
(<Exp> ::= <ExpT) 108 333.23 T
(erm>) 181.9 333.23 T
(<Exp> ::= <ExpT) 108 318.23 T
(erm> <BinaryOp> <ExpT) 181.9 318.23 T
(erm>) 291.89 318.23 T
1 F
-0.07 (The <BinaryOp>s include the arithmetic, of) 72 303.23 P
-0.07 (fset, logical operators and assignment and are given in table 1. In this) 247.08 303.23 P
(expansion, any error_treatments are taken to be wrap.) 72 291.23 T
0 F
(T) 288.09 269.23 T
(able 1.) 293.84 269.23 T
2 F
(<BinaryOp>) 101.78 245.23 T
(TDF constructor) 193.43 245.23 T
(<BinaryOp>) 310.58 245.23 T
(TDF constructor) 402.23 245.23 T
(And) 119.56 223.23 T
(and) 220.91 223.23 T
(Or) 331.7 223.23 T
(or) 433.61 223.23 T
(Xor) 120.67 203.23 T
(xor) 222.31 203.23 T
(*+.) 331 203.23 T
(add_to_ptr) 414.16 203.23 T
(*-*) 122.9 183.23 T
(subtract_ptrs) 200.36 183.23 T
(.*) 333.92 183.23 T
(of) 413.7 183.23 T
(fset_mult) 421.85 183.23 T
(.+.) 122.75 163.23 T
(of) 206 163.23 T
(fset_add) 214.16 163.23 T
(.-.) 332.8 163.23 T
(of) 405.36 163.23 T
(fset_subtract) 413.52 163.23 T
(./) 125.67 143.23 T
(of) 191.84 143.23 T
(fset_div_by_int) 199.99 143.23 T
(./.) 333.08 143.23 T
(of) 416.75 143.23 T
(fset_div) 424.9 143.23 T
(.max.) 116.23 123.23 T
(of) 204.9 123.23 T
(fset_max) 213.05 123.23 T
(%) 332.8 123.23 T
(rem2) 426.66 123.23 T
(%1) 121.23 103.23 T
(rem1) 217.86 103.23 T
(*) 335.3 103.23 T
(mult) 428.61 103.23 T
(+) 125.53 83.23 T
(plus) 220.08 83.23 T
(-) 335.58 83.23 T
(minus) 424.72 83.23 T
164.45 260.9 164.45 75.65 2 L
V
0.5 H
0 Z
N
294.05 260.9 294.05 75.65 2 L
V
N
301.25 260.9 301.25 75.65 2 L
V
N
373.25 260.9 373.25 75.65 2 L
V
N
92.45 259.9 502.85 259.9 2 L
V
2 H
N
92.45 235.9 502.85 235.9 2 L
V
N
92.45 215.9 502.85 215.9 2 L
V
0.5 H
N
92.45 195.9 502.85 195.9 2 L
V
N
92.45 175.9 502.85 175.9 2 L
V
N
92.45 155.9 502.85 155.9 2 L
V
N
92.45 135.9 502.85 135.9 2 L
V
N
92.45 115.9 502.85 115.9 2 L
V
N
92.45 95.9 502.85 95.9 2 L
V
N
92.45 75.9 502.85 75.9 2 L
V
N
FMENDPAGE
%%EndPage: "9" 12
%%Page: "10" 12
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 10) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
-0.14 (The names like *+. \050i.e. add_to_ptr\051 do have a certain logic; the * indicates that the left operand must be a pointer) 72 611.23 P
(expression and the . that the other is an of) 72 599.23 T
(fset) 238.37 599.23 T
(The further expansions of <Exp> are all <ExpT) 72 577.23 T
(erm>s) 261.69 577.23 T
0 F
(3.2.7.1) 72 551.23 T
(ExpT) 108 551.23 T
(erm) 130.97 551.23 T
2 F
(<ExpT) 108 534.23 T
(erm> ::= EXP ? \050 <Exp> , <Exp>, <Exp>\051) 136.05 534.23 T
(<ExpT) 108 519.23 T
(erm> ::= <exp_constructor> < \050 <constructor_param>-List \051 >-Opt) 136.05 519.23 T
(<ExpT) 108 504.23 T
(erm> ::= <exp_token> < [ <token_param>-List ] >-Opt) 136.05 504.23 T
1 F
(The standard expansions.) 72 489.23 T
2 F
(<ExpT) 108 467.23 T
(erm> ::= <ClosedExp>) 136.05 467.23 T
1 F
(For <ClosedExp>, see section 3.3 on page 15.) 72 452.23 T
2 F
(<ExpT) 108 430.23 T
(erm> ::= \050 <Exp> \051) 136.05 430.23 T
(<ExpT) 108 415.23 T
(erm> ::= - \050 <Exp> \051) 136.05 415.23 T
1 F
(The negate constructor) 72 400.23 T
(.) 163.04 400.23 T
2 F
(<ExpT) 108 378.23 T
(erm> ::= Sizeof \050 <Shape> \051) 136.05 378.23 T
1 F
0.03 (This produces the EXP OFFSET for an index multiplier for arrays of <Shape>. It is the shape_of) 72 363.23 P
0.03 (fset of <Shape>) 459.77 363.23 P
(padded up to its alignment.) 72 351.23 T
2 F
(<ExpT) 108 329.23 T
(erm> ::= <T) 136.05 329.23 T
(ag>) 186.89 329.23 T
1 F
(This produces an obtain_tag.) 72 314.23 T
2 F
(<ExpT) 108 292.23 T
(erm> ::= * <ident>) 136.05 292.23 T
1 F
0.05 (The <ident> must have been declared as a variable T) 72 277.23 P
0.05 (AG and the construction produces a contents operation with) 283.05 277.23 P
(its declared SHAPE.) 72 265.23 T
2 F
(<ExpT) 108 243.23 T
(erm> ::= * \050 <Shape> \051 <ExpT) 136.05 243.23 T
(erm>) 266.33 243.23 T
1 F
(This produces a contents operation with the given <Shape>.) 72 228.23 T
2 F
(<ExpT) 108 206.23 T
(erm> ::= <Assertion>) 136.05 206.23 T
1 F
(For <Assertion>, see section 3.3.1 on page 15) 72 191.23 T
2 F
(<ExpT) 108 169.23 T
(erm> ::= Case <Exp> \050 <RangeDest>-List \051) 136.05 169.23 T
(<RangeDest> ::= <Signed_Nat> < : <Signed_Nat> >-Opt -> <Label>) 108 139.23 T
1 F
(This produces a case operation.) 72 124.23 T
2 F
(/) 127.06 717.23 T
(div2) 220.08 717.23 T
(/1) 333.08 717.23 T
(div1) 428.88 717.23 T
(<<) 122.61 697.23 T
(shift_left) 210.64 697.23 T
(>>) 331.41 697.23 T
(shift_right) 416.39 697.23 T
(F*) 123.45 677.23 T
(\337oating_mult) 200.92 677.23 T
(F+) 331.28 677.23 T
(\337oating_plus) 409.99 677.23 T
(F-) 123.73 657.23 T
(\337oating_minus) 197.03 657.23 T
(F/) 332.8 657.23 T
(\337oating_div) 412.77 657.23 T
(=) 125.53 637.23 T
(assign) 214.81 637.23 T
0 F
(T) 288.09 763.23 T
(able 1.) 293.84 763.23 T
2 F
(<BinaryOp>) 101.78 739.23 T
(TDF constructor) 193.43 739.23 T
(<BinaryOp>) 310.58 739.23 T
(TDF constructor) 402.23 739.23 T
164.45 754.9 164.45 629.65 2 L
V
0.5 H
0 Z
N
294.05 754.9 294.05 629.65 2 L
V
N
301.25 754.9 301.25 629.65 2 L
V
N
373.25 754.9 373.25 629.65 2 L
V
N
92.45 753.9 502.85 753.9 2 L
V
2 H
N
92.45 729.9 502.85 729.9 2 L
V
N
92.45 709.9 502.85 709.9 2 L
V
0.5 H
N
92.45 689.9 502.85 689.9 2 L
V
N
92.45 669.9 502.85 669.9 2 L
V
N
92.45 649.9 502.85 649.9 2 L
V
N
92.45 629.9 502.85 629.9 2 L
V
N
FMENDPAGE
%%EndPage: "10" 13
%%Page: "11" 13
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 1) 491.88 36 T
(1) 499 36 T
72 72 523.3 769.9 R
7 X
V
2 F
0 X
(<ExpT) 108 741.23 T
(erm> ::= Cons [ <Exp> ] \050 < <Of) 136.05 741.23 T
(fset> : <Exp> >-List \051) 275.88 741.23 T
(<Of) 108 711.23 T
(fset> ::= <Exp>) 124.21 711.23 T
1 F
(This produces a make_compound with the [ <Exp> ] as the size and \336elds given by < <Of) 72 696.23 T
(fset> : <Exp> >-List.) 431.63 696.23 T
2 F
(<ExpT) 108 674.23 T
(erm> ::= [ <V) 136.05 674.23 T
(ariety> ] <ExpT) 193.37 674.23 T
(erm>) 260.04 674.23 T
1 F
(This produces a change_variety with a wrap error_treatment.) 72 659.23 T
2 F
(<ExpT) 108 637.23 T
(erm> ::= <Signed_Nat> \050 <V) 136.05 637.23 T
(ariety> \051) 260.6 637.23 T
1 F
(This produces a make_int of the <Signed_Nat> with the given variety) 72 622.23 T
(.) 350.78 622.23 T
2 F
(<ExpT) 108 600.23 T
(erm> ::= <\337oating_denotation> < E <Signed_Nat> >-Opt) 136.05 600.23 T
(<ExpT) 108 585.23 T
(erm> ::= - <\337oating_denotation> < E <Signed_Nat> >-Opt) 136.05 585.23 T
1 F
(Produces a make_\337oating.) 72 570.23 T
2 F
(<ExpT) 108 548.23 T
(erm> ::= <ProcV) 136.05 548.23 T
(al> [ <Shape> ] \050 <Exp>-List-Opt < V) 208.37 548.23 T
(arpar <Exp> >-Opt\051) 369.86 548.23 T
(<ProcV) 108 518.23 T
(al> :: = <T) 140.31 518.23 T
(ag>) 184.49 518.23 T
(<ProcV) 108 503.23 T
(al> :: = \050 <Exp> \051) 140.31 503.23 T
1 F
(Produces an apply_proc with the given parameters returning the given <Shape>.) 72 488.23 T
2 F
(<ExpT) 108 466.23 T
(erm> ::= Proc <Proc_defn>) 136.05 466.23 T
1 F
(Produces a make_proc. For <Proc_defn>, see section 3.1.7 on page 8) 72 451.23 T
2 F
(<ExpT) 108 429.23 T
(erm> ::= <string> \050 <V) 136.05 429.23 T
(ariety> \051) 232.81 429.23 T
1 F
(Produces a make_nof_int of the given variety) 72 414.23 T
(.) 253.44 414.23 T
2 F
(<ExpT) 108 392.23 T
(erm> ::= # <string>) 136.05 392.23 T
1 F
0.03 (This produces a TDF fail_installer; this construction is useful for narrowing down SHAPE errors detected by the) 72 377.23 P
(translator) 72 365.23 T
(.) 109.2 365.23 T
0 F
(3.2.8) 72 339.23 T
(Floating_variety) 108 339.23 T
2 F
(<Floating_variety> ::= FLOA) 108 322.23 T
(TING_V) 232.53 322.23 T
(ARIETY ?) 267.89 322.23 T
(\050 <Exp> , <Floating_variety>, <Floating_variety>\051) 235.81 307.23 T
(<Floating_variety> ::= <\337oating_variety_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 292.23 T
(<Floating_variety> ::= <\337oating_variety__token> < [ <token_param>-List ] >-Opt) 108 277.23 T
1 F
(The standard constructions.) 72 262.23 T
2 F
(<Floating_variety> ::= Float) 108 240.23 T
1 F
(An IEEE 32 bit \337oating variety) 72 225.23 T
(.) 196.55 225.23 T
2 F
(<Floating_variety> ::= Double) 108 203.23 T
1 F
(An IEEE 64 bit \337oating variety) 72 188.23 T
(.) 196.55 188.23 T
0 F
(3.2.9) 72 162.23 T
(Label) 108 162.23 T
2 F
(<Label> ::= <label_token> < [ <token_param>-List ] >-Opt) 108 145.23 T
1 F
(The standard token application.) 72 130.23 T
2 F
(<Label> ::= <ident>) 108 108.23 T
1 F
(The <ident> will be declared as a LABEL, whose scope is the current procedure.) 72 93.23 T
FMENDPAGE
%%EndPage: "11" 14
%%Page: "12" 14
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 12) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 F
0 X
(3.2.10) 72 763.23 T
(Nat) 108 763.23 T
2 F
(<Nat> ::= NA) 108 746.23 T
(T ? \050 <Exp> , <Nat>, <Nat>\051) 165.32 746.23 T
(<Nat> ::= <nat_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 731.23 T
(<Nat> ::= <nat_token> < [ <token_param>-List ] >-Opt) 108 716.23 T
1 F
(The standard expansions.) 72 701.23 T
2 F
(<Nat> ::= <integer_denotation>) 108 679.23 T
1 F
(Produces a make_nat on the integer) 72 664.23 T
2 F
(<Nat> ::= <character>) 108 642.23 T
1 F
(Produces a make_nat on the ASCII value of the character) 72 627.23 T
(.) 300.98 627.23 T
0 F
(3.2.1) 72 601.23 T
(1) 91.44 601.23 T
(Ntest) 108 601.23 T
2 F
(<Ntest> ::= NTEST ? \050 <Exp> , <Ntest>, <Ntest>\051) 108 584.23 T
(<Ntest> ::= <ntest_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 569.23 T
(<Ntest> ::= <ntest_token> < [ <token_param>-List ] >-Opt) 108 554.23 T
1 F
(The standard expansions.) 72 539.23 T
2 F
(<Ntest> ::= !<) 108 517.23 T
1 F
(Produces not_less_than.) 72 502.23 T
2 F
(<Ntest> ::= !<=) 108 480.23 T
1 F
(Produces not_less_than_or_equal.) 72 465.23 T
2 F
(<Ntest> ::= !=) 108 443.23 T
1 F
(Produces not_equal.) 72 428.23 T
2 F
(<Ntest> ::= !>) 108 406.23 T
1 F
(Produces not_greater_than.) 72 391.23 T
2 F
(<Ntest> ::= !>=) 108 369.23 T
1 F
(Produces not_greater_than_or_equal.) 72 354.23 T
2 F
(<Ntest> ::= !Comparable) 108 332.23 T
1 F
(Produces not_comparable.) 72 317.23 T
2 F
(<Ntest> ::= <) 108 295.23 T
1 F
(Produces less_than.) 72 280.23 T
2 F
(<Ntest> ::= <=) 108 258.23 T
1 F
(Produces less_than_or_equal.) 72 243.23 T
2 F
(<Ntest> ::= ==) 108 221.23 T
1 F
(Produces equal.) 72 206.23 T
2 F
(<Ntest> ::= >) 108 184.23 T
1 F
(Produces greater_than.) 72 169.23 T
2 F
(<Ntest> ::= >=) 108 147.23 T
1 F
(Produces greater_than_or_equal.) 72 132.23 T
FMENDPAGE
%%EndPage: "12" 15
%%Page: "13" 15
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 13) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 F
0 X
(3.2.12) 72 763.23 T
(Rounding_mode) 108 763.23 T
2 F
(<Rounding_mode> ::= ROUNDING_MODE?) 108 746.23 T
(\050 <Exp> , <Rounding_mode>, <Rounding_mode>\051) 238.59 731.23 T
(<Rounding_mode> ::= <ntest_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 716.23 T
(<Rounding_mode> ::= <ntest_token> < [ <token_param>-List ] >-Opt) 108 701.23 T
1 F
(There are no constructions for <Rounding_mode> other than the standard ones.) 72 686.23 T
0 F
(3.2.13) 72 660.23 T
(Shape) 108 660.23 T
2 F
(<Shape> ::= SHAPE ? \050 <Exp> , <Shape>, <Shape>\051) 108 643.23 T
(<Shape> ::= <shape_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 628.23 T
(<Shape> ::= <shape_token> < [ <token_param>-List ] >-Opt) 108 613.23 T
1 F
(The standard expansions.) 72 598.23 T
2 F
(<Shape> ::= Float) 108 576.23 T
1 F
(The shape for an IEEE 32 bit \337oat.) 72 561.23 T
2 F
(<Shape> ::= Double) 108 539.23 T
1 F
(The shape for an IEEE 64 bit \337oat.) 72 524.23 T
2 F
(<Shape> ::= <Sign>-Opt Int) 108 502.23 T
(<Sign> ::= Signed) 108 472.23 T
(<Sign> ::= Unsigned) 108 457.23 T
1 F
(The shape for a 32 bit signed or unsigned integer) 72 442.23 T
(. The default is signed.) 267.14 442.23 T
2 F
(<Shape> ::= <Sign>-Opt Long) 108 420.23 T
1 F
(The shape for a 32 bit signed or unsigned integer) 72 405.23 T
(.) 267.14 405.23 T
2 F
(<Shape> ::= <Sign>-Opt Short) 108 383.23 T
1 F
(The shape for a 16 bit signed or unsigned integer) 72 368.23 T
(.) 267.14 368.23 T
2 F
(<Shape> ::= <Sign>-Opt Char) 108 346.23 T
1 F
(The shape for a 8 bit signed or unsigned integer) 72 331.23 T
(.) 262.14 331.23 T
2 F
(<Shape> ::= Ptr <Shape>) 108 309.23 T
1 F
(The SHAPE pointer\050alignment\050<Shape>\051\051.) 72 294.23 T
0 F
(3.2.14) 72 268.23 T
(Signed_Nat) 108 268.23 T
2 F
(<Signed_Nat> ::= SIGNED_NA) 108 251.23 T
(T ? \050 <Exp> , <Signed_Nat>, <Signed_Nat>\051) 245.86 251.23 T
(<Signed_Nat> ::= <signed_nat_constructor> < \050 <constructor_param>-List \051 >-Opt) 108 236.23 T
(<Signed_Nat> ::= <signed_nat_token> < [ <token_param>-List ] >-Opt) 108 221.23 T
1 F
(The standard expansions.) 72 206.23 T
2 F
(<Signed_Nat> ::= <integer_denotation>) 108 184.23 T
(<Signed_Nat> ::= - <integer_denotation>) 108 169.23 T
1 F
(This produces a make_signed_nat on the integer value.) 72 154.23 T
2 F
(<Signed_Nat> ::= <character>) 108 132.23 T
(<Signed_Nat> ::= - <character>) 108 117.23 T
1 F
(This produces a make_signed_nat on the ASCII value of the character) 72 102.23 T
(.) 351.79 102.23 T
FMENDPAGE
%%EndPage: "13" 16
%%Page: "14" 16
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 14) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
2 F
0 X
(<Signed_Nat> ::= LINE) 108 741.23 T
1 F
0.4 (This produces a make_signed_nat on the current line number of the \336le being compiled - useful for writing test) 72 726.23 P
(programs.) 72 714.23 T
0 F
(3.2.15) 72 688.23 T
(T) 108 688.23 T
(ag) 113.75 688.23 T
2 F
(<T) 108 671.23 T
(ag> ::= <tag_token> < [ <token_param>-List ] >-Opt) 118.83 671.23 T
1 F
(The standard token application.) 72 656.23 T
2 F
(<T) 108 634.23 T
(ag> ::= <ident>) 118.83 634.23 T
1 F
(This gives an obtain_tag; the <ident> must been declared as a T) 72 619.23 T
(AG either globally or locally) 326.47 619.23 T
(.) 441.3 619.23 T
0 F
(3.2.16) 72 593.23 T
(T) 108 593.23 T
(oken) 113.75 593.23 T
1 F
0.58 (T) 72 576.23 P
0.58 (OKEN is rather a limited \336rst-class sort. There is no explicit construction given for token_apply_token, since) 77.93 576.23 P
0.59 (the only place where it can occur is in an expansion of a token parameter of another token; here it is produced) 72 564.23 P
0.27 (implicitly) 72 552.23 P
0.27 (. The only place where <T) 110.23 552.23 P
0.27 (oken> is expanded is in an actual T) 216.45 552.23 P
0.27 (OKEN parameter of a token application;) 359.56 552.23 P
(other uses \050e.g. as in <shape_token>\051 are always <ident>s.) 72 540.23 T
2 F
(<T) 108 518.23 T
(oken> ::= <ident>) 118.83 518.23 T
1 F
(The <ident> must have been declarered by a <T) 72 503.23 T
(okdec> or <T) 263.07 503.23 T
(okdec> or is a formal parameter of T) 316.93 503.23 T
(OKEN.) 464.21 503.23 T
2 F
(<T) 108 481.23 T
(oken> ::= Use <T) 118.83 481.23 T
(ok_Defn>) 194.67 481.23 T
1 F
0.18 (This produces a use_tokdef. For <T) 72 466.23 P
0.18 (ok_Defn> see section 3.1.2 on page 6. The critical use of this construction is) 214.96 466.23 P
0.77 (to provide an actual T) 72 454.23 P
0.77 (OKEN parameter to a token application where the <T) 162.63 454.23 P
0.77 (ok_Defn> contains uses of tags or) 383.05 454.23 P
(labels local to a procedure.) 72 442.23 T
0 F
(3.2.17) 72 416.23 T
(T) 108 416.23 T
(ransfer_mode) 113.93 416.23 T
2 F
(<T) 108 399.23 T
(ransfer_mode> ::= TRANSFER_MODE ? \050 <Exp> , <T) 119.57 399.23 T
(ransfer_mode>, <T) 359.44 399.23 T
(ransfer_mode>\051) 444.07 399.23 T
(<T) 108 384.23 T
(ransfer_mode> ::= <transfer_mode_constructor> < \050 <constructor_param>-List \051 >-Opt) 119.57 384.23 T
(<T) 108 369.23 T
(ransfer_mode> ::= <transfer_mode_token> < [ <token_param>-List ] >-Opt) 119.57 369.23 T
1 F
(There are no expansions for <T) 72 354.23 T
(ransfer_mode> other than the standard expansions.) 197.46 354.23 T
0 F
(3.2.18) 72 328.23 T
(V) 108 328.23 T
(ariety) 114.3 328.23 T
2 F
(<V) 108 311.23 T
(ariety> ::= V) 119.76 311.23 T
(ARIETY ? \050 <Exp> , <V) 172.91 311.23 T
(ariety>, <V) 275.23 311.23 T
(ariety>\051) 322.82 311.23 T
(<V) 108 296.23 T
(ariety> ::= <variety_constructor> < \050 <constructor_param>-List \051 >-Opt) 119.76 296.23 T
(<V) 108 281.23 T
(ariety> ::= <variety_token> < [ <token_param>-List ] >-Opt) 119.76 281.23 T
1 F
(The standard expansions.) 72 266.23 T
2 F
(<V) 108 244.23 T
(ariety> ::= <Signed_Nat> : <Signed_Nat>) 119.76 244.23 T
1 F
(This produces var_limits.) 72 229.23 T
2 F
(<V) 108 207.23 T
(ariety> ::= <Sign>-Opt Int) 119.76 207.23 T
(<V) 108 192.23 T
(ariety> ::= <Sign>-Opt Long) 119.76 192.23 T
(<V) 108 177.23 T
(ariety> ::= <Sign>-Opt Short) 119.76 177.23 T
(<V) 108 162.23 T
(ariety> ::= <Sign>-Opt Char) 119.76 162.23 T
1 F
(This produces the variety of the appropriate integer shape.) 72 147.23 T
FMENDPAGE
%%EndPage: "14" 17
%%Page: "15" 17
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 15) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(3.3) 72 750.56 T
(Contr) 108 750.56 T
(ol structur) 143.5 750.56 T
(e and local declarations) 206.59 750.56 T
1 10 Q
(The control and declaration structure is given by <ClosedExp>:) 72 719.22 T
2 F
(<ClosedExp> ::= { <ExpSeq> }) 108 697.22 T
(<ExpSeq> ::= <Exp>-Opt) 108 667.22 T
(<ExpSeq> ::= <ExpSeq> ; <Exp>-Opt) 108 652.22 T
1 F
0.19 (This produces a TDF sequence if there is more than one <Exp>-Opt; if there is only one it is simply the produc-) 72 637.22 P
(tion for <Exp>-Opt; any empty <Exp>-Opt produce make_top.) 72 625.22 T
2 F
(<ClosedExp> ::= <ConditionalExp>) 108 603.22 T
(<ClosedExp> ::= <RepeatExp>) 108 588.22 T
(<ClosedExp> ::= <LabelledExp>) 108 573.22 T
(<ClosedExp> ::= <Local_Defn>) 108 558.22 T
1 F
(The ef) 72 543.22 T
(fect of these, together with the expansion of <Assertion> is given below) 97.63 543.22 T
(.) 385.28 543.22 T
0 F
(3.3.1) 72 517.22 T
(ConditionalExp and Assertion) 108 517.22 T
2 F
(<ConditionalExp> ::= ? { <ExpSeq> | <LabelSetting>-Opt <ExpSeq> }) 108 500.22 T
(<LabelSetting> ::= : <Label> :) 108 470.22 T
1 F
0.58 (This produces a TDF conditional. The scope of a LABEL <ident> which may be introduced by <Label> is the) 72 455.22 P
0.22 (\336rst <ExpSeq>. A branch to the second half of the conditional will usually be made by the failure of an <Asser-) 72 443.22 P
(tion> \050 ie a TDF _test\051 in the \336rst half.) 72 431.22 T
2 F
(<Assertion> ::= <Query> \050 <Exp> <Ntest> <Exp> <FailDest>-Opt \051) 108 409.22 T
(<Query> ::= ?) 108 379.22 T
1 F
(The assertion will be translated as an integer_test) 72 364.22 T
2 F
(<Query> ::= F?) 108 342.22 T
1 F
(The assertion will be translated as a \337oating_test with a wrap error_treatment.) 72 327.22 T
2 F
(<Query> ::= *?) 108 305.22 T
1 F
(The assertion will be translated as a pointer_test.) 72 290.22 T
2 F
(<Query> ::= .?) 108 268.22 T
1 F
(The assertion will be translated as an of) 72 253.22 T
(fset_test.) 230.31 253.22 T
2 F
(<Query> ::= P?) 108 231.22 T
1 F
(The assertion will be translated as a proc_test.) 72 216.22 T
2 F
(<FailDest> ::= | <Label>) 108 194.22 T
1 F
0.48 (The <Assertion> will produce the appropriate _test on its component <Exp>s. If the test fails, then control will) 72 164.22 P
-0.18 (pass to the <FailDest>-Opt. If <FailDest>-Opt is not empty) 72 152.22 P
-0.18 (, this is the <Label>. Otherwise, the <Assertion> must) 307.6 152.22 P
1.5 (be in the immediate context of a <ConditionalExp> or <RepeatExp> with an empty <LabelSetting>-Opt; in) 72 140.22 P
-0.01 (which case this is treated as an anonymous label and control passes to there. For example, the following <Condi-) 72 128.22 P
(tional> delivers the maximum of two integers:) 72 116.22 T
2 F
(?{ ?\050a >= b\051; a | b }) 108 94.22 T
FMENDPAGE
%%EndPage: "15" 18
%%Page: "16" 18
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 16) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
0 X
(This is equivalent to:) 72 763.23 T
2 F
(?{ ?\050a >= b | L \051; a | :L: b }) 108 741.23 T
1 F
(without the hassle of having to invent the LABEL name, L.) 72 726.23 T
0 F
(3.3.2) 72 700.23 T
(RepeatExp) 108 700.23 T
2 F
(<RepeatExp> ::= Rep <Starter>-Opt { <LabelSetting>-Opt <ExpSeq> }) 108 683.23 T
(<Starter> = \050 <ExpSeq> \051) 108 653.23 T
1 F
0.41 (This produces a TDF repeat. The loop will usually repeat by an <Assertion> failing to the <LabelSetting>-Opt;) 72 638.23 P
0.11 (an empty <LabelSetting>-Opt will follow the same conventions as one in a <Conditional>. An empty <Starter>-) 72 626.23 P
(Opt will produce make_top.) 72 614.23 T
0 F
(3.3.3) 72 588.23 T
(LabelledExp) 108 588.23 T
2 F
(<LabelledExp> ::= Labelled { <ExpSeq> <Places> }) 108 571.23 T
(<Places> ::= <Place>) 108 541.23 T
(<Places> ::= <Places> <Place>) 108 526.23 T
(<Place> ::= | : <Label> : <ExpSeq>) 108 496.23 T
1 F
-0.08 (This produces a TDF labelled with the obvious parameters. The scope of any LABEL <idents> introduced by the) 72 481.23 P
(<Label>s is the <LabelledExp>.) 72 469.23 T
0 F
(3.3.4) 72 443.23 T
(Local_Defn) 108 443.23 T
1 F
0.1 (A <Local_Defn> introduces an <ident> as a T) 72 426.23 P
0.1 (AG for the scope of the component <ClosedExp>. Any containing) 256.83 426.23 P
(an <Access> visible is also available globally - however it will only make sense in the constructor env_of) 72 414.23 T
(fset.) 494.2 414.23 T
2 F
(<Local_Defn> ::= V) 108 392.23 T
(ar <ident> <Access>-Opt <V) 193.1 392.23 T
(arInit> <ClosedExp>) 318.75 392.23 T
(<V) 108 362.23 T
(arInit> ::= = <Exp>) 119.76 362.23 T
1 F
(This <Local_Defn> produces a TDF variable with the obvious parameters.) 72 347.23 T
2 F
(<Local_Defn> ::= V) 108 325.23 T
(ar <ident> <Access>-Opt : <Shape> <V) 193.1 325.23 T
(arInit>-Opt <ClosedExp>) 367.66 325.23 T
1 F
0.57 (Also a TDF variable. An empty <V) 72 310.23 P
0.57 (arInit>-Opt gives make_value\050<Shape>\051 as the initialisation to the variable.) 216.22 310.23 P
0.36 (Using this form of variable de\336nition also has the advantage of allowing one to use the simple form of the con-) 72 298.23 P
(tents operation \050 * in section 3.2.7 on page 10\051.) 72 286.23 T
2 F
(<Local_Defn> ::= Let <ident> <Access>-Opt = <Exp> <ClosedExp>) 108 264.23 T
1 F
(This produces a TDF identify with the obvious parameters.) 72 249.23 T
FMENDPAGE
%%EndPage: "16" 19
%%Page: "17" 19
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 17) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(4) 72 741.88 T
(Example PL_TDF pr) 99 741.88 T
(ograms) 315.79 741.88 T
72 661.84 523.3 671.85 C
72 661.84 523.3 671.85 R
7 X
0 K
V
72 670.84 541.01 670.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 637.84 523.3 647.84 C
72 637.84 523.3 647.84 R
7 X
0 K
V
72 646.84 541.01 646.84 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.1) 72 652.51 T
(Sieve of Erastothenes) 108 652.51 T
2 10 Q
(/* Print out the primes less than 10000 */) 108 599.17 T
(String s1 = \322%d\134t\323;) 108 584.17 T
(/* good strings for printf */) 270 584.17 T
(String s2 = \322\134n\323;) 108 569.17 T
(V) 108 539.17 T
(ar n: nof\05010000, Char\051;) 113.93 539.17 T
(/* will contain1 for prime; 0 for composite */) 270 539.17 T
(T) 108 509.17 T
(okdef N = [ind:EXP]EXP n *+. \050Sizeof\050Char\051 .* ind\051;) 113 509.17 T
(/* T) 234 494.17 T
(oken delivering pointer to element of n */) 248.44 494.17 T
(Iddec printf : proc;) 108 464.17 T
(/* de\336nition provided by ansi library */) 234 464.17 T
(Proc main = top \050\051) 108 434.17 T
(V) 126 419.17 T
(ar i:Int) 131.93 419.17 T
(V) 126 404.17 T
(ar j:Int) 131.93 404.17 T
({ Rep \050i = 2\050Int\051\051) 126 389.17 T
({) 162 374.17 T
(/* set i-th element of n to 1 */) 198 374.17 T
( N[* i] = 1\050Char\051;) 162 359.17 T
( i = \050* i + 1\050Int\051\051;) 162 344.17 T
( ?\050* i >= 10000\050Int\051\051) 162 329.17 T
(/* NB assertion fails to continue loop */) 270 329.17 T
(}) 162 314.17 T
(Rep \050i = 2\050Int\051 \051) 126 299.17 T
({) 162 284.17 T
( ?{) 162 269.17 T
(?\050 *\050Char\051N[* i] == 1\050Char\051\051;) 198 269.17 T
(/* if its a prime ... */) 198 254.17 T
(Rep \050 j = \050* i + * i\051 \051) 198 239.17 T
({ /*... wipe out composites */) 198 224.17 T
(N[* j] = 0\050Char\051;) 198 209.17 T
(j = \050* j + * i\051;) 198 194.17 T
(?\050* j >= 10000\050Int\051\051) 198 179.17 T
( }) 162 164.17 T
( | make_top) 162 149.17 T
( };) 162 134.17 T
( i = \050* i + 1\050Int\051\051;) 162 119.17 T
( ?\050* i >= 100\050Int\051\051) 162 104.17 T
( };) 162 89.17 T
FMENDPAGE
%%EndPage: "17" 20
%%Page: "18" 20
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 18) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
2 F
0 X
( Rep \050i = 2\050Int\051; j = 0\050Int\051 \051) 126 763.23 T
({) 162 748.23 T
(?{) 198 748.23 T
(?\050 *\050Char\051N[* i] == 1\050Char\051\051;) 234 748.23 T
(/* if it\325) 234 733.23 T
(s a prime, print it */) 258.26 733.23 T
(printf[top]\050s1, * i\051;) 234 718.23 T
( j = \050* j + 1\050Int\051\051;) 234 703.23 T
(?{) 234 688.23 T
(?\050 * j == 5\050Int\051\051;) 270 688.23 T
(/* print new line */) 270 673.23 T
(printf[top]\050s2\051;) 270 658.23 T
(j = 0\050Int\051) 270 643.23 T
( | make_top) 234 628.23 T
(}) 234 613.23 T
(| make_top) 198 598.23 T
(};) 198 583.23 T
(i = \050* i + 1\050Int\051\051;) 198 568.23 T
(?\050* i >= 10000\050Int\051\051) 198 553.23 T
( };) 162 538.23 T
( return\050make_top\051) 126 523.23 T
( };) 126 508.23 T
(Keep \050main\051) 108 478.23 T
(/* main will be an external name; so will printf since it is not de\336ned */) 198 478.23 T
FMENDPAGE
%%EndPage: "18" 21
%%Page: "19" 21
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 19) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.2) 72 750.56 T
(Example with structur) 108 750.56 T
(es) 243 750.56 T
2 10 Q
(Struct C \050re:Double, im:Double\051;) 108 719.22 T
(/* de\336ne T) 162 704.22 T
(OKENs : C as a SHAPE for complex, with \336eld of) 207.38 704.22 T
(fsets .re and .im) 424.38 704.22 T
(and selectors re and im */) 198 689.22 T
(Iddec printf:proc;) 108 659.22 T
(Proc addC = C \050lv:C, rv:C\051) 108 629.22 T
(/* add two complex numbers */) 270 629.22 T
(Let l = * lv) 126 614.22 T
(Let r = * rv) 126 599.22 T
({ return\050 Cons[shape_of) 126 584.22 T
(fset\050C\051] \050 .re: re[l] F+ re[r], .im: im[l] F+ im[r]\051 \051 } ;) 231.37 584.22 T
(String s1 = \322Ans = \050%g, %g\051\134n\323;) 108 554.22 T
(Proc main = top\050\051) 108 524.22 T
(Let x = Cons[shape_of) 126 509.22 T
(fset\050C\051] \050.re: 1.0\050Double\051, .im:2.0\050Double\051\051) 226.1 509.22 T
(Let y = Cons[shape_of) 126 494.22 T
(fset\050C\051] \050.re: 3.0\050Double\051, .im:4.0\050Double\051\051) 226.1 494.22 T
(Let z = addC[C]\050x,y\051) 126 479.22 T
({) 126 464.22 T
(printf[top]\050s1, re[z], im[z]\051;) 162 464.22 T
(/* prints out \322Ans = \0504, 6\051\323 */) 198 449.22 T
(return\050make_top\051) 162 434.22 T
(};) 126 419.22 T
(Keep\050main\051) 108 389.22 T
FMENDPAGE
%%EndPage: "19" 22
%%Page: "20" 22
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 20) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.3) 72 750.56 T
(T) 108 750.56 T
(est for case) 116.05 750.56 T
2 10 Q
(Iddec printf:proc;) 108 719.22 T
(String s1 = \322%d is not in [%d,%d]\134n\323;) 108 689.22 T
(String s2 = \322%d OK\134n\323;) 108 674.22 T
(Proc test = top\050i:Int, l:Int, u:Int\051) 108 644.22 T
(/* report whether l<=i<=u */) 270 644.22 T
(?{) 126 629.22 T
(?\050* i >= * l\051; ?\050* i <= * u\051;) 162 629.22 T
(printf[top]\050s2, * i\051;) 162 614.22 T
(return\050make_top\051) 162 599.22 T
(|) 126 584.22 T
(printf[top]\050s1, * i, * l, * u\051;) 162 584.22 T
(return\050make_top\051) 162 569.22 T
(};) 126 554.22 T
(String s3 = \322ERROR with %d\134n\323;) 108 524.22 T
(Proc main = top\050\051) 108 494.22 T
(/* check to see that case is working */) 234 494.22 T
(V) 108 479.22 T
(ar i:Int = 0\050Int\051) 113.93 479.22 T
( Rep {) 126 464.22 T
(Labelled {) 162 449.22 T
(Case * i \0500 -> l0, 1 -> l1, 2:3 -> l2, 4:10000 -> l3\051) 198 434.22 T
(| :l0: test[top]\050* i, 0\050Int\051, 0\050Int\051\051) 198 419.22 T
(| :l1: test[top]\050* i, 1\050Int\051, 1\050Int\051\051) 198 404.22 T
(| :l2: test[top]\050* i, 2\050Int\051, 3\050Int\051\051) 198 389.22 T
(| :l3: printf[top]\050s3, * i\051) 198 374.22 T
(};) 162 359.22 T
( i = \050* i + 1\050Int\051\051;) 126 344.22 T
(?\050* i > 3\050Int\051\051;) 126 329.22 T
(return\050make_top\051) 126 314.22 T
( };) 108 299.22 T
(Keep \050main, test\051) 108 269.22 T
FMENDPAGE
%%EndPage: "20" 23
%%Page: "21" 23
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 21) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.4) 72 750.56 T
(Example of use of high-order T) 108 750.56 T
(OKENs) 294.7 750.56 T
2 10 Q
(T) 108 719.22 T
(okdef IF = [ boolexp:T) 113 719.22 T
(OKEN[LABEL]EXP) 209.76 719.22 T
(, thenpt:EXP) 293.47 719.22 T
(, elsept:EXP] EXP) 348.3 719.22 T
(?{ boolexp[lab]; thenpt | :lab: elsept };) 198 704.22 T
(/* IF is a T) 162 689.22 T
(OKEN which can be used to mirror a standard if ... then ... else) 207.37 689.22 T
( construction; the boolexp is a formal T) 198 674.22 T
(OKEN with a LABEL parameter) 369.47 674.22 T
( which is jumped to if the boolean is false */) 198 659.22 T
(Iddec printf: proc;) 108 629.22 T
(String cs = \322Correct\134n\323;) 108 599.22 T
(String ws = \322W) 108 584.22 T
(rong\134n\323;) 173.07 584.22 T
(Proc main = top\050\051) 108 554.22 T
(V) 126 539.22 T
(ar i:Int = 0\050Int\051) 131.93 539.22 T
({) 126 524.22 T
(IF[ Use [l:LABEL]EXP ?\050* i == 0\050Int\051 | l\051, printf[top]\050cs\051, printf[top]\050ws\051 ];) 162 509.22 T
(/* in other words if \050i==0\051 printf\050\322Correct\323\051 else printf\050\322W) 198 494.22 T
(rong\323\051 */) 439.96 494.22 T
(IF[ Use [l:LABEL]EXP ?\050* i != 0\050Int\051 | l\051, printf[top]\050ws\051, printf[top]\050cs\051 ];) 162 479.22 T
(i = IF[ Use [l:LABEL]EXP ?\050* i != 0\050Int\051 | l\051, 2\050Int\051, 3\050Int\051];) 162 464.22 T
(IF[ Use [l:LABEL]EXP ?\050* i == 3\050Int\051 | l\051, printf[top]\050cs\051, printf[top]\050ws\051 ];) 162 449.22 T
(return\050make_top\051) 162 434.22 T
( };) 126 419.22 T
(Keep \050main\051) 108 389.22 T
FMENDPAGE
%%EndPage: "21" 24
%%Page: "22" 24
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 22) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 759.89 523.3 769.9 C
72 759.89 523.3 769.9 R
7 X
0 K
V
72 768.89 541.01 768.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 735.88 523.3 745.89 C
72 735.88 523.3 745.89 R
7 X
0 K
V
72 744.88 541.01 744.88 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
0 14 Q
0 X
0 K
(4.5) 72 750.56 T
(A test for long jumps) 108 750.56 T
2 10 Q
(Iddec printf:proc;) 108 719.22 T
(Proc f = bottom\050env:pointer\050frame_alignment\051, lab:pointer\050code_alignment\051 \051) 108 689.22 T
({) 108 674.22 T
(long_jump\050* env) 126 659.22 T
(, * lab\051) 197.47 659.22 T
(};) 108 644.22 T
(String s1 = \322Should not reach here\134n\323;) 108 614.22 T
(String s2 = \322long-jump OK\134n\323;) 108 599.22 T
(Proc main = top\050\051) 108 569.22 T
(Labelled{) 108 554.22 T
(f[bottom]\050current_env) 162 539.22 T
(, make_local_lv\050l\051\051;) 256.25 539.22 T
(printf[top]\050s1\051;) 162 524.22 T
(/* should never reach here */) 270 524.22 T
(return\050make_top\051) 162 509.22 T
(| :l:) 145.45 494.22 T
(printf[top]\050s2\051;) 162 479.22 T
(return\050make_top\051) 162 464.22 T
(};) 142.67 449.22 T
(Keep \050main\051) 108 419.22 T
FMENDPAGE
%%EndPage: "22" 25
%%Page: "23" 25
595.3 841.9 0 FMBEGINPAGE
72 795.9 523.3 805.9 R
7 X
0 K
V
72 785.89 523.3 795.9 C
72 785.89 523.3 795.9 R
7 X
0 K
V
72 794.89 541.01 794.89 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
72 32.67 523.3 42.67 R
7 X
0 K
V
72 22.66 523.3 32.67 C
72 22.66 523.3 32.67 R
7 X
0 K
V
72 31.66 541.01 31.66 2 L
V
1 H
2 Z
0 X
N
0 0 595.3 841.9 C
1 10 Q
0 X
0 K
( 23) 491.51 36 T
72 72 523.3 769.9 R
7 X
V
72 757.88 523.3 769.9 C
72 757.88 523.3 769.9 R
7 X
0 K
V
72 768.89 540 768.89 2 L
V
1 H
2 Z
0 X
N
72 765.87 540 765.87 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
72 721.85 523.3 733.88 C
72 721.85 523.3 733.88 R
7 X
0 K
V
72 732.87 540 732.87 2 L
V
1 H
2 Z
0 X
N
72 729.84 540 729.84 2 L
7 X
V
0 X
N
0 0 595.3 841.9 C
0 24 Q
0 X
0 K
(5) 72 741.88 T
(Use of the PL_TDF compiler) 99 741.88 T
1 10 Q
-0.08 (Conventionally) 72 665.19 P
-0.08 (, PL_TDF programs are held in normal text \336les with suf) 132.99 665.19 P
-0.08 (\336x .pl. The PL_TDF compiler is invoked) 359.95 665.19 P
(by:) 72 653.19 T
2 F
(pl [-v] [-Iinclude_path ...] [-g] in\336le.pl out\336le.j) 108 631.19 T
1 F
(This compiles in\336le.pl to TDF in out\336le.j. This \336le can be linked and loaded just as any other .j \336le using tcc.) 72 616.19 T
0.79 (The -v option will produce a cut-down pretty print of the TDF for the de\336nitions and declarations of the tags,) 72 594.19 P
(tokens and al_tags of the program on the standard output.) 72 582.19 T
(The -I options will de\336nes the paths for any #include pre-processing directives in the text.) 72 560.19 T
(The -g option will put line number information into the TDF) 72 538.19 T
(.) 313.29 538.19 T
-0.22 (Compile-time error reporting is rather rudimentary and error recovery non-existent. Only the \336rst error found will) 72 516.19 P
0.53 (be reported on the standard error channel. This will give some indication of the type of error) 72 504.19 P
0.53 (, together with the) 448.98 504.19 P
(text line number and a print-out of the line, marking the place within the line where the error was detected.) 72 492.19 T
-0.01 (Errors which can only be detected at translate-time are much more dif) 72 470.19 P
-0.01 (\336cult to correct. These are usually shape or) 351.25 470.19 P
0.18 (alignment errors, particularly in the construction of of) 72 458.19 P
0.18 (fsets. T) 288.51 458.19 P
0.18 (ry compiling and translating with the -g option. On) 317.77 458.19 P
1.1 (the error) 72 446.19 P
1.1 (, the translator will output the source \336lename and an approximate line-number corresponding to the) 106.83 446.19 P
(position of the error in the PL_TDF) 72 434.19 T
(.) 213.89 434.19 T
0.96 (T) 72 412.19 P
0.96 (ranslating with the -g option may sometimes give warning messages from the system assembler being used;) 77.76 412.19 P
0.04 (some assemblers object to being given line number information in anything else but the .text segment of the pro-) 72 400.19 P
0.46 (gram. The main intention of the -g option is to detect and correct errors errors thrown up by the translators and) 72 388.19 P
(not for run-time de-bugging, so do not regard a warning like this as a bug in the system.) 72 376.19 T
FMENDPAGE
%%EndPage: "23" 26
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%Pages: 25 1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Helvetica
