%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 9 FMDOCUMENT
0 0 /Times-BoldItalic FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
90 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
495 45 540 63 R
7 X
V
90 747 540 747 2 L
V
3 H
0 Z
0 X
N
90 45 450 63 R
7 X
V
90 90 540 675 R
V
0 18 Q
0 X
-0.9 (Porting Oracle with the ANDF Compiler T) 140.51 663 S
-0.9 (echnology) 421.63 663 S
( \321 A Progress Report) 233.54 637 T
1 14 Q
(Thomas J. W) 257.92 579.67 T
(att Jr) 336.84 579.67 T
(.) 368.58 579.67 T
2 12 Q
(March 1993) 285.86 551 T
2 14 Q
(Open Software Foundation) 243 512.67 T
(Research Institute) 270 496.67 T
(1 Cambridge Center) 261 480.67 T
(Cambridge, MA 02142) 252 464.67 T
1 10 Q
(Abstract) 296.4 432.33 T
2 12 Q
(W) 90 401 T
(e have received the Oracle Porting Kit, Release 6.0.36 including library support for two) 100.36 401 T
(platforms.  The platforms are an Ultrix 4.2 PMAX \050MIPS\051 and a SCO SYSV 3.2 \050iX86\051.) 90 387 T
(T) 90 361 T
(wo major and three minor functional parts of Oracle have been successfully ported with the) 96.49 361 T
(ANDF compiler technology in a native mode.  All components of these parts have been) 90 347 T
(compiled, loaded and locally tested within the components directory structure.  The latest) 90 333 T
(code drop from DRA has been used in this ef) 90 319 T
(fort.) 306.62 319 T
(W) 90 293 T
(e are currently engaged in analyzing the Oracle header \336les to discover an extended) 100.36 293 T
(common API which will successfully abstract the shape of the source code beyond the) 90 279 T
(purview of the XPG3 ANDF header \336le set in a machine and platform independent way) 90 265 T
(.) 510.91 265 T
(Initially) 90 251 T
(, this extended API should be suf) 127.2 251 T
(\336cient to use the ANDF compiler to distribute) 285.89 251 T
(intermediate ANDF \050.j\051 \336les which install and properly execute these parts of Oracle) 90 237 T
(between the above two platforms.  Futher investigation is planned to extend the API across a) 90 223 T
(wider set of platforms once the initial goal is achieved.) 90 209 T
(This work was sponsored by a cooperative research agreement between the Open Software) 90 183 T
(Foundation \050OSF\051 and Unix System Laboratories \050USL\051.) 90 169 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
90 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
90 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
90 46.88 540 63 R
7 X
V
2 10 Q
0 X
(page) 473.82 56.33 T
1 12 Q
3.6 ( 2) 492.69 56.33 S
2 10 Q
(of) 515.48 56.33 T
1 12 Q
3.6 ( 5) 523.8 56.33 S
90 726.98 540 742.18 R
7 X
V
1 8 Q
0 X
(Intr) 90 736.84 T
(oduction) 103.62 736.84 T
90 87.98 540 689.98 R
7 X
V
90 670.95 540 673.98 C
72 672.46 540 672.46 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 16 Q
0 X
0 K
( 1. Introduction) 90 679.31 T
2 14 Q
(This paper reports on our experience in the OSF Research Institute with using) 90 651.62 T
(the ANDF compiler technology to build and execute several parts of Oracle.) 90 635.62 T
(W) 90 607.62 T
(e assume that the reader is somewhat familiar with Oracle, and so give only) 102.09 607.62 T
(cursory information about it in the following section.) 90 591.62 T
(Essentially) 90 563.62 T
(, we are pursing the goal of increasing the robustness of the ANDF) 150.5 563.62 T
(compiler technology toward an industrial strength level of quality such that it) 90 547.62 T
(delivers product quality for applications across a wide variety of heterogeneous) 90 531.62 T
(platforms. T) 90 515.62 T
(oward that end, we have, to date, successfully ported two major) 158.2 515.62 T
(and three minor functional parts of Oracle using the ANDF compiler in a) 90 499.62 T
(native mode.  All components of these parts have been compiled, loaded and) 90 483.62 T
(locally tested within the components directory structure.  The latest code drop) 90 467.62 T
(from DRA has been used in this ef) 90 451.62 T
(fort.  Oracle is but one of a number of) 283.67 451.62 T
(industrial strength applications in our robustness project plan.) 90 435.62 T
(W) 90 407.62 T
(e are currently engaged in analyzing the Oracle header \336les to discover an) 102.09 407.62 T
(extended common API which will successfully abstract the shape of the source) 90 391.62 T
(code beyond the purview of the XPG3 ANDF header \336le set in a machine and) 90 375.62 T
(platform independent way) 90 359.62 T
(.  Initially) 235.98 359.62 T
(, this extended API should be suf) 289.88 359.62 T
(\336cient to) 475.01 359.62 T
(use the ANDF compiler to distribute intermediate ANDF \050.j\051 \336les which install) 90 343.62 T
(and properly execute these parts of Oracle between the above two platforms.) 90 327.62 T
(Futher investigation is planned to extend the API across a wider set of) 90 311.62 T
(platforms once the initial goal is achieved.) 90 295.62 T
(In subsequent sections we indicate brie\337y the current status of our porting) 90 267.62 T
(investigation, and render preliminary conclusions.) 90 251.62 T
90 191.93 540 194.95 C
72 193.44 540 193.44 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 16 Q
0 X
0 K
( 2. Software Information) 90 200.29 T
1 10 Q
(Softwar) 459.97 147.26 T
(e Category) 493.65 147.26 T
2 14 Q
(Oracle is the well known RDBMS product.) 90 119.59 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
90 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
90 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
90 46.88 540 63 R
7 X
V
2 10 Q
0 X
(page) 473.82 56.33 T
1 12 Q
3.6 ( 3) 492.69 56.33 S
2 10 Q
(of) 515.48 56.33 T
1 12 Q
3.6 ( 5) 523.8 56.33 S
90 726.98 540 742.18 R
7 X
V
1 8 Q
0 X
(Curr) 90 736.84 T
(ent Status of the Oracle Porting Investigation.) 107.18 736.84 T
90 87.98 540 689.98 R
7 X
V
1 10 Q
0 X
(Oracle V) 397.13 683.31 T
(ersion and Release Level) 434.79 683.31 T
2 14 Q
(Oracle version 6.0.36 source code was used.) 90 655.64 T
1 10 Q
(Authors and sour) 456.34 606.31 T
(ce) 531.12 606.31 T
2 14 Q
(The authors of the Oracle RDBMS product are the Oracle Corporation.) 90 572.64 T
(Oracle RDBMS represents just under 1.9 million lines of C source code.) 90 544.64 T
1 10 Q
(ANDF T) 391.66 495.31 T
(echnology V) 427.66 495.31 T
(ersion Release) 479.21 495.31 T
2 14 Q
(Release TDF-930127 of the ANDF T) 90 461.64 T
(echnology was used which is based on the) 298.48 461.64 T
(TDF Speci\336cation Issue 2.0 Revision 1 dated December 1992.) 90 445.64 T
1 10 Q
(OS Platform Envir) 423.02 396.31 T
(onments) 503.91 396.31 T
2 14 Q
(Ultrix 4.2 DECstation 3100 \050MIPS\051 and SCO SYSV 3.2.1 \050i486\051 with ODT 1.0.) 90 362.64 T
90 302.95 540 305.98 C
72 304.46 540 304.46 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 16 Q
0 X
0 K
( 3. Current Status of the Oracle Porting Investigation.) 90 311.31 T
2 14 Q
(The two major functional parts of Oracle which have been ported with the) 90 283.62 T
(ANDF compiler technology in a native mode are the) 90 267.62 T
1 F
(Rdbms) 388.06 267.62 T
2 F
( and) 430.83 267.62 T
1 F
(Forms30.) 458.03 267.62 T
2 F
(The three minor functional parts of Oracle were) 90 239.62 T
1 F
(Sqlcalc, Sqlplus) 361.21 239.62 T
2 F
( and) 455.31 239.62 T
1 F
(Report) 482.51 239.62 T
2 F
(.) 524.47 239.62 T
(Initially) 90 211.62 T
(, we attempted to compile using the native compilers on both platforms) 133.4 211.62 T
(and were not always successful.  On the Ultrix platform we assume this was) 90 195.62 T
(because we were not attempting a full-blown build of Oracle from scratch and) 90 179.62 T
(not all parts of Oracle were being built in the usual order including some pieces) 90 163.62 T
(which are dynamically generated on the \337y by various oracle preprocessors.) 90 147.62 T
(On the SCO SYSV 3.2 platform, this was, however) 90 131.62 T
(, not the case.  Oracle) 377.43 131.62 T
(source code caused the native compiler \050rcc\051 to exceed \336xed table limits, and) 90 115.62 T
(the bundled cc compiler was not able to preprocess successfully) 90 99.62 T
(. It seems that) 446.99 99.62 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
90 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
90 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
90 46.88 540 63 R
7 X
V
2 10 Q
0 X
(page) 473.82 56.33 T
1 12 Q
3.6 ( 4) 492.69 56.33 S
2 10 Q
(of) 515.48 56.33 T
1 12 Q
3.6 ( 5) 523.8 56.33 S
90 726.98 540 742.18 R
7 X
V
1 8 Q
0 X
(Curr) 90 736.84 T
(ent Status of the Oracle Porting Investigation.) 107.18 736.84 T
90 87.98 540 689.98 R
7 X
V
2 14 Q
0 X
(our release level of the system 3.2.1 and ODT level 1.0 are not the latest) 90 680.64 T
(releases of iX86 platforms in use by Oracle for porting.  Upgrades to release) 90 664.64 T
(level 3.2.4 andf ODT 2.0 were recommended by Oracle and presumably cure) 90 648.64 T
(the native compiler \050rcc\051 problems.) 90 632.64 T
(Once the method for generating Make\336les was suitably modi\336ed to use the) 90 604.64 T
(ANDF compiler and the de\336ne \337ags were consistent with navigating through) 90 588.64 T
(the native platform header \336les on the above platforms, the ANDF compiler) 90 572.64 T
(sailed through builds of all of the above components.  All of the minor) 90 556.64 T
(components have been successfully tested in the same manner used by Oracle) 90 540.64 T
(Corp.) 90 524.64 T
(T) 90 496.64 T
(o date, we have not received a test suite used by Oracle internally for product) 97.57 496.64 T
(veri\336cation of the two major components.  W) 90 480.64 T
(e plan to use this test suite to) 343.82 480.64 T
(subject the ANDF built components to the same rigorous testing as if it were an) 90 464.64 T
(Oracle product.) 90 448.64 T
(The next phase of our plan calls for using the ANDF compiler technology in a) 90 420.64 T
(strict ANDF header \336le mode, i.e. no native header \336les are used.  Native) 90 404.64 T
(headers which contain tar) 90 388.64 T
(get dependent de\336nitions of C constructs used in) 233.13 388.64 T
(compiling Oracle are disallowed. [see \322Porting to ANDF\323 by S. Macrakis, in) 90 372.64 T
(ANDF T) 90 356.64 T
(echnology:  Collected Papers, V) 139.15 356.64 T
(olume 1, January 1993]) 318.06 356.64 T
(W) 90 328.64 T
(e are currently analyzing the Oracle header \336les to discern those constructs) 102.09 328.64 T
(which are natively de\336ned.  For these constructs, we are planning to describe) 90 312.64 T
(extensions to the ANDF header \336le set, XPG3, such that tokens by the same) 90 296.64 T
(name of the construct can be used during the ANDF compilation process.  For) 90 280.64 T
(each install site, it is then necessary to build an extended API token de\336nition) 90 264.64 T
(library which maps into the native platform.) 90 248.64 T
(W) 90 220.64 T
(e have only just begun this phase of the ef) 102.09 220.64 T
(fort, as so do not have any status to) 336.95 220.64 T
(report other than the second phase of the ef) 90 204.64 T
(fort has started.) 331.44 204.64 T
(What we are seeing are application dependent header \336les which hard code) 90 176.64 T
(absolute path names of system header \336les.  There are also application) 90 160.64 T
(dependent versions of these hard coded header \336les in the directories which are) 90 144.64 T
(searched prior to the ANDF header \336le set.) 90 128.64 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
90 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
90 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
90 46.88 540 63 R
7 X
V
2 10 Q
0 X
(page) 473.82 56.33 T
1 12 Q
3.6 ( 5) 492.69 56.33 S
2 10 Q
(of) 515.48 56.33 T
1 12 Q
3.6 ( 5) 523.8 56.33 S
90 726.98 540 742.18 R
7 X
V
1 8 Q
0 X
(Pr) 90 736.84 T
(eliminary Conclusions.) 98.29 736.84 T
90 87.98 540 689.98 R
7 X
V
90 670.95 540 673.98 C
72 672.46 540 672.46 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
0 16 Q
0 X
0 K
( 4. Preliminary Conclusions.) 90 679.31 T
2 14 Q
(It is clear that the coding and porting practice of Oracle Corporation is very) 90 651.62 T
(platform tar) 90 635.62 T
(get dependent.  W) 156.2 635.62 T
(e are optimistic that we can suggest ways to) 256.89 635.62 T
(improve the Oracle source code to accomodate a higher degree of portability) 90 619.62 T
(between a wider set of platforms and architectures via use of the ANDF) 90 603.62 T
(technology) 90 587.62 T
(.) 151.27 587.62 T
90 87.98 540 689.98 C
90 87.98 522 213.98 C
90 87.98 522 204.98 R
7 X
0 K
V
2 10 Q
0 X
(Copyright 1993 by Open Software Foundation, Inc.) 90 198.32 T
(All Rights Reserved) 90 176.32 T
-0.19 (Permission to reproduce this document without fee is hereby granted, provided that the copyright notice and) 90 152.32 P
-0.08 (this permission notice appear in all copies or derivative works. OSF MAKES NO W) 90 140.32 P
-0.08 (ARRRANTY OF ANY) 425.36 140.32 P
(KIND WITH REGARD T) 90 128.32 T
(O THIS MA) 195.57 128.32 T
(TERIAL, INCLUDING, BUT NOT LIMITED T) 244.99 128.32 T
(O, THE IMPLIED) 441.05 128.32 T
-0.04 (W) 90 116.32 P
-0.04 (ARRANTIES OF MERCHANT) 98.32 116.32 P
-0.04 (ABILITY AND FITNESS FOR A P) 227.37 116.32 P
-0.04 (AR) 372 116.32 P
-0.04 (TICULAR PURPOSE. OSF shall) 385.28 116.32 P
(not be liable for errors contained herein or for any direct or indirect, incidental, special or consequential) 90 104.32 T
(damages in connection with the furnishing, performance, or use of this material.) 90 92.32 T
90 87.98 540 689.98 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "5" 6
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 5 1
%%DocumentFonts: Times-BoldItalic
%%+ Times-Bold
%%+ Times-Roman
