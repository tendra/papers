%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 18 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 0 /Times-BoldItalic FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Helvetica-Narrow FMFONTDEFINE
6 1 /Symbol FMFONTDEFINE
7 0 /Helvetica-Narrow-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
108 81 540 81 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 747 2 L
7 X
V
3 H
0 Z
0 X
N
108 46.88 342 63 R
7 X
V
0 10 Q
0 X
(6/29/93 05:02 pm macrakis@osf.org) 108 56.33 T
360 46.88 540 63 R
7 X
V
0 X
(1 of 15) 511.69 56.33 T
108 90 540 711 R
7 X
V
1 24 Q
0 X
-1.2 (The Structur) 221.38 695 S
-1.2 (e of ANDF:) 326.7 695 S
-1.2 (Principles and Examples) 217.88 665 S
0 12 Q
(Stavr) 278.97 571 T
(os Macrakis) 306.73 571 T
(Open Softwar) 254.47 555 T
(e Foundation) 325.88 555 T
0 14 Q
(ANDF is a language-independent and machine-) 180 465.67 T
(independent intermediate language. It is) 180 449.67 T
(organized by some fundamental principles,) 180 433.67 T
(which we explain and illustrate.) 180 417.67 T
108 357.98 540 361 C
90 359.49 558 359.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(1. Introduction) 108 366.33 T
3 14 Q
(ANDF \050the Architecture-Neutral Distribution Format\051 de\336nes the data) 108 334.64 T
(passed from an ANDF producer \050which is language-dependent and machine-) 108 318.64 T
(independent\051 to an ANDF installer \050which is language-independent and) 108 302.64 T
(machine-dependent\051. ANDF is both language-independent and machine-) 108 286.64 T
(independent. An ANDF producer is like a compiler front end \050syntax and) 108 270.64 T
(semantics analyzer\051, and an installer is like a compiler back end \050code) 108 254.64 T
(generator and optimizer\051. ANDF itself is thus a sort of compiler) 108 238.64 T
(intermediate language. This paper presupposes an understanding of) 108 222.64 T
(compiler intermediate languages in general, and should be useful to) 108 206.64 T
(compiler writers and language designers.) 108 190.64 T
(ANDF is or) 108 162.64 T
(ganized by a few fundamental principles which give it) 173.82 162.64 T
(coherence and universality) 108 146.64 T
(. This paper introduces them one by one, with) 257.07 146.64 T
(examples from a C or other language source and an example ANDF) 108 130.64 T
(equivalent \050other translations may also be valid\051.) 108 114.64 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Requir) 108 736.84 T
(ements) 131.84 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(2 of 15) 511.69 54.45 T
108 90 540 720 R
7 X
V
3 14 Q
0 X
(The ANDF in this document is formatted for easy reading. Much of it is) 108 710.67 T
(syntactic sugar) 108 694.67 T
(, notably the keywords identifying \336elds. The discussion of) 190.99 694.67 T
(its linear) 108 678.67 T
(, binary form near the end explains how it is ef) 156.02 678.67 T
(\336ciently encoded) 417.3 678.67 T
(into roughly the same space as object code.) 108 662.67 T
(There are several layers to the explanation. An example follows each one.) 108 634.67 T
(In the examples, \324) 108 618.67 T
4 F
-0.7 (...) 208.26 618.67 S
3 F
(\325 represents parts that aren\325) 231.34 618.67 T
(t relevant to the particular) 383.4 618.67 T
(point being made. \324) 108 602.67 T
4 F
-0.7 (<<...>>) 216.82 602.67 S
3 F
(\325 means \324the ANDF for that C construct\325. This) 270.69 602.67 T
(document is based on a pre-release version of ANDF) 108 586.67 T
(, so details may) 403.76 586.67 T
(change; however) 108 570.67 T
(, the general principles remain valid.) 202.63 570.67 T
108 510.98 540 514 C
90 512.49 558 512.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(2. Requirements) 108 519.33 T
0 14 Q
(Neutrality) 108 469.64 T
3 F
(ANDF makes no commitment to a particular source language or tar) 108 440.64 T
(get) 485.47 440.64 T
(machine. When dif) 108 424.64 T
(ferent languages or machines have dif) 214.61 424.64 T
(ferent) 426.9 424.64 T
(requirements, the dif) 108 408.64 T
(ferences are usually covered by parameterization of) 223.94 408.64 T
(ANDF constructs, not by special-purpose code.) 108 392.64 T
0 F
(Complete information) 108 346.64 T
3 F
(ANDF preserves the information in the source program that could be useful) 108 317.64 T
(to the code generator) 108 301.64 T
(. Thus the installed code can be as ef) 224.96 301.64 T
(\336cient as normally) 430.27 301.64 T
(compiled code.) 108 285.64 T
(For instance, if an array index is of a type which makes it impossible for) 108 257.64 T
(indexing to fail, this fact will be preserved in the ANDF) 108 241.64 T
(, and the) 420.5 241.64 T
(unnecessary range check eliminated.) 108 225.64 T
0 F
(W) 108 179.64 T
(ide spectrum for transformation) 121.74 179.64 T
3 F
(ANDF can be used as a high-level or low-level intermediate language. Thus) 108 150.64 T
(most optimizations \050whether machine-speci\336c or not\051 can be expressed as) 108 134.64 T
(ANDF-to-ANDF transformations. The optimization engine can remain) 108 118.64 T
(constant across implementations, even if the particular optimizations are) 108 102.64 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(General Structur) 108 736.84 T
(e) 166.7 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(3 of 15) 511.69 54.45 T
108 90 540 720 R
7 X
V
3 14 Q
0 X
(dif) 108 710.67 T
(ferent. In particular) 123.29 710.67 T
(, ANDF can represent both machine-independent data) 231.13 710.67 T
(types speci\336ed semantically and machine-dependent data types speci\336ed) 108 694.67 T
(operationally \050number of bits\051.) 108 678.67 T
108 618.98 540 622 C
90 620.49 558 620.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(3. General Structure) 108 627.33 T
0 14 Q
(ANDF is tr) 108 577.64 T
(ee-structur) 173.81 577.64 T
(ed) 239.6 577.64 T
3 F
(ANDF is a tree built out of constructors like) 108 548.64 T
4 F
-0.7 (plus) 358.67 548.64 S
3 F
( \050integer addition\051 and) 389.45 548.64 T
4 F
-0.7 (integer) 108 532.64 S
3 F
( \050speci\336es integer types\051. Every constructor belongs to a category) 161.87 532.64 T
(,) 527.01 532.64 T
(or \322sort\323, and speci\336es the sorts of its constituents. Constructs are nested) 108 516.64 T
(within one another) 108 500.64 T
(, so the full de\336nition of a top-level object \050) 212.37 500.64 T
1 F
(e.g.) 456.44 500.64 T
3 F
( a) 476.64 500.64 T
(procedure\051 is a single tree.) 108 484.64 T
0 F
(Constructs have values) 108 438.64 T
3 F
(Executable code is represented by constructors of sort EXP) 108 409.64 T
(. Each such) 438.3 409.64 T
(constructor speci\336es the concrete type, or \322shape\323, of its value and its EXP) 108 393.64 T
(ar) 108 377.64 T
(guments. A void value is of shape T) 118.62 377.64 T
(op. Constructs which do not return) 319.73 377.64 T
(\050such as goto\325) 108 361.64 T
(s\051 have a notional return value of shape Bottom.) 185.73 361.64 T
0 F
(ANDF constructs ar) 108 315.64 T
(e orthogonal) 228.21 315.64 T
3 F
(ANDF constructs mean the same thing no matter where they are used. Any) 108 286.64 T
(entity \050) 108 270.64 T
1 F
(e.g.) 148.03 270.64 T
3 F
( a local variable\051 a construct de\336nes is meaningful only within its) 168.24 270.64 T
(body) 108 254.64 T
(, and not outside of it. \050A special mechanism is used for global) 135.07 254.64 T
(de\336nitions.\051) 108 238.64 T
0 12 Q
(C version:) 108 215.98 T
4 14 Q
-0.7 ({) 144 188.64 S
-0.7 (int i;) 162 172.64 S
5 F
(\321 declaration looks just like) 306 172.64 T
4 F
-0.7 (i = 0;) 162 156.64 S
5 F
(\321 a sequential statement in C) 306 156.64 T
4 F
-0.7 (...) 162 140.64 S
-0.7 (}) 144 124.64 S
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(General Structur) 108 736.84 T
(e) 166.7 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(4 of 15) 511.69 54.45 T
108 90 540 720 R
7 X
V
0 12 Q
0 X
(ANDF version:) 108 712 T
4 14 Q
-0.7 (variable\050...) 144 684.67 S
-0.7 (tag) 198 668.67 S
-0.7 (2,) 239.01 668.67 S
5 F
(\321 variable \324name\325) 306 668.67 T
4 F
-0.7 (value) 198 652.67 S
-0.7 (make_value\050INTEGER,...\051,) 257.98 652.67 S
-0.7 (body) 198 636.67 S
5 F
(\321 body is nested in ANDF) 306 636.67 T
4 F
-0.7 (sequence\050<<i = 0>>,) 216 620.67 S
-0.7 (<<...>>\051) 285.26 604.67 S
-0.7 (   \051) 198 588.67 S
0 12 Q
(Rationale:) 108 566 T
3 14 Q
(Unambiguous. Simpli\336es high-level optimizations.) 108 538.67 T
0 F
(All attributes ar) 108 492.67 T
(e explicit) 204.13 492.67 T
3 F
(When a construct has options or attributes, they are all explicit. Most) 108 463.67 T
(constructs have a \336xed number of parameters \050\336xed arity\051, except for lists) 108 447.67 T
(of uniform meaning \050) 108 431.67 T
1 F
(e.g.) 228.08 431.67 T
3 F
( the statements of a block\051. There are no globally-) 248.29 431.67 T
(set defaults which modify ANDF semantics for various languages.) 108 415.67 T
0 12 Q
(C version:) 108 393 T
4 14 Q
-0.7 ( int i;) 144 365.67 S
0 12 Q
(ANDF version:) 108 343 T
4 14 Q
-0.7 (variable\050visible) 144 315.67 S
-0.7 (true,) 285.06 315.67 S
-0.7 (tag) 213.26 299.67 S
-0.7 (2,) 254.27 299.67 S
-0.7 (value) 213.26 283.67 S
-0.7 (make_value\050INTEGER,...\051,) 273.24 283.67 S
-0.7 (construct_in_scope) 213.26 267.67 S
-0.7 (...) 369.71 267.67 S
-0.7 (\051) 228.65 251.67 S
3 F
(Note that) 108 223.67 T
4 F
-0.7 (visible) 163.19 223.67 S
3 F
( controls the visibility of the variable after exceptions) 217.05 223.67 T
(and in \050) 108 207.67 T
1 F
(e.g.) 150.75 207.67 T
3 F
(\051 nested procedures, and is always true for C variables.) 170.95 207.67 T
0 12 Q
(Rationale:) 108 185 T
3 14 Q
(Unambiguous. Requires no reconstruction in the installer \050back end\051.) 108 157.67 T
(W) 108 129.67 T
(ide-spectrum and mixed-language programs may have dif) 120.65 129.67 T
(ferent values for) 443.7 129.67 T
(attributes within the same expression tree \050) 108 113.67 T
1 F
(e.g.) 348.16 113.67 T
3 F
( mixed-language inlining\051.) 368.37 113.67 T
221.09 665.67 239.02 676.98 C
221.09 665.67 239.02 676.98 R
7 X
0 K
V
223.67 664.94 236.54 677.31 R
V
6 14 Q
0 X
3.08 (\336) 223.67 667.98 S
0 0 612 792 C
236.48 649.67 257.98 660.98 C
236.48 649.67 257.98 660.98 R
7 X
0 K
V
239.06 648.94 251.93 661.31 R
V
6 14 Q
0 X
3.08 (\336) 239.06 651.98 S
0 0 612 792 C
228.78 633.67 246.71 644.98 C
228.78 633.67 246.71 644.98 R
7 X
0 K
V
231.36 632.94 244.24 645.31 R
V
6 14 Q
0 X
3.08 (\336) 231.36 635.98 S
0 0 612 792 C
267.13 314.29 285.06 322.25 C
267.13 314.29 285.06 322.25 R
7 X
0 K
V
269.71 311.96 283.4 324.34 R
V
6 14 Q
0 X
3.08 (\336) 269.71 315.01 S
0 0 612 792 C
236.35 298.29 254.27 306.25 C
236.35 298.29 254.27 306.25 R
7 X
0 K
V
238.93 295.96 252.61 308.34 R
V
6 14 Q
0 X
3.08 (\336) 238.93 299.01 S
0 0 612 792 C
251.74 280.67 273.24 291.98 C
251.74 280.67 273.24 291.98 R
7 X
0 K
V
254.32 279.94 267.19 292.31 R
V
6 14 Q
0 X
3.08 (\336) 254.32 282.98 S
0 0 612 792 C
351.78 266.29 369.71 274.25 C
351.78 266.29 369.71 274.25 R
7 X
0 K
V
354.36 263.96 368.05 276.34 R
V
6 14 Q
0 X
3.08 (\336) 354.36 267.01 S
0 0 612 792 C
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(General Structur) 108 736.84 T
(e) 166.7 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(5 of 15) 511.69 54.45 T
108 90 540 720 R
7 X
V
3 14 Q
0 X
(Dif) 108 710.67 T
(ferent languages may use dif) 126.4 710.67 T
(ferent values for attributes.) 287.02 710.67 T
(Potential size problem dealt with by clever binary format. \050) 108 682.67 T
1 F
(q.v) 439.1 682.67 T
(.) 454.77 682.67 T
3 F
(\051) 458.27 682.67 T
0 F
(Operations ar) 108 636.67 T
(e completely speci\336ed) 191.31 636.67 T
3 F
(All operations are completely speci\336ed for both normal and exceptional) 108 607.67 T
(cases independently of tar) 108 591.67 T
(get machine. Where the source language speci\336es) 253.46 591.67 T
(machine-dependent behavior) 108 575.67 T
(, this is stated explicitly in the ANDF code.) 269.47 575.67 T
(When producer analysis of the program determines that errors are) 108 559.67 T
(impossible, this information is passed along to avoid unnecessary error) 108 543.67 T
(checks.) 108 527.67 T
0 12 Q
(C version:) 108 505 T
4 14 Q
-0.7 ( i + 1) 144 477.67 S
0 12 Q
(ANDF version:) 108 455 T
4 14 Q
-0.7 (plus\050) 144 427.67 S
-0.7 (ov_error) 182.48 411.67 S
-0.7 (wrapped,) 261.97 411.67 S
-0.7 (contents\050) 182.48 395.67 S
-0.7 (INTEGER\050~signed_int\051,) 251.74 379.67 S
-0.7 (obtain_tag\0502\051) 251.74 363.67 S
-0.7 (\051,) 244.04 347.67 S
-0.7 (make_int\050~signed_int, 1\051) 182.48 331.67 S
-0.7 (\051) 174.78 315.67 S
3 F
(The behavior of) 108 287.67 T
4 F
-0.7 (plus) 200.87 287.67 S
3 F
( on over\337ow demonstrates the explicitness of) 231.65 287.67 T
(exceptional behavior) 108 271.67 T
(. C semantics specify that over\337ow should result in the) 224.19 271.67 T
(wrapped \050modular\051 result; other languages may raise an exception. Thus) 108 255.67 T
(ANDF must specify which behavior is required.) 108 239.67 T
0 12 Q
(Rationale:) 108 217 T
3 14 Q
(Program semantics can be uniform, despite tar) 108 189.67 T
(get machines\325 varying) 367.73 189.67 T
(behavior) 108 173.67 T
(, yet can take advantage of tar) 156.4 173.67 T
(get-speci\336c behavior when this is) 323.61 173.67 T
(acceptable.) 108 157.67 T
(Optimization bene\336ts from information on impossible cases.) 108 129.67 T
244.04 410.29 261.97 418.25 C
244.04 410.29 261.97 418.25 R
7 X
0 K
V
246.62 407.96 260.31 420.34 R
V
6 14 Q
0 X
3.08 (\336) 246.62 411.01 S
0 0 612 792 C
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Names and values) 108 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(6 of 15) 511.69 54.45 T
108 90 540 720 R
7 X
V
108 700.98 540 704 C
90 702.49 558 702.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(4. Names and values) 108 709.33 T
0 14 Q
(Identi\336ers ar) 108 659.64 T
(e r) 185.87 659.64 T
(eplaced with unique T) 201.54 659.64 T
(ags) 332.81 659.64 T
3 F
(Identi\336ers are replaced with unique \324tags\325. There are no scope rules for tags) 108 630.64 T
(\050or tokens\051 because they are guaranteed unique within an ANDF capsule) 108 614.64 T
(\050unit of distribution\051.) 108 598.64 T
0 12 Q
(C version:) 108 575.98 T
4 14 Q
-0.7 (int authorization_number;) 144 548.64 S
-0.7 (resolve_constraints\050...\051) 144 532.64 S
0 12 Q
(ANDF version:) 108 509.98 T
4 14 Q
-0.7 (variable\050...,) 144 482.64 S
-0.7 (tag) 251.74 482.64 S
-0.7 (2341,) 292.75 482.64 S
-0.7 (...\051) 338.93 482.64 S
-0.7 (make_proc\050...,) 144 466.64 S
-0.7 (tag) 259.43 466.64 S
-0.7 (3833,) 300.45 466.64 S
-0.7 (...\051) 346.62 466.64 S
0 12 Q
(Pascal version:) 108 415.98 T
4 14 Q
-0.7 (integer shadowed;) 144 388.64 S
-0.7 (begin) 144 372.64 S
-0.7 (integer shadowed;) 162 356.64 S
5 F
(\321 not the same variable) 324 356.64 T
4 F
-0.7 (...) 162 340.64 S
0 12 Q
(ANDF version:) 108 317.98 T
4 14 Q
-0.7 (variable\050..., tag) 144 290.64 S
-0.7 (501, ...\051) 292.75 290.64 S
-0.7 (variable\050..., tag) 144 274.64 S
-0.7 (299, ...\051) 292.75 274.64 S
0 12 Q
(Ada version:) 108 251.98 T
4 14 Q
-0.7 (function \322*\323 \050a,b: integer\051 return integer;) 144 224.64 S
5 F
(\321 Unusual function name) 306 208.64 T
4 F
-0.7 (function \322*\323 \050a,b: view_matrix\051) 144 192.64 S
-0.7 (return) 321 176.64 S
-0.7 (view_matrix;) 374.87 176.64 S
5 F
(\321 Overloading) 306 160.64 T
274.82 481.27 292.75 489.23 C
274.82 481.27 292.75 489.23 R
7 X
0 K
V
277.4 478.94 291.09 491.31 R
V
6 14 Q
0 X
3.08 (\336) 277.4 481.98 S
0 0 612 792 C
282.52 465.27 300.45 473.23 C
282.52 465.27 300.45 473.23 R
7 X
0 K
V
285.1 462.94 298.79 475.31 R
V
6 14 Q
0 X
3.08 (\336) 285.1 465.98 S
0 0 612 792 C
274.82 289.27 292.75 297.23 C
274.82 289.27 292.75 297.23 R
7 X
0 K
V
277.4 286.94 291.09 299.31 R
V
6 14 Q
0 X
3.08 (\336) 277.4 289.98 S
0 0 612 792 C
274.82 273.27 292.75 281.23 C
274.82 273.27 292.75 281.23 R
7 X
0 K
V
277.4 270.94 291.09 283.31 R
V
6 14 Q
0 X
3.08 (\336) 277.4 273.98 S
0 0 612 792 C
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Names and values) 108 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(7 of 15) 511.69 54.45 T
108 90 540 720 R
7 X
V
0 12 Q
0 X
(ANDF version:) 108 712 T
4 14 Q
-0.7 (make_proc\050..., tag) 144 684.67 S
-0.7 (7211, ...\051) 300.45 684.67 S
-0.7 (make_proc\050..., tag) 144 668.67 S
-0.7 (2007, ...\051) 300.45 668.67 S
0 12 Q
(Rationale:) 108 646 T
3 14 Q
(Syntax and semantics of tags are perfectly uniform. Lookup of tags is) 108 618.67 T
(ef) 108 602.67 T
(\336cient. Language-dependent rules of scope, overloading, and so on are all) 118.62 602.67 T
(treated by the producer) 108 586.67 T
(. T) 236.62 586.67 T
(ags are character) 251.18 586.67 T
(-set independent.) 344.9 586.67 T
(Installer doesn\325) 108 558.67 T
(t need any other information, and this representation is more) 194.4 558.67 T
(compact.) 108 542.67 T
(Inhibits reverse engineering.) 108 514.67 T
(Simpli\336es transformation.) 108 486.67 T
0 F
(Fetching of name\325) 108 440.67 T
(s content is always explicit) 215.52 440.67 T
3 F
(T) 108 411.67 T
(ags for variables always represent the name \050L-value\051 of the identi\336er) 115.57 411.67 T
(, and) 505.13 411.67 T
(must be explicitly dereferenced to get the value.) 108 395.67 T
0 12 Q
(C version:) 108 373 T
4 14 Q
-0.7 ( i = j) 144 345.67 S
0 12 Q
(ANDF version:) 108 323 T
4 14 Q
-0.7 (assign\050...) 144 295.67 S
-0.7 (ptr) 162 279.67 S
-0.7 (obtain_tag\0502\051,) 203.01 279.67 S
-0.7 (val) 162 263.67 S
-0.7 (contents\050..., obtain_tag\0503\051\051) 203.01 263.67 S
-0.7 (\051) 162 247.67 S
0 12 Q
(Rationale:) 108 225 T
3 14 Q
(Preserves orthogonality of language. Also recognizes dif) 108 197.67 T
(ferent kinds of) 425.23 197.67 T
(value fetching \050) 108 181.67 T
1 F
(cf.) 195.82 181.67 T
3 F
( contents_of_volatile\051.) 209.42 181.67 T
0 F
(T) 108 135.67 T
(ypes always explicit) 116.3 135.67 T
3 F
(T) 108 106.67 T
(ypes of all objects, intermediate expressions, and constants are explicit.) 115.57 106.67 T
282.52 683.29 300.45 691.25 C
282.52 683.29 300.45 691.25 R
7 X
0 K
V
285.1 680.96 298.79 693.34 R
V
6 14 Q
0 X
3.08 (\336) 285.1 684 S
0 0 612 792 C
282.52 667.29 300.45 675.25 C
282.52 667.29 300.45 675.25 R
7 X
0 K
V
285.1 664.96 298.79 677.34 R
V
6 14 Q
0 X
3.08 (\336) 285.1 668 S
0 0 612 792 C
185.09 278.29 203.02 286.25 C
185.09 278.29 203.02 286.25 R
7 X
0 K
V
187.67 275.96 201.35 288.34 R
V
6 14 Q
0 X
3.08 (\336) 187.67 279.01 S
0 0 612 792 C
185.09 262.29 203.02 270.25 C
185.09 262.29 203.02 270.25 R
7 X
0 K
V
187.67 259.96 201.35 272.34 R
V
6 14 Q
0 X
3.08 (\336) 187.67 263.01 S
0 0 612 792 C
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(T) 108 736.84 T
(ypes and storage) 112.74 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(8 of 15) 511.69 54.45 T
108 90 540 720 R
7 X
V
0 12 Q
0 X
(C version:) 108 712 T
4 14 Q
-0.7 (100) 144 684.67 S
0 12 Q
(ANDF version:) 108 662 T
4 14 Q
-0.7 ( make_int\050~signed_int,100\051) 144 634.67 S
0 12 Q
(C version:) 108 612 T
4 14 Q
-0.7 ( i) 144 584.67 S
0 12 Q
(ANDF version:) 108 562 T
4 14 Q
-0.7 (contents\050..., INTEGER\050~signed_int\051,) 144 534.67 S
-0.7 (obtain_tag\0502\051\051) 213.26 518.67 S
108 458.98 540 462 C
90 460.49 558 460.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(5. T) 108 467.33 T
(ypes and storage) 133.17 467.33 T
0 14 Q
(Concr) 108 417.64 T
(ete types ar) 145.05 417.64 T
(e speci\336ed by their attributes) 213.18 417.64 T
3 F
(ANDF only represents the concrete aspects of types. These concrete types) 108 388.64 T
(are called \324shapes.\325) 108 372.64 T
(The static semantics of types in general, and static type safety in particular) 108 344.64 T
(,) 524.41 344.64 T
(are language-speci\336c, and so are handled by the producer) 108 328.64 T
(.) 428.56 328.64 T
(Integer shapes are speci\336ed by their minimum and maximum values;) 108 300.64 T
(\337oating point shapes are speci\336ed by their extreme exponent values and) 108 284.64 T
(their precision.) 108 268.64 T
0 12 Q
(C version:) 108 245.98 T
4 14 Q
-0.7 (enum status {off, on}) 144 218.64 S
-0.7 (enum binding {hardback, paperback}) 144 202.64 S
-0.7 (char) 144 186.64 S
-0.7 (enum Latin_1 {L1_null, ... L1_xxx}) 144 170.64 S
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(ANDF supports deferr) 108 736.84 T
(ed decisions) 185.13 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(9 of 15) 511.69 54.45 T
108 90 540 720 R
7 X
V
0 12 Q
0 X
(ANDF version:) 108 712 T
4 14 Q
-0.7 (Integer\0500,1\051) 144 684.67 S
-0.7 (Integer\0500,1\051) 144 668.67 S
-0.7 (Integer\0500,255\051) 144 652.67 S
-0.7 (Integer\0500,255\051) 144 636.67 S
0 12 Q
(Ada version:) 108 614 T
4 14 Q
-0.7 (type binding is \050paperback, hardback\051;) 144 586.67 S
-0.7 (type discount is \050textbook, paperback,) 144 570.67 S
-0.7 (hardback, used\051;) 274.82 554.67 S
0 12 Q
(ANDF version:) 108 532 T
4 14 Q
-0.7 (Integer\0500,1\051) 144 504.67 S
-0.7 (Integer\0500,3\051) 144 488.67 S
0 12 Q
(Rationale:) 108 466 T
3 14 Q
(Data type semantics vary from language to language, so should not be) 108 438.67 T
(represented in ANDF) 108 422.67 T
(.) 227.34 422.67 T
0 F
(Data layouts ar) 108 376.67 T
(e not speci\336ed) 199.47 376.67 T
3 F
(ANDF provides primitives for constructing compound data types, such as) 108 347.67 T
(structures, unions, and arrays. Data layout is the installer) 108 331.67 T
(\325) 426.02 331.67 T
(s responsibility) 429.91 331.67 T
(, as) 514.13 331.67 T
(this is machine-dependent. This is a major dif) 108 315.67 T
(ference with traditional) 363.47 315.67 T
(compiler intermediate languages, where data layout is performed in the) 108 299.67 T
(front end \050or \324middle\325\051.) 108 283.67 T
(A corollary of this is that concrete data attributes such as size and relative) 108 255.67 T
(position are not known at translation time in general, and thus must be) 108 239.67 T
(deferred to installation time.) 108 223.67 T
108 163.98 540 167 C
90 165.49 558 165.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(6. ANDF supports deferred decisions) 108 172.33 T
3 14 Q
(In a distribution format, unlike a compiler intermediate language, no) 108 140.64 T
(machine dependencies are tolerable in the front end or producer) 108 124.64 T
(. Thus,) 464.31 124.64 T
(many things must be deferrable to installation time in an unambiguous way) 108 108.64 T
(.) 528.78 108.64 T
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(ANDF supports deferr) 108 736.84 T
(ed decisions) 185.13 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(10 of 15) 506.69 54.45 T
108 90 540 720 R
7 X
V
0 14 Q
0 X
(Unambiguous unique identi\336ers support linking) 108 710.67 T
3 F
(Any portable program must depend on a variety of libraries speci\336c to each) 108 681.67 T
(machine. Identifying procedures \050and other entities\051 in these libraries is) 108 665.67 T
(crucial. On dif) 108 649.67 T
(ferent machines, the same procedure may have dif) 188.96 649.67 T
(ferent) 470.02 649.67 T
(names, or procedures may have the same name but dif) 108 633.67 T
(ferent functions.) 411.62 633.67 T
(ANDF provides for the registration of unique names \050) 108 605.67 T
1 F
(cf.) 409.56 605.67 T
3 F
( Internet addresses\051) 423.16 605.67 T
(so that global symbols are completely unambiguous.) 108 589.67 T
0 12 Q
(C version:) 108 567 T
4 14 Q
-0.7 (void invert_matrix\050\051;) 144 539.67 S
5 F
(\321 NAG? IMSL? other?) 306 539.67 T
0 12 Q
(ANDF version:) 108 517 T
4 14 Q
-0.7 (Make_uniq\050245,732\051) 144 489.67 S
5 F
(\321 245 registered to NAG \050) 306 489.67 T
7 F
(e.g.) 441.84 489.67 T
5 F
(\051) 460.98 489.67 T
0 F
(ANDF supports install-time code parameterization) 108 443.67 T
3 F
(Not only identi\336er references, but also values, concrete types \050shapes\051, and) 108 414.67 T
(even macros must often be deferred to installation. Examples are) 108 398.67 T
(con\336guration parameters and data types for libraries \050header \336les in C\051,) 108 382.67 T
(where dif) 108 366.67 T
(ferent implementations may have dif) 160.98 366.67 T
(ferent de\336nitions.) 366.69 366.67 T
(This requirement is completely foreign to compiler intermediate languages,) 108 338.67 T
(which typically expand out data de\336nition early on.,) 108 322.67 T
(ANDF tokens provide general syntax-macro functionality) 108 294.67 T
(. Syntax macros,) 430.8 294.67 T
(like those found in ANDF or Lisp, and unlike the lexical macros found in C) 108 278.67 T
(and other languages, operate on syntactically meaningful program) 108 262.67 T
(fragments such as expressions and type de\336nitions.) 108 246.67 T
3 11 Q
(1) 394.42 252.27 T
3 14 Q
( ANDF provides the) 399.92 246.67 T
(additional, critical, capability of separating token declaration \050similar to C) 108 230.67 T
(prototypes\051 from token de\336nition, and allows de\336nitions to be deferred to) 108 214.67 T
(installation time.) 108 198.67 T
(T) 108 170.67 T
(okens thus become an abstraction mechanism allowing tar) 115.57 170.67 T
(get-independent) 441.37 170.67 T
(speci\336cation of interfaces in the source code. The tar) 108 154.67 T
(get-dependent) 403.45 154.67 T
108 117 540 137.09 C
108 124.99 239.98 124.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
3 11 Q
0 X
0 K
(1.  See B.M. Leavenworth, \322Syntax Macros and Extended T) 108 109.67 T
(ranslation\323) 372.15 109.67 T
1 F
(Commun. ACM) 423.11 109.67 T
0 F
(9) 494.21 109.67 T
3 F
(:1) 499.71 109.67 T
(1:790) 507.85 109.67 T
(\050November) 118.8 97.67 T
(, 1966\051.) 168.39 97.67 T
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(ANDF supports deferr) 108 736.84 T
(ed decisions) 185.13 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(11 of 15) 506.69 54.45 T
108 90 540 720 R
7 X
V
3 14 Q
0 X
(implementation of types and macros is \322linked in\323 at installation time, just) 108 710.67 T
(like library procedures.) 108 694.67 T
(Producers may also use tokens to translate common constructions, thus) 108 666.67 T
(reducing ANDF size, just as regular macros can be used as shorthands.) 108 650.67 T
(T) 108 622.67 T
(okens are also an important mechanism for extensions to ANDF) 115.57 622.67 T
(.) 473.93 622.67 T
0 12 Q
(Example:) 108 600 T
3 F
-0.23 (In most Unix implementations, getchar is a macro, for efficiency. However, the) 144 578 P
(text of this macro varies from implementation to implementation.) 144 564 T
-0.68 (The Token mechanism allows leaving the macro call in the intermediate code, to) 144 544 P
(be substituted at installation. This preserves both neutrality and efficiency.) 144 530 T
0 14 Q
(ANDF supports static conditionals \050conditional compilation\051) 108 484.67 T
3 F
(An important mechanism used for writing portable code is conditional) 108 455.67 T
(compilation. T) 108 439.67 T
(raditional compilers eliminate such static conditionals in the) 189.91 439.67 T
(preprocessor) 108 423.67 T
(. This of course is incompatible with ANDF\325) 178.72 423.67 T
(s goals. ANDF) 429.01 423.67 T
(thus provides for explicit conditionals. Code is then selected at install time) 108 407.67 T
(through dead code elimination.) 108 391.67 T
0 12 Q
(C version:) 108 369 T
4 14 Q
-0.7 (#if VAX) 144 341.67 S
-0.7 (printf\050\322Running on a Vax\323\051;) 162 325.67 S
-0.7 (#endif) 144 309.67 S
0 12 Q
(ANDF version:) 108 287 T
4 14 Q
-0.7 (exp_cond\050) 144 259.67 S
-0.7 (integer_test_i\050equal,...,) 180 243.67 S
-0.7 (<<VAX>>\051,) 270 227.67 S
-0.7 (<<printf\050\322Running on a Vax\323\051;>> ,) 180 211.67 S
-0.7 (make_void\050\051\051) 180 195.67 S
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Contr) 108 736.84 T
(ol structur) 128.29 736.84 T
(e) 164.34 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(12 of 15) 506.69 54.45 T
108 90 540 720 R
7 X
V
108 700.98 540 704 C
90 702.49 558 702.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(7. Control structure) 108 709.33 T
0 14 Q
(Contr) 108 659.64 T
(ol structur) 143.5 659.64 T
(es ar) 206.59 659.64 T
(e escapes fr) 234.7 659.64 T
(om blocks) 302.83 659.64 T
3 F
(ANDF provides primitives with which conventional control structures may) 108 630.64 T
(be built. Most classic control structures \050do, for) 108 614.64 T
(, while\051 are represented as) 372.87 614.64 T
(blocks with escapes, rather than as arbitrary goto\325) 108 598.64 T
(s. This simpli\336es the) 385.45 598.64 T
(design of the ANDF producer) 108 582.64 T
(. ANDF installers may use ANDF-to-ANDF) 274.33 582.64 T
(transformations to reduce these to the equivalent goto\325) 108 566.64 T
(s.) 412.29 566.64 T
108 506.95 540 509.98 C
90 508.46 558 508.46 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(8. Beyond C) 108 515.31 T
0 14 Q
(ANDF supports conventional languages) 108 465.62 T
3 F
(The features of ANDF presented so far are common to all languages, and) 108 436.62 T
(suf) 108 420.62 T
(\336cient for most conventional sequential procedural languages. Although) 124.85 420.62 T
(examples have been drawn from C, the same mechanisms suf) 108 404.62 T
(\336ce for other) 452.04 404.62 T
(languages with similar run-time structures, such as C++, Algol 60, Fortran,) 108 388.62 T
(Pascal, \311.) 108 372.62 T
(Some conventional sequential languages may need additional ANDF) 108 344.62 T
(constructs or standard token libraries. Cobol and PL/I, for instance, may) 108 328.62 T
(bene\336t from special support for decimal arithmetic.) 108 312.62 T
0 F
(Other languages may be cover) 108 266.62 T
(ed in futur) 288.85 266.62 T
(e extensions) 352.35 266.62 T
3 F
(The design process leading to ANDF covered a wide spectrum of) 108 237.62 T
(languages, from C to Ada, Common Lisp, and ML. The base constructs) 108 221.62 T
(present in the current version of ANDF are believed to be appropriate for all) 108 205.62 T
(these languages.) 108 189.62 T
(If and when other constructs or standard token libraries become necessary) 108 161.62 T
(to support other languages, they may be added to the de\336nition of ANDF) 108 145.62 T
(after technical and business analysis. Of course, full upward compatibility) 108 129.62 T
(will always be preserved.) 108 113.62 T
FMENDPAGE
%%EndPage: "12" 13
%%Page: "13" 13
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Binary form is compact but \337exible) 108 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(13 of 15) 506.69 54.45 T
108 90 540 720 R
7 X
V
108 700.98 540 704 C
90 702.49 558 702.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(9. Binary form is compact but \337exible) 108 709.33 T
3 14 Q
(The presentation form of ANDF used so far in this paper is designed for) 108 677.64 T
(easy reading by engineers. ANDF\325) 108 661.64 T
(s machine form, on the other hand, is) 301.9 661.64 T
(designed to be a compact and ef) 108 645.64 T
(\336cient encoding for storage, transmission,) 287.27 645.64 T
(and processing. It is isomorphic to the presentation form, but is highly) 108 629.64 T
(compressed. Several techniques are used for compression.) 108 613.64 T
0 F
(Bit-packed encoding) 108 567.64 T
3 F
(ANDF is fully packed.) 108 538.64 T
(Encodings for elementary constants and constructors whose maximum size) 108 510.64 T
(is known) 108 494.64 T
1 F
(a priori) 162.42 494.64 T
3 F
( are encoded bit-ef) 205.57 494.64 T
(\336ciently) 309.83 494.64 T
(. For instance, there are only) 354.78 494.64 T
(four possible values for a boolean constant: false, true, T) 108 478.64 T
(oken-Nat \050a local) 424.51 478.64 T
(symbolic constant\051, and T) 108 462.64 T
(oken-Unique \050a global symbolic constant\051. Thus) 252.37 462.64 T
(the encoding is performed in 2 bits \050with a following T) 108 446.64 T
(oken code if) 414.82 446.64 T
(necessary\051.) 108 430.64 T
0 F
(No arbitrary size limits) 108 384.64 T
3 F
(Fields whose maximum size cannot be known) 108 355.64 T
1 F
(a priori) 369.56 355.64 T
3 F
( have a size) 412.71 355.64 T
(determined in the header for the ANDF capsule. For instance, if there are) 108 339.64 T
(423 dif) 108 323.64 T
(ferent tags in a given capsule, precisely 9 bits will be reserved to) 147.78 323.64 T
(specify each tag for that capsule.) 108 307.64 T
(Unlike conventional approaches which must guess at the maximum useful) 108 279.64 T
(size of a \336eld, and then apply this maximum to all uses, including those that) 108 263.64 T
(need only a small fraction, space is not wasted, nor is capacity limited.) 108 247.64 T
0 F
(T) 108 201.64 T
(r) 116.3 201.64 T
(ee structur) 122.26 201.64 T
(e is implicit) 186.89 201.64 T
3 F
(Constructs are represented in Polish pre\336x form. Since most constructs are) 108 172.64 T
(of \336xed arity) 108 156.64 T
(, no explicit parenthesization is needed. Constructs of variable) 179.38 156.64 T
(arity are immediately preceded by a length speci\336cation.) 108 140.64 T
FMENDPAGE
%%EndPage: "13" 14
%%Page: "14" 14
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Conclusion) 108 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(14 of 15) 506.69 54.45 T
108 90 540 720 R
7 X
V
0 14 Q
0 X
(T) 108 710.67 T
(okens compr) 116.05 710.67 T
(ess common subtr) 192.36 710.67 T
(ees) 299.37 710.67 T
3 F
(The T) 108 681.67 T
(oken mechanism described as a portability feature is also used to) 140.83 681.67 T
(compress commonly-occurring idioms. For instance, the C construct) 108 665.67 T
4 F
-0.7 (x++) 495.08 665.67 S
3 F
( is) 518.17 665.67 T
(represented in ANDF as) 108 649.67 T
4 F
-0.7 (\050temp = x; x = x+1; temp\051) 247.11 649.67 S
3 F
(. Rather than) 439.5 649.67 T
(copy this tree wherever) 108 633.67 T
4 F
-0.7 (x++) 242.44 633.67 S
3 F
( is written, an ANDF producer for C may use a) 265.52 633.67 T
(token which expands to the full de\336nition. The reference producer does this.) 108 617.67 T
0 F
(Extensible) 108 571.67 T
3 F
(Despite its compactness, the binary form is extensible. All potentially) 108 542.67 T
(extensible \336elds include an escape value, which allows extending to) 108 526.67 T
(additional values in the future.) 108 510.67 T
108 450.98 540 454 C
90 452.49 558 452.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 16 Q
0 X
0 K
(10. Conclusion) 108 459.33 T
3 14 Q
(ANDF was speci\336cally designed as a multi-language, multi-architecture) 108 427.64 T
(portability and distribution format.) 108 411.64 T
(Unlike adaptations of existing compiler intermediate languages, it is not) 108 383.64 T
(distorted by a language- or machine- speci\336c history) 108 367.64 T
(.) 401.27 367.64 T
(Unlike low-level programming languages, it does not need to make) 108 339.64 T
(concessions to human users.) 108 323.64 T
(Unlike either) 108 295.64 T
(, its semantics are de\336ned by a speci\336cation, and not by) 180.89 295.64 T
(particular machines or tools.) 108 279.64 T
(On the contrary) 108 251.64 T
(, its designers have produced a wide-spectrum intermediate) 194.91 251.64 T
(language with many desirable properties:) 108 235.64 T
3 13 Q
(\245) 122.4 212.31 T
(Uniform structure) 136.8 212.31 T
(\245) 122.4 189.31 T
(Language independence) 136.8 189.31 T
(\245) 122.4 166.31 T
(Machine independence) 136.8 166.31 T
(\245) 122.4 143.31 T
(Complete and unambiguous de\336nition) 136.8 143.31 T
(\245) 122.4 120.31 T
(Compact encoding) 136.8 120.31 T
(\245) 122.4 97.31 T
(Extensibility) 136.8 97.31 T
FMENDPAGE
%%EndPage: "14" 15
%%Page: "15" 15
612 792 0 FMBEGINPAGE
108 72 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(The Structure of ANDF: Principles and Examples) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Conclusion) 108 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(15 of 15) 506.69 54.45 T
108 90 540 720 R
7 X
V
0 14 Q
0 X
(For further information please contact:) 216 654.67 T
(Stavr) 216 622.67 T
(os Macrakis) 248.39 622.67 T
(macrakis@osf.org) 216 606.67 T
(\050617\051 621-7356) 216 590.67 T
108 90 540 720 C
108 90 540 216 C
108 90 540 207 R
7 X
0 K
V
3 10 Q
0 X
(Copyright 1993 by Open Software Foundation, Inc.) 108 200.33 T
(All Rights Reserved) 108 178.33 T
-0.19 (Permission to reproduce this document without fee is hereby granted, provided that the copyright notice and) 108 156.33 P
-0.08 (this permission notice appear in all copies or derivative works. OSF MAKES NO W) 108 144.33 P
-0.08 (ARRRANTY OF ANY) 443.36 144.33 P
(KIND WITH REGARD T) 108 132.33 T
(O THIS MA) 213.57 132.33 T
(TERIAL, INCLUDING, BUT NOT LIMITED T) 262.98 132.33 T
(O, THE IMPLIED) 459.05 132.33 T
-0.04 (W) 108 120.33 P
-0.04 (ARRANTIES OF MERCHANT) 116.32 120.33 P
-0.04 (ABILITY AND FITNESS FOR A P) 245.37 120.33 P
-0.04 (AR) 390 120.33 P
-0.04 (TICULAR PURPOSE. OSF shall) 403.28 120.33 P
(not be liable for errors contained herein or for any direct or indirect, incidental, special or consequential) 108 108.33 T
(damages in connection with the furnishing, performance, or use of this material.) 108 96.33 T
108 90 540 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "15" 16
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 15 1
%%DocumentFonts: Times-Bold
%%+ Times-Italic
%%+ Times-BoldItalic
%%+ Times-Roman
%%+ Courier
%%+ Helvetica-Narrow
%%+ Symbol
%%+ Helvetica-Narrow-Oblique
