%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 11 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-BoldItalic FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
108 81 540 81 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 747 540 747 2 L
7 X
V
3 H
0 Z
0 X
N
108 46.88 342 63 R
7 X
V
0 10 Q
0 X
(6/29/93 11:10 pm macrakis@osf.org) 108 56.33 T
360 46.88 540 63 R
7 X
V
0 X
(\251 1993 OSF) 360 56.33 T
(1 of 7) 516.68 56.33 T
108 90 540 711 R
7 X
V
1 24 Q
0 X
-1.2 (Reliable interface de\336nition and checking:) 138.57 695 S
-1.2 (ANDF for COSE) 246.5 665 S
0 12 Q
(Stavr) 278.97 583 T
(os Macrakis) 306.73 583 T
(Open Softwar) 254.47 553 T
(e Foundation) 325.88 553 T
(Resear) 277.31 538 T
(ch Institute) 312.39 538 T
(May 1993) 298.85 508 T
0 14 Q
(COSE de\336nes a standard Applications) 180 431.67 T
(Pr) 180 415.67 T
(ogramming Interface. ANDF technology can) 194.51 415.67 T
(specify this interface pr) 180 399.67 T
(ecisely and check) 320.04 399.67 T
(applications\325 conformance to it. This) 180 383.67 T
(implementation-independent speci\336cation) 180 367.67 T
(enhances portability) 180 351.67 T
(.) 300.89 351.67 T
108 291.98 540 295 C
90 293.49 558 293.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(1. Introduction) 108 300.33 T
2 14 Q
(COSE is a common application programming interface. Unlike existing) 108 268.64 T
3 F
(de) 512.97 268.64 T
(facto) 108 252.64 T
2 F
( and) 135.99 252.64 T
3 F
(de jur) 163.19 252.64 T
(e) 195.7 252.64 T
2 F
( standards \050Posix, XPG/3\051, it is intended to cover the full) 201.92 252.64 T
(interface of commercially available Unix-derived systems.) 108 236.64 T
(Current plans call for COSE to be documented in English and de\336ned using) 108 208.64 T
(parameterized C header \336les. Parameterized headers cannot be validated for) 108 192.64 T
-0.52 (consistency across platforms, nor can applications be validated for portability) 108 176.64 P
(across conforming platforms.) 108 160.64 T
-0.08 (This paper proposes using OSF\325) 108 132.64 P
-0.08 (s ANDF C to de\336ne COSE. ANDF tools can) 287.26 132.64 P
(then check that the COSE interfaces are indeed consistent across platforms,) 108 116.64 T
(and can check that applications are portable across platforms.) 108 100.64 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
108 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(ANDF for COSE) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(COSE interfaces in C ar) 108 736.84 T
(e parameterized by implementation) 190.91 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(2 of 7) 516.68 54.45 T
108 90 540 711 R
7 X
V
108 691.98 540 695 C
90 693.49 558 693.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(2. COSE interfaces in C are parameterized by implementation) 108 700.33 T
0 14 Q
(COSE interfaces ar) 108 650.64 T
(e speci\336ed as C de\336nitions) 224.33 650.64 T
2 F
(COSE interfaces are currently documented in traditional Unix-style) 108 621.64 T
4 F
-0.7 (man) 489.61 621.64 S
2 F
-0.05 (pages. Functional interfaces are described with C prototypes, which may use) 108 605.64 P
(C built-in types \050) 108 589.64 T
4 F
-0.7 (int) 203.23 589.64 S
2 F
(,) 226.32 589.64 T
4 F
-0.7 (char) 233.31 589.64 S
2 F
(, \311\051 or interface-speci\336c types. In the program) 263.54 589.64 T
-0.54 (itself, the prototypes and interface-speci\336c types are de\336ned by) 108 573.64 P
4 F
-1.19 -0.7 (include) 460.63 573.64 B
2 F
-0.54 (\325ing) 514.5 573.64 P
(a header \336le \050) 108 557.64 T
4 F
-0.7 (.h) 184.54 557.64 S
2 F
(\051 speci\336ed in the) 199.93 557.64 T
4 F
-0.7 (man) 296.31 557.64 S
2 F
( page.) 319.39 557.64 T
-0.2 (Header \336les de\336ne interface-speci\336c types in terms of built-in types and type) 108 529.64 P
-0.31 (constructors, and functional interfaces in terms of the interface-speci\336c types.) 108 513.64 P
0 F
(COSE\325) 108 467.64 T
(s C header \336les ar) 150.24 467.64 T
(e parameterized) 257.26 467.64 T
2 F
(All implementations will probably use the same prototypes to de\336ne) 108 438.64 T
(functional interfaces) 108 422.64 T
2 11 Q
(1) 222.62 428.24 T
2 14 Q
(. However) 228.12 422.64 T
(, the interface-speci\336c types will vary) 285.84 422.64 T
(. Thus) 495.54 422.64 T
(there cannot be a standard set of COSE header \336les across all) 108 406.64 T
-0.65 (implementations. Instead of having completely disjoint header \336les, however) 108 390.64 P
-0.65 (,) 533.65 390.64 P
(COSE proposes parameterized header \336les with appropriate compile-time) 108 374.64 T
(conditionals \050) 108 358.64 T
4 F
-0.7 (#ifdef) 184.57 358.64 S
2 F
(s\051. In ef) 230.74 358.64 T
(fect, each platform will have a somewhat) 273.61 358.64 T
(dif) 108 342.64 T
(ferent header \336le, parameterized by its characteristics.) 123.29 342.64 T
-0.51 (The advantage of this approach is that these parameterized header \336les can be) 108 314.64 P
(used with current compilers.) 108 298.64 T
(However) 108 270.64 T
(, they have several severe disadvantages.) 158.72 270.64 T
0 F
(Parameterized header \336les cannot be validated for internal consistency) 108 224.64 T
2 F
(Since the header \336les will be complicated, errors will be hard to \336nd, and) 108 195.64 T
(maintaining them will be dif) 108 179.64 T
(\336cult.) 267.11 179.64 T
108 117 540 137.09 C
108 124.99 239.98 124.99 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
2 11 Q
0 X
0 K
-0.32 (1.  Actually) 108 109.67 P
-0.32 (, some functional interfaces may be de\336ned as macros on some implementations. Since) 158.21 109.67 P
(macros and functions belong to dif) 118.8 97.67 T
(ferent namespaces, this complicates matters.) 271.48 97.67 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
108 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(ANDF for COSE) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(COSE interfaces in C ar) 108 736.84 T
(e parameterized by implementation) 190.91 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(3 of 7) 516.68 54.45 T
108 90 540 711 R
7 X
V
2 14 Q
0 X
(Since the header \336les are parameterized by platform, tools cannot verify that) 108 701.67 T
(they are consistent between platforms.) 108 685.67 T
0 F
(Parameterized header \336les specify too much) 108 639.67 T
2 F
(Since the header \336les can only use the C type system, certain aspects of type) 108 610.67 T
(behavior have to be made explicit even the published speci\336cation leaves) 108 594.67 T
-0.22 (them unde\336ned. Applications may take advantage of them \050with no checking) 108 578.67 P
(possible\051 and be incompatible with some future implementation. The best) 108 562.67 T
(possible check is against all possible parameterizations of the header \336le,) 108 546.67 T
(which may not re\337ect all the implementation freedom de\336ned by the) 108 530.67 T
(speci\336cation.) 108 514.67 T
0 F
(Parameterized header \336les do not specify enough) 108 468.67 T
2 F
-0.26 (Since the header \336les must de\336ne prototypes in terms of C types, they cannot) 108 439.67 P
(specify what the desired semantics are, only one implementation of them.) 108 423.67 T
(They do not re\337ect the full intent of the COSE speci\336cation.) 108 407.67 T
0 F
(Parameterized header \336les do not support conformance checking) 108 361.67 T
2 F
(The only way to assure that an application is portable to a given COSE) 108 332.67 T
(platform is to compile it on that platform. An application would have to be) 108 316.67 T
(compiled on every existing platform for conformance checking, and that) 108 300.67 T
(would only check currently available platforms.) 108 284.67 T
0 F
(Parameterized header \336les r) 108 238.67 T
(estrict futur) 276.77 238.67 T
(e development) 348.4 238.67 T
2 F
(Since parameterized header \336les specify too much about existing) 108 209.67 T
(implementations, not enough about the interface itself, and do not support) 108 193.67 T
(conformance checking against the standard, they restrict future) 108 177.67 T
(implementations to be like present implementations. T) 108 161.67 T
(o validate an) 412.12 161.67 T
(application against a future implementation of COSE would require) 108 145.67 T
(compiling it on that implementation.) 108 129.67 T
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
108 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(ANDF for COSE) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(COSE interfaces in ANDF ar) 108 736.84 T
(e constant acr) 207.35 736.84 T
(oss implementations) 254.72 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(4 of 7) 516.68 54.45 T
108 90 540 711 R
7 X
V
1 16 Q
0 X
(3. COSE interfaces in ANDF are constant across) 108 700.33 T
108 673.98 540 677 C
90 675.49 558 675.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(implementations) 108 682.33 T
2 14 Q
(Unlike C header \336les, ANDF header \336les specify the interface itself, and not) 108 650.64 T
(one implementation of it.) 108 634.64 T
0 F
(COSE interfaces can be speci\336ed as ANDF C de\336nitions) 108 588.64 T
2 F
(Using ANDF) 108 559.64 T
(, functional interfaces would continue to be speci\336ed by) 181.89 559.64 T
(prototypes \050possibly in token syntax\051. T) 108 543.64 T
(ypes, however) 330.11 543.64 T
(, would be abstracted) 410.37 543.64 T
(using ANDF mechanisms. Only the properties of a type speci\336ed by the) 108 527.64 T
(COSE standard would be re\337ected in the header) 108 511.64 T
(.) 376.53 511.64 T
0 F
(COSE\325) 108 465.64 T
(s ANDF C header \336les ar) 150.24 465.64 T
(e implementation-independent) 299.61 465.64 T
2 F
(All implementations would use identical header \336les, with no compile-time) 108 436.64 T
(ces. T) 108 420.64 T
(ypes are speci\336ed abstractly; macro and function implementations) 140.43 420.64 T
(share the same abstract declaration.) 108 404.64 T
-0.19 (Implementation-speci\336c bindings would be supplied at installation time. The) 108 376.64 P
-0.06 (install-time headers would be identical to current platform-dependent header) 108 360.64 P
(\336les.) 108 344.64 T
0 F
(ANDF header \336les can be validated for internal consistency) 108 298.64 T
2 F
(ANDF header \336les are identical across implementations, so the ANDF) 108 269.64 T
(semantic analyzer can identify any internal inconsistencies or errors.) 108 253.64 T
(Since ANDF header \336les are unparameterized, errors need only be corrected) 108 225.64 T
(once for all platforms, and extending and maintaining them is easy) 108 209.64 T
(.) 480.56 209.64 T
0 F
(ANDF header \336les specify exactly enough) 108 163.64 T
2 F
(ANDF header \336les specify exactly what the interface requires, no more, no) 108 134.64 T
(less. Thus applications cannot depend, intentionally or unintentionally) 108 118.64 T
(, onI) 500.02 118.64 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
108 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(ANDF for COSE) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(COSE interfaces in ANDF ar) 108 736.84 T
(e constant acr) 207.35 736.84 T
(oss implementations) 254.72 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(5 of 7) 516.68 54.45 T
108 90 540 711 R
7 X
V
2 14 Q
0 X
(nonstandard features of their development environment. For instance,) 108 701.67 T
(\322internal\323 structure \336elds simply do not exist in the ANDF header \336les.) 108 685.67 T
0 F
(ANDF header \336les support conformance checking for implementations) 108 639.67 T
2 F
(ANDF supports checking of platform-dependent header \336les against the) 108 610.67 T
(platform-independent header \336les. Thus the conformance of tar) 108 594.67 T
(get platforms) 462.13 594.67 T
(to the COSE standard can be checked independently of particular) 108 578.67 T
(applications.) 108 562.67 T
0 F
(ANDF header \336les support conformance checking for applications) 108 516.67 T
2 F
(ANDF supports checking of applications against platform-independent) 108 487.67 T
-0.17 (header \336les. Thus the conformance of applications to the COSE standard can) 108 471.67 P
(be checked independently of particular platforms.) 108 455.67 T
0 F
(ANDF header \336les encourage futur) 108 409.67 T
(e impr) 317.61 409.67 T
(ovement) 356.6 409.67 T
2 F
(Since ANDF header \336les separate the speci\336cation of the interface from its) 108 380.67 T
(implementation, they are open to innovative implementations. Such) 108 364.67 T
(innovations are not constrained to be among the alternatives re\337ected in the) 108 348.67 T
(parameterized header \336les.) 108 332.67 T
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
108 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(ANDF for COSE) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(The next steps) 108 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(6 of 7) 516.68 54.45 T
108 90 540 711 R
7 X
V
108 691.98 540 695 C
90 693.49 558 693.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(4. The next steps) 108 700.33 T
0 14 Q
(COSE should choose between token syntax and tspec syntax) 108 650.64 T
2 F
-0.12 (ANDF C currently of) 108 621.64 P
-0.12 (fers a choice of two formalisms for interface de\336nition:) 227.47 621.64 P
(the token syntax and associated) 108 605.64 T
4 F
-0.7 (#pragma) 287.93 605.64 S
2 F
( extensions and the) 341.8 605.64 T
4 F
-0.7 (tspec) 452.17 605.64 S
2 F
( syntax) 490.64 605.64 T
(and tool.) 108 589.64 T
-0.01 (The token syntax is stable, general, and well-validated. The current snapshot) 108 561.64 P
(of ANDF uses it to specify all relevant API\325) 108 545.64 T
(s:) 354.39 545.64 T
2 11 Q
(ANSI) 367.22 545.64 T
2 14 Q
(C,) 395.6 545.64 T
2 11 Q
(POSIX) 411.93 545.64 T
2 14 Q
(,) 443.67 545.64 T
2 11 Q
(XPG/3) 450.66 545.64 T
2 14 Q
(, System) 481.18 545.64 T
(V) 108 529.64 T
(.4. On the other hand, its syntax is somewhat clumsy) 116.3 529.64 T
(, and in particular) 410.77 529.64 T
(completely dif) 108 513.64 T
(ferent from C syntax.) 188.97 513.64 T
(The) 108 485.64 T
4 F
-0.7 (tspec) 133.26 485.64 S
2 F
( syntax is more recent and less general, since it is designed) 171.73 485.64 T
(speci\336cally for specifying traditional C interfaces. In most cases,) 108 469.64 T
4 F
-0.7 (tspec) 474.46 469.64 S
2 F
(syntax is identical to C syntax, thus making it easier to convert existing) 108 453.64 T
(speci\336cations. Moreover) 108 437.64 T
(, vanishingly few interfaces need the full generality) 245.78 437.64 T
(of token syntax.) 108 421.64 T
(Barring unforseen dif) 108 393.64 T
(\336culties, tspec appears to be the appropriate formalism) 228.21 393.64 T
(for COSE interface de\336nition.) 108 377.64 T
0 F
(Real COSE interfaces should be translated into ANDF) 108 331.64 T
2 F
(As of this writing, COSE header \336les have not been released.) 108 302.64 T
(When they are released, it would be useful to check that they can be) 108 274.64 T
(converted to ANDF header \336les.) 108 258.64 T
(It would also be useful to have concrete examples of the dif) 108 230.64 T
(ference between) 441.55 230.64 T
(parameterized header \336les and platform-independent header \336les.) 108 214.64 T
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
108 74.02 540 74.02 2 L
7 X
0 K
V
0.25 H
2 Z
0 X
N
108 750.02 540 750.02 2 L
7 X
V
0 Z
0 X
N
108 46.88 324 63 R
7 X
V
0 10 Q
0 X
(ANDF for COSE) 108 56.33 T
108 726.98 540 742.18 R
7 X
V
0 8 Q
0 X
(Conclusion: ANDF is the best way to specify COSE) 108 736.84 T
351 45 540 61.12 R
7 X
V
0 10 Q
0 X
(7 of 7) 516.68 54.45 T
108 90 540 711 R
7 X
V
108 691.98 540 695 C
90 693.49 558 693.49 2 L
0.25 H
2 Z
0 X
0 K
N
0 0 612 792 C
1 16 Q
0 X
0 K
(5. Conclusion: ANDF is the best way to specify COSE) 108 700.33 T
2 14 Q
(ANDF can specify COSE interfaces precisely and \337exibly) 108 668.64 T
(.) 433.12 668.64 T
(ANDF tools can check that platform-dependent header \336les conform to) 108 640.64 T
(COSE.) 108 624.64 T
(ANDF tools can check that applications conform to COSE interfaces.) 108 596.64 T
-0.59 (The industry can only bene\336t from common interfaces if there are operational) 108 568.64 P
(ways to validate correct use and implementation of these interfaces.) 108 552.64 T
(ANDF is thus appropriate technology for specifying COSE interfaces.) 108 524.64 T
108 90 540 711 C
108 90 540 216 C
108 90 540 207 R
7 X
0 K
V
2 10 Q
0 X
(Copyright 1993 by Open Software Foundation, Inc.) 108 200.33 T
(All Rights Reserved) 108 178.33 T
-0.19 (Permission to reproduce this document without fee is hereby granted, provided that the copyright notice and) 108 156.33 P
-0.08 (this permission notice appear in all copies or derivative works. OSF MAKES NO W) 108 144.33 P
-0.08 (ARRRANTY OF ANY) 443.36 144.33 P
(KIND WITH REGARD T) 108 132.33 T
(O THIS MA) 213.57 132.33 T
(TERIAL, INCLUDING, BUT NOT LIMITED T) 262.98 132.33 T
(O, THE IMPLIED) 459.05 132.33 T
-0.04 (W) 108 120.33 P
-0.04 (ARRANTIES OF MERCHANT) 116.32 120.33 P
-0.04 (ABILITY AND FITNESS FOR A P) 245.37 120.33 P
-0.04 (AR) 390 120.33 P
-0.04 (TICULAR PURPOSE. OSF shall) 403.28 120.33 P
(not be liable for errors contained herein or for any direct or indirect, incidental, special or consequential) 108 108.33 T
(damages in connection with the furnishing, performance, or use of this material.) 108 96.33 T
108 90 540 711 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "7" 8
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 7 1
%%DocumentFonts: Times-Bold
%%+ Times-BoldItalic
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier
